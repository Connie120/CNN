// kernel_system.v

// Generated using ACDS version 18.1.2 277

`timescale 1 ps / 1 ps
module kernel_system (
		input  wire [34:0]  cc_snoop_data,              //          cc_snoop.data
		input  wire         cc_snoop_valid,             //                  .valid
		output wire         cc_snoop_ready,             //                  .ready
		input  wire         clock_reset_clk,            //       clock_reset.clk
		input  wire         clock_reset2x_clk,          //     clock_reset2x.clk
		input  wire         cc_snoop_clk_clk,           //      cc_snoop_clk.clk
		output wire [32:0]  kernel_ddr4a_address,       //      kernel_ddr4a.address
		output wire [63:0]  kernel_ddr4a_byteenable,    //                  .byteenable
		input  wire         kernel_ddr4a_readdatavalid, //                  .readdatavalid
		output wire         kernel_ddr4a_read,          //                  .read
		input  wire [511:0] kernel_ddr4a_readdata,      //                  .readdata
		output wire         kernel_ddr4a_write,         //                  .write
		output wire [511:0] kernel_ddr4a_writedata,     //                  .writedata
		input  wire         kernel_ddr4a_waitrequest,   //                  .waitrequest
		output wire [4:0]   kernel_ddr4a_burstcount,    //                  .burstcount
		output wire [32:0]  kernel_ddr4b_address,       //      kernel_ddr4b.address
		output wire [63:0]  kernel_ddr4b_byteenable,    //                  .byteenable
		input  wire         kernel_ddr4b_readdatavalid, //                  .readdatavalid
		output wire         kernel_ddr4b_read,          //                  .read
		input  wire [511:0] kernel_ddr4b_readdata,      //                  .readdata
		output wire         kernel_ddr4b_write,         //                  .write
		output wire [511:0] kernel_ddr4b_writedata,     //                  .writedata
		input  wire         kernel_ddr4b_waitrequest,   //                  .waitrequest
		output wire [4:0]   kernel_ddr4b_burstcount,    //                  .burstcount
		output wire [32:0]  kernel_ddr4c_address,       //      kernel_ddr4c.address
		output wire [63:0]  kernel_ddr4c_byteenable,    //                  .byteenable
		input  wire         kernel_ddr4c_readdatavalid, //                  .readdatavalid
		output wire         kernel_ddr4c_read,          //                  .read
		input  wire [511:0] kernel_ddr4c_readdata,      //                  .readdata
		output wire         kernel_ddr4c_write,         //                  .write
		output wire [511:0] kernel_ddr4c_writedata,     //                  .writedata
		input  wire         kernel_ddr4c_waitrequest,   //                  .waitrequest
		output wire [4:0]   kernel_ddr4c_burstcount,    //                  .burstcount
		output wire [32:0]  kernel_ddr4d_address,       //      kernel_ddr4d.address
		output wire [63:0]  kernel_ddr4d_byteenable,    //                  .byteenable
		input  wire         kernel_ddr4d_readdatavalid, //                  .readdatavalid
		output wire         kernel_ddr4d_read,          //                  .read
		input  wire [511:0] kernel_ddr4d_readdata,      //                  .readdata
		output wire         kernel_ddr4d_write,         //                  .write
		output wire [511:0] kernel_ddr4d_writedata,     //                  .writedata
		input  wire         kernel_ddr4d_waitrequest,   //                  .waitrequest
		output wire [4:0]   kernel_ddr4d_burstcount,    //                  .burstcount
		output wire         kernel_cra_waitrequest,     //        kernel_cra.waitrequest
		output wire [63:0]  kernel_cra_readdata,        //                  .readdata
		output wire         kernel_cra_readdatavalid,   //                  .readdatavalid
		input  wire [0:0]   kernel_cra_burstcount,      //                  .burstcount
		input  wire [63:0]  kernel_cra_writedata,       //                  .writedata
		input  wire [29:0]  kernel_cra_address,         //                  .address
		input  wire         kernel_cra_write,           //                  .write
		input  wire         kernel_cra_read,            //                  .read
		input  wire [7:0]   kernel_cra_byteenable,      //                  .byteenable
		input  wire         kernel_cra_debugaccess,     //                  .debugaccess
		output wire         kernel_irq_irq,             //        kernel_irq.irq
		input  wire         clock_reset_reset_reset_n   // clock_reset_reset.reset_n
	);

	wire         clk_1x_out_clk_clk;                                        // clk_1x:out_clk -> [cnn_sys:clock, irq_mapper:clk, kernel_cra:clk, kernel_irq:clk, mm_interconnect_0:clk_1x_out_clk_clk, reset:clk]
	wire         clk_2x_out_clk_clk;                                        // clk_2x:out_clk -> cnn_sys:clock2x
	wire         clk_snoop_out_clk_clk;                                     // clk_snoop:out_clk -> [acl_internal_snoop:in_clk_0_clk, rst_controller:clk]
	wire         reset_out_reset_reset;                                     // reset:out_reset_n -> [cnn_sys:resetn, irq_mapper:reset, kernel_cra:reset, kernel_irq:reset, mm_interconnect_0:kernel_cra_reset_reset_bridge_in_reset_reset, rst_controller:reset_in0]
	wire         kernel_cra_m0_waitrequest;                                 // mm_interconnect_0:kernel_cra_m0_waitrequest -> kernel_cra:m0_waitrequest
	wire  [63:0] kernel_cra_m0_readdata;                                    // mm_interconnect_0:kernel_cra_m0_readdata -> kernel_cra:m0_readdata
	wire         kernel_cra_m0_debugaccess;                                 // kernel_cra:m0_debugaccess -> mm_interconnect_0:kernel_cra_m0_debugaccess
	wire  [29:0] kernel_cra_m0_address;                                     // kernel_cra:m0_address -> mm_interconnect_0:kernel_cra_m0_address
	wire         kernel_cra_m0_read;                                        // kernel_cra:m0_read -> mm_interconnect_0:kernel_cra_m0_read
	wire   [7:0] kernel_cra_m0_byteenable;                                  // kernel_cra:m0_byteenable -> mm_interconnect_0:kernel_cra_m0_byteenable
	wire         kernel_cra_m0_readdatavalid;                               // mm_interconnect_0:kernel_cra_m0_readdatavalid -> kernel_cra:m0_readdatavalid
	wire  [63:0] kernel_cra_m0_writedata;                                   // kernel_cra:m0_writedata -> mm_interconnect_0:kernel_cra_m0_writedata
	wire         kernel_cra_m0_write;                                       // kernel_cra:m0_write -> mm_interconnect_0:kernel_cra_m0_write
	wire   [0:0] kernel_cra_m0_burstcount;                                  // kernel_cra:m0_burstcount -> mm_interconnect_0:kernel_cra_m0_burstcount
	wire  [63:0] mm_interconnect_0_cnn_sys_cra_ring_root_avs_readdata;      // cnn_sys:cra_ring_root_avs_readdata -> mm_interconnect_0:cnn_sys_cra_ring_root_avs_readdata
	wire         mm_interconnect_0_cnn_sys_cra_ring_root_avs_waitrequest;   // cnn_sys:cra_ring_root_avs_waitrequest -> mm_interconnect_0:cnn_sys_cra_ring_root_avs_waitrequest
	wire   [5:0] mm_interconnect_0_cnn_sys_cra_ring_root_avs_address;       // mm_interconnect_0:cnn_sys_cra_ring_root_avs_address -> cnn_sys:cra_ring_root_avs_address
	wire         mm_interconnect_0_cnn_sys_cra_ring_root_avs_read;          // mm_interconnect_0:cnn_sys_cra_ring_root_avs_read -> cnn_sys:cra_ring_root_avs_read
	wire   [7:0] mm_interconnect_0_cnn_sys_cra_ring_root_avs_byteenable;    // mm_interconnect_0:cnn_sys_cra_ring_root_avs_byteenable -> cnn_sys:cra_ring_root_avs_byteenable
	wire         mm_interconnect_0_cnn_sys_cra_ring_root_avs_readdatavalid; // cnn_sys:cra_ring_root_avs_readdatavalid -> mm_interconnect_0:cnn_sys_cra_ring_root_avs_readdatavalid
	wire         mm_interconnect_0_cnn_sys_cra_ring_root_avs_write;         // mm_interconnect_0:cnn_sys_cra_ring_root_avs_write -> cnn_sys:cra_ring_root_avs_write
	wire  [63:0] mm_interconnect_0_cnn_sys_cra_ring_root_avs_writedata;     // mm_interconnect_0:cnn_sys_cra_ring_root_avs_writedata -> cnn_sys:cra_ring_root_avs_writedata
	wire         irq_mapper_receiver0_irq;                                  // cnn_sys:kernel_irq -> irq_mapper:receiver0_irq
	wire   [0:0] kernel_irq_receiver_irq_irq;                               // irq_mapper:sender_irq -> kernel_irq:receiver_irq
	wire         rst_controller_reset_out_reset;                            // rst_controller:reset_out -> acl_internal_snoop:in_rst_0_reset

	kernel_system_acl_internal_snoop acl_internal_snoop (
		.in_clk_0_clk   (clk_snoop_out_clk_clk),          //   input,   width = 1, in_clk_0.clk
		.in_rst_0_reset (rst_controller_reset_out_reset), //   input,   width = 1, in_rst_0.reset
		.in_0_data      (cc_snoop_data),                  //   input,  width = 35,     in_0.data
		.in_0_valid     (cc_snoop_valid),                 //   input,   width = 1,         .valid
		.in_0_ready     (cc_snoop_ready),                 //  output,   width = 1,         .ready
		.out_0_data     (),                               //  output,  width = 35,    out_0.data
		.out_0_valid    (),                               //  output,   width = 1,         .valid
		.out_0_ready    ()                                //   input,   width = 1,         .ready
	);

	kernel_system_clk_1x clk_1x (
		.in_clk  (clock_reset_clk),    //   input,  width = 1,  in_clk.clk
		.out_clk (clk_1x_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	kernel_system_clk_2x clk_2x (
		.in_clk  (clock_reset2x_clk),  //   input,  width = 1,  in_clk.clk
		.out_clk (clk_2x_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	kernel_system_clk_snoop clk_snoop (
		.in_clk  (cc_snoop_clk_clk),      //   input,  width = 1,  in_clk.clk
		.out_clk (clk_snoop_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	kernel_system_cnn_sys cnn_sys (
		.clock                                       (clk_1x_out_clk_clk),                                        //   input,    width = 1,                   clock_reset.clk
		.resetn                                      (reset_out_reset_reset),                                     //   input,    width = 1,             clock_reset_reset.reset_n
		.clock2x                                     (clk_2x_out_clk_clk),                                        //   input,    width = 1,                 clock_reset2x.clk
		.kernel_irq                                  (irq_mapper_receiver0_irq),                                  //  output,    width = 1,                    kernel_irq.irq
		.avm_mem_gmem0_DDR_port_0_0_rw_address       (kernel_ddr4a_address),                                      //  output,   width = 33, avm_mem_gmem0_DDR_port_0_0_rw.address
		.avm_mem_gmem0_DDR_port_0_0_rw_byteenable    (kernel_ddr4a_byteenable),                                   //  output,   width = 64,                              .byteenable
		.avm_mem_gmem0_DDR_port_0_0_rw_readdatavalid (kernel_ddr4a_readdatavalid),                                //   input,    width = 1,                              .readdatavalid
		.avm_mem_gmem0_DDR_port_0_0_rw_read          (kernel_ddr4a_read),                                         //  output,    width = 1,                              .read
		.avm_mem_gmem0_DDR_port_0_0_rw_readdata      (kernel_ddr4a_readdata),                                     //   input,  width = 512,                              .readdata
		.avm_mem_gmem0_DDR_port_0_0_rw_write         (kernel_ddr4a_write),                                        //  output,    width = 1,                              .write
		.avm_mem_gmem0_DDR_port_0_0_rw_writedata     (kernel_ddr4a_writedata),                                    //  output,  width = 512,                              .writedata
		.avm_mem_gmem0_DDR_port_0_0_rw_waitrequest   (kernel_ddr4a_waitrequest),                                  //   input,    width = 1,                              .waitrequest
		.avm_mem_gmem0_DDR_port_0_0_rw_burstcount    (kernel_ddr4a_burstcount),                                   //  output,    width = 5,                              .burstcount
		.avm_mem_gmem0_DDR_port_1_0_rw_address       (kernel_ddr4b_address),                                      //  output,   width = 33, avm_mem_gmem0_DDR_port_1_0_rw.address
		.avm_mem_gmem0_DDR_port_1_0_rw_byteenable    (kernel_ddr4b_byteenable),                                   //  output,   width = 64,                              .byteenable
		.avm_mem_gmem0_DDR_port_1_0_rw_readdatavalid (kernel_ddr4b_readdatavalid),                                //   input,    width = 1,                              .readdatavalid
		.avm_mem_gmem0_DDR_port_1_0_rw_read          (kernel_ddr4b_read),                                         //  output,    width = 1,                              .read
		.avm_mem_gmem0_DDR_port_1_0_rw_readdata      (kernel_ddr4b_readdata),                                     //   input,  width = 512,                              .readdata
		.avm_mem_gmem0_DDR_port_1_0_rw_write         (kernel_ddr4b_write),                                        //  output,    width = 1,                              .write
		.avm_mem_gmem0_DDR_port_1_0_rw_writedata     (kernel_ddr4b_writedata),                                    //  output,  width = 512,                              .writedata
		.avm_mem_gmem0_DDR_port_1_0_rw_waitrequest   (kernel_ddr4b_waitrequest),                                  //   input,    width = 1,                              .waitrequest
		.avm_mem_gmem0_DDR_port_1_0_rw_burstcount    (kernel_ddr4b_burstcount),                                   //  output,    width = 5,                              .burstcount
		.avm_mem_gmem0_DDR_port_2_0_rw_address       (kernel_ddr4c_address),                                      //  output,   width = 33, avm_mem_gmem0_DDR_port_2_0_rw.address
		.avm_mem_gmem0_DDR_port_2_0_rw_byteenable    (kernel_ddr4c_byteenable),                                   //  output,   width = 64,                              .byteenable
		.avm_mem_gmem0_DDR_port_2_0_rw_readdatavalid (kernel_ddr4c_readdatavalid),                                //   input,    width = 1,                              .readdatavalid
		.avm_mem_gmem0_DDR_port_2_0_rw_read          (kernel_ddr4c_read),                                         //  output,    width = 1,                              .read
		.avm_mem_gmem0_DDR_port_2_0_rw_readdata      (kernel_ddr4c_readdata),                                     //   input,  width = 512,                              .readdata
		.avm_mem_gmem0_DDR_port_2_0_rw_write         (kernel_ddr4c_write),                                        //  output,    width = 1,                              .write
		.avm_mem_gmem0_DDR_port_2_0_rw_writedata     (kernel_ddr4c_writedata),                                    //  output,  width = 512,                              .writedata
		.avm_mem_gmem0_DDR_port_2_0_rw_waitrequest   (kernel_ddr4c_waitrequest),                                  //   input,    width = 1,                              .waitrequest
		.avm_mem_gmem0_DDR_port_2_0_rw_burstcount    (kernel_ddr4c_burstcount),                                   //  output,    width = 5,                              .burstcount
		.avm_mem_gmem0_DDR_port_3_0_rw_address       (kernel_ddr4d_address),                                      //  output,   width = 33, avm_mem_gmem0_DDR_port_3_0_rw.address
		.avm_mem_gmem0_DDR_port_3_0_rw_byteenable    (kernel_ddr4d_byteenable),                                   //  output,   width = 64,                              .byteenable
		.avm_mem_gmem0_DDR_port_3_0_rw_readdatavalid (kernel_ddr4d_readdatavalid),                                //   input,    width = 1,                              .readdatavalid
		.avm_mem_gmem0_DDR_port_3_0_rw_read          (kernel_ddr4d_read),                                         //  output,    width = 1,                              .read
		.avm_mem_gmem0_DDR_port_3_0_rw_readdata      (kernel_ddr4d_readdata),                                     //   input,  width = 512,                              .readdata
		.avm_mem_gmem0_DDR_port_3_0_rw_write         (kernel_ddr4d_write),                                        //  output,    width = 1,                              .write
		.avm_mem_gmem0_DDR_port_3_0_rw_writedata     (kernel_ddr4d_writedata),                                    //  output,  width = 512,                              .writedata
		.avm_mem_gmem0_DDR_port_3_0_rw_waitrequest   (kernel_ddr4d_waitrequest),                                  //   input,    width = 1,                              .waitrequest
		.avm_mem_gmem0_DDR_port_3_0_rw_burstcount    (kernel_ddr4d_burstcount),                                   //  output,    width = 5,                              .burstcount
		.cra_ring_root_avs_read                      (mm_interconnect_0_cnn_sys_cra_ring_root_avs_read),          //   input,    width = 1,             cra_ring_root_avs.read
		.cra_ring_root_avs_write                     (mm_interconnect_0_cnn_sys_cra_ring_root_avs_write),         //   input,    width = 1,                              .write
		.cra_ring_root_avs_address                   (mm_interconnect_0_cnn_sys_cra_ring_root_avs_address),       //   input,    width = 6,                              .address
		.cra_ring_root_avs_writedata                 (mm_interconnect_0_cnn_sys_cra_ring_root_avs_writedata),     //   input,   width = 64,                              .writedata
		.cra_ring_root_avs_byteenable                (mm_interconnect_0_cnn_sys_cra_ring_root_avs_byteenable),    //   input,    width = 8,                              .byteenable
		.cra_ring_root_avs_readdata                  (mm_interconnect_0_cnn_sys_cra_ring_root_avs_readdata),      //  output,   width = 64,                              .readdata
		.cra_ring_root_avs_waitrequest               (mm_interconnect_0_cnn_sys_cra_ring_root_avs_waitrequest),   //  output,    width = 1,                              .waitrequest
		.cra_ring_root_avs_readdatavalid             (mm_interconnect_0_cnn_sys_cra_ring_root_avs_readdatavalid)  //  output,    width = 1,                              .readdatavalid
	);

	kernel_system_kernel_cra kernel_cra (
		.clk              (clk_1x_out_clk_clk),          //   input,   width = 1,   clk.clk
		.reset            (~reset_out_reset_reset),      //   input,   width = 1, reset.reset
		.s0_waitrequest   (kernel_cra_waitrequest),      //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (kernel_cra_readdata),         //  output,  width = 64,      .readdata
		.s0_readdatavalid (kernel_cra_readdatavalid),    //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (kernel_cra_burstcount),       //   input,   width = 1,      .burstcount
		.s0_writedata     (kernel_cra_writedata),        //   input,  width = 64,      .writedata
		.s0_address       (kernel_cra_address),          //   input,  width = 30,      .address
		.s0_write         (kernel_cra_write),            //   input,   width = 1,      .write
		.s0_read          (kernel_cra_read),             //   input,   width = 1,      .read
		.s0_byteenable    (kernel_cra_byteenable),       //   input,   width = 8,      .byteenable
		.s0_debugaccess   (kernel_cra_debugaccess),      //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (kernel_cra_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (kernel_cra_m0_readdata),      //   input,  width = 64,      .readdata
		.m0_readdatavalid (kernel_cra_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (kernel_cra_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (kernel_cra_m0_writedata),     //  output,  width = 64,      .writedata
		.m0_address       (kernel_cra_m0_address),       //  output,  width = 30,      .address
		.m0_write         (kernel_cra_m0_write),         //  output,   width = 1,      .write
		.m0_read          (kernel_cra_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (kernel_cra_m0_byteenable),    //  output,   width = 8,      .byteenable
		.m0_debugaccess   (kernel_cra_m0_debugaccess)    //  output,   width = 1,      .debugaccess
	);

	kernel_system_kernel_irq kernel_irq (
		.clk          (clk_1x_out_clk_clk),          //   input,  width = 1,          clk.clk
		.receiver_irq (kernel_irq_receiver_irq_irq), //   input,  width = 1, receiver_irq.irq
		.reset        (~reset_out_reset_reset),      //   input,  width = 1,    clk_reset.reset
		.sender0_irq  (kernel_irq_irq)               //  output,  width = 1,  sender0_irq.irq
	);

	kernel_system_reset reset (
		.clk         (clk_1x_out_clk_clk),        //   input,  width = 1,       clk.clk
		.in_reset_n  (clock_reset_reset_reset_n), //   input,  width = 1,  in_reset.reset_n
		.out_reset_n (reset_out_reset_reset)      //  output,  width = 1, out_reset.reset_n
	);

	kernel_system_altera_mm_interconnect_181_sq2k2va mm_interconnect_0 (
		.kernel_cra_m0_address                        (kernel_cra_m0_address),                                     //   input,  width = 30,                          kernel_cra_m0.address
		.kernel_cra_m0_waitrequest                    (kernel_cra_m0_waitrequest),                                 //  output,   width = 1,                                       .waitrequest
		.kernel_cra_m0_burstcount                     (kernel_cra_m0_burstcount),                                  //   input,   width = 1,                                       .burstcount
		.kernel_cra_m0_byteenable                     (kernel_cra_m0_byteenable),                                  //   input,   width = 8,                                       .byteenable
		.kernel_cra_m0_read                           (kernel_cra_m0_read),                                        //   input,   width = 1,                                       .read
		.kernel_cra_m0_readdata                       (kernel_cra_m0_readdata),                                    //  output,  width = 64,                                       .readdata
		.kernel_cra_m0_readdatavalid                  (kernel_cra_m0_readdatavalid),                               //  output,   width = 1,                                       .readdatavalid
		.kernel_cra_m0_write                          (kernel_cra_m0_write),                                       //   input,   width = 1,                                       .write
		.kernel_cra_m0_writedata                      (kernel_cra_m0_writedata),                                   //   input,  width = 64,                                       .writedata
		.kernel_cra_m0_debugaccess                    (kernel_cra_m0_debugaccess),                                 //   input,   width = 1,                                       .debugaccess
		.cnn_sys_cra_ring_root_avs_address            (mm_interconnect_0_cnn_sys_cra_ring_root_avs_address),       //  output,   width = 6,              cnn_sys_cra_ring_root_avs.address
		.cnn_sys_cra_ring_root_avs_write              (mm_interconnect_0_cnn_sys_cra_ring_root_avs_write),         //  output,   width = 1,                                       .write
		.cnn_sys_cra_ring_root_avs_read               (mm_interconnect_0_cnn_sys_cra_ring_root_avs_read),          //  output,   width = 1,                                       .read
		.cnn_sys_cra_ring_root_avs_readdata           (mm_interconnect_0_cnn_sys_cra_ring_root_avs_readdata),      //   input,  width = 64,                                       .readdata
		.cnn_sys_cra_ring_root_avs_writedata          (mm_interconnect_0_cnn_sys_cra_ring_root_avs_writedata),     //  output,  width = 64,                                       .writedata
		.cnn_sys_cra_ring_root_avs_byteenable         (mm_interconnect_0_cnn_sys_cra_ring_root_avs_byteenable),    //  output,   width = 8,                                       .byteenable
		.cnn_sys_cra_ring_root_avs_readdatavalid      (mm_interconnect_0_cnn_sys_cra_ring_root_avs_readdatavalid), //   input,   width = 1,                                       .readdatavalid
		.cnn_sys_cra_ring_root_avs_waitrequest        (mm_interconnect_0_cnn_sys_cra_ring_root_avs_waitrequest),   //   input,   width = 1,                                       .waitrequest
		.kernel_cra_reset_reset_bridge_in_reset_reset (~reset_out_reset_reset),                                    //   input,   width = 1, kernel_cra_reset_reset_bridge_in_reset.reset
		.clk_1x_out_clk_clk                           (clk_1x_out_clk_clk)                                         //   input,   width = 1,                         clk_1x_out_clk.clk
	);

	kernel_system_altera_irq_mapper_181_cmkeqny irq_mapper (
		.clk           (clk_1x_out_clk_clk),          //   input,  width = 1,       clk.clk
		.reset         (~reset_out_reset_reset),      //   input,  width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),    //   input,  width = 1, receiver0.irq
		.sender_irq    (kernel_irq_receiver_irq_irq)  //  output,  width = 1,    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_out_reset_reset),         //   input,  width = 1, reset_in0.reset
		.clk            (clk_snoop_out_clk_clk),          //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

endmodule
