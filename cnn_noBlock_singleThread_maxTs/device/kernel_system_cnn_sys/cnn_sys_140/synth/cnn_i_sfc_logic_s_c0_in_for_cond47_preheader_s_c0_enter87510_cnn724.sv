// ------------------------------------------------------------------------- 
// High Level Design Compiler for Intel(R) FPGAs Version 18.1 (Release Build #277)
// 
// Legal Notice: Copyright 2019 Intel Corporation.  All rights reserved.
// Your use of  Intel Corporation's design tools,  logic functions and other
// software and  tools, and its AMPP partner logic functions, and any output
// files any  of the foregoing (including  device programming  or simulation
// files), and  any associated  documentation  or information  are expressly
// subject  to the terms and  conditions of the  Intel FPGA Software License
// Agreement, Intel MegaCore Function License Agreement, or other applicable
// license agreement,  including,  without limitation,  that your use is for
// the  sole  purpose of  programming  logic devices  manufactured by  Intel
// and  sold by Intel  or its authorized  distributors. Please refer  to the
// applicable agreement for further details.
// ---------------------------------------------------------------------------

// SystemVerilog created from cnn_i_sfc_logic_s_c0_in_for_cond47_preheader_s_c0_enter87510_cnn724
// SystemVerilog created on Thu Jun 25 10:37:45 2020


(* altera_attribute = "-name AUTO_SHIFT_REGISTER_RECOGNITION OFF; -name MESSAGE_DISABLE 10036; -name MESSAGE_DISABLE 10037; -name MESSAGE_DISABLE 14130; -name MESSAGE_DISABLE 14320; -name MESSAGE_DISABLE 15400; -name MESSAGE_DISABLE 14130; -name MESSAGE_DISABLE 10036; -name MESSAGE_DISABLE 12020; -name MESSAGE_DISABLE 12030; -name MESSAGE_DISABLE 12010; -name MESSAGE_DISABLE 12110; -name MESSAGE_DISABLE 14320; -name MESSAGE_DISABLE 13410; -name MESSAGE_DISABLE 113007; -name MESSAGE_DISABLE 10958" *)
module cnn_i_sfc_logic_s_c0_in_for_cond47_preheader_s_c0_enter87510_cnn724 (
    output wire [0:0] out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going_cnn729_exiting_valid_out,
    output wire [0:0] out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going_cnn729_exiting_stall_out,
    input wire [0:0] in_pipeline_stall_in,
    output wire [0:0] out_pipeline_valid_out,
    input wire [63:0] in_input,
    input wire [0:0] in_intel_reserved_ffwd_26_0,
    input wire [0:0] in_intel_reserved_ffwd_27_0,
    input wire [0:0] in_intel_reserved_ffwd_28_0,
    input wire [0:0] in_intel_reserved_ffwd_29_0,
    input wire [0:0] in_intel_reserved_ffwd_30_0,
    input wire [0:0] in_intel_reserved_ffwd_31_0,
    input wire [0:0] in_intel_reserved_ffwd_32_0,
    input wire [0:0] in_intel_reserved_ffwd_33_0,
    input wire [0:0] in_intel_reserved_ffwd_34_0,
    input wire [0:0] in_intel_reserved_ffwd_35_0,
    input wire [0:0] in_intel_reserved_ffwd_36_0,
    input wire [0:0] in_intel_reserved_ffwd_37_0,
    input wire [0:0] in_intel_reserved_ffwd_38_0,
    input wire [0:0] in_intel_reserved_ffwd_39_0,
    input wire [0:0] in_intel_reserved_ffwd_40_0,
    input wire [0:0] in_intel_reserved_ffwd_41_0,
    input wire [0:0] in_intel_reserved_ffwd_42_0,
    input wire [0:0] in_intel_reserved_ffwd_43_0,
    input wire [0:0] in_intel_reserved_ffwd_44_0,
    input wire [0:0] in_intel_reserved_ffwd_45_0,
    input wire [0:0] in_intel_reserved_ffwd_46_0,
    input wire [0:0] in_intel_reserved_ffwd_47_0,
    input wire [0:0] in_intel_reserved_ffwd_48_0,
    input wire [0:0] in_intel_reserved_ffwd_49_0,
    input wire [0:0] in_intel_reserved_ffwd_50_0,
    input wire [0:0] in_intel_reserved_ffwd_51_0,
    input wire [0:0] in_intel_reserved_ffwd_52_0,
    input wire [0:0] in_intel_reserved_ffwd_53_0,
    input wire [0:0] in_intel_reserved_ffwd_54_0,
    input wire [0:0] in_intel_reserved_ffwd_55_0,
    input wire [0:0] in_intel_reserved_ffwd_56_0,
    input wire [0:0] in_intel_reserved_ffwd_57_0,
    input wire [0:0] in_intel_reserved_ffwd_58_0,
    input wire [0:0] in_intel_reserved_ffwd_59_0,
    input wire [0:0] in_intel_reserved_ffwd_60_0,
    input wire [0:0] in_intel_reserved_ffwd_61_0,
    input wire [0:0] in_intel_reserved_ffwd_62_0,
    input wire [0:0] in_intel_reserved_ffwd_63_0,
    input wire [0:0] in_intel_reserved_ffwd_64_0,
    input wire [0:0] in_intel_reserved_ffwd_65_0,
    input wire [0:0] in_intel_reserved_ffwd_66_0,
    input wire [0:0] in_intel_reserved_ffwd_67_0,
    input wire [0:0] in_intel_reserved_ffwd_68_0,
    input wire [0:0] in_intel_reserved_ffwd_69_0,
    input wire [0:0] in_intel_reserved_ffwd_70_0,
    input wire [0:0] in_intel_reserved_ffwd_71_0,
    input wire [0:0] in_intel_reserved_ffwd_72_0,
    input wire [0:0] in_intel_reserved_ffwd_73_0,
    input wire [0:0] in_intel_reserved_ffwd_74_0,
    input wire [0:0] in_intel_reserved_ffwd_75_0,
    input wire [0:0] in_intel_reserved_ffwd_76_0,
    input wire [0:0] in_intel_reserved_ffwd_77_0,
    input wire [0:0] in_intel_reserved_ffwd_78_0,
    input wire [0:0] in_intel_reserved_ffwd_79_0,
    input wire [0:0] in_intel_reserved_ffwd_80_0,
    input wire [0:0] in_intel_reserved_ffwd_81_0,
    input wire [0:0] in_intel_reserved_ffwd_82_0,
    input wire [0:0] in_intel_reserved_ffwd_83_0,
    input wire [0:0] in_intel_reserved_ffwd_84_0,
    input wire [0:0] in_intel_reserved_ffwd_85_0,
    input wire [0:0] in_intel_reserved_ffwd_86_0,
    input wire [0:0] in_intel_reserved_ffwd_87_0,
    input wire [0:0] in_intel_reserved_ffwd_88_0,
    input wire [0:0] in_intel_reserved_ffwd_89_0,
    input wire [0:0] in_intel_reserved_ffwd_90_0,
    input wire [0:0] in_intel_reserved_ffwd_91_0,
    input wire [0:0] in_c0_eni12_0,
    input wire [63:0] in_c0_eni12_1,
    input wire [0:0] in_c0_eni12_2,
    input wire [63:0] in_c0_eni12_3,
    input wire [63:0] in_c0_eni12_4,
    input wire [63:0] in_c0_eni12_5,
    input wire [63:0] in_c0_eni12_6,
    input wire [63:0] in_c0_eni12_7,
    input wire [63:0] in_c0_eni12_8,
    input wire [0:0] in_c0_eni12_9,
    input wire [0:0] in_c0_eni12_10,
    input wire [63:0] in_c0_eni12_11,
    input wire [0:0] in_c0_eni12_12,
    input wire [0:0] in_i_valid,
    output wire [0:0] out_c0_exi142_0,
    output wire [63:0] out_c0_exi142_1,
    output wire [63:0] out_c0_exi142_2,
    output wire [0:0] out_c0_exi142_3,
    output wire [63:0] out_c0_exi142_4,
    output wire [63:0] out_c0_exi142_5,
    output wire [0:0] out_c0_exi142_6,
    output wire [63:0] out_c0_exi142_7,
    output wire [0:0] out_c0_exi142_8,
    output wire [63:0] out_c0_exi142_9,
    output wire [0:0] out_c0_exi142_10,
    output wire [63:0] out_c0_exi142_11,
    output wire [0:0] out_c0_exi142_12,
    output wire [63:0] out_c0_exi142_13,
    output wire [0:0] out_c0_exi142_14,
    output wire [63:0] out_c0_exi142_15,
    output wire [0:0] out_c0_exi142_16,
    output wire [63:0] out_c0_exi142_17,
    output wire [0:0] out_c0_exi142_18,
    output wire [63:0] out_c0_exi142_19,
    output wire [0:0] out_c0_exi142_20,
    output wire [63:0] out_c0_exi142_21,
    output wire [0:0] out_c0_exi142_22,
    output wire [63:0] out_c0_exi142_23,
    output wire [0:0] out_c0_exi142_24,
    output wire [63:0] out_c0_exi142_25,
    output wire [0:0] out_c0_exi142_26,
    output wire [63:0] out_c0_exi142_27,
    output wire [0:0] out_c0_exi142_28,
    output wire [63:0] out_c0_exi142_29,
    output wire [0:0] out_c0_exi142_30,
    output wire [63:0] out_c0_exi142_31,
    output wire [0:0] out_c0_exi142_32,
    output wire [63:0] out_c0_exi142_33,
    output wire [0:0] out_c0_exi142_34,
    output wire [63:0] out_c0_exi142_35,
    output wire [0:0] out_c0_exi142_36,
    output wire [63:0] out_c0_exi142_37,
    output wire [0:0] out_c0_exi142_38,
    output wire [63:0] out_c0_exi142_39,
    output wire [0:0] out_c0_exi142_40,
    output wire [63:0] out_c0_exi142_41,
    output wire [0:0] out_c0_exi142_42,
    output wire [63:0] out_c0_exi142_43,
    output wire [0:0] out_c0_exi142_44,
    output wire [63:0] out_c0_exi142_45,
    output wire [0:0] out_c0_exi142_46,
    output wire [63:0] out_c0_exi142_47,
    output wire [0:0] out_c0_exi142_48,
    output wire [63:0] out_c0_exi142_49,
    output wire [0:0] out_c0_exi142_50,
    output wire [63:0] out_c0_exi142_51,
    output wire [0:0] out_c0_exi142_52,
    output wire [63:0] out_c0_exi142_53,
    output wire [0:0] out_c0_exi142_54,
    output wire [63:0] out_c0_exi142_55,
    output wire [0:0] out_c0_exi142_56,
    output wire [63:0] out_c0_exi142_57,
    output wire [0:0] out_c0_exi142_58,
    output wire [63:0] out_c0_exi142_59,
    output wire [0:0] out_c0_exi142_60,
    output wire [63:0] out_c0_exi142_61,
    output wire [0:0] out_c0_exi142_62,
    output wire [63:0] out_c0_exi142_63,
    output wire [0:0] out_c0_exi142_64,
    output wire [63:0] out_c0_exi142_65,
    output wire [0:0] out_c0_exi142_66,
    output wire [63:0] out_c0_exi142_67,
    output wire [0:0] out_c0_exi142_68,
    output wire [63:0] out_c0_exi142_69,
    output wire [0:0] out_c0_exi142_70,
    output wire [63:0] out_c0_exi142_71,
    output wire [0:0] out_c0_exi142_72,
    output wire [63:0] out_c0_exi142_73,
    output wire [0:0] out_c0_exi142_74,
    output wire [63:0] out_c0_exi142_75,
    output wire [0:0] out_c0_exi142_76,
    output wire [63:0] out_c0_exi142_77,
    output wire [0:0] out_c0_exi142_78,
    output wire [63:0] out_c0_exi142_79,
    output wire [0:0] out_c0_exi142_80,
    output wire [63:0] out_c0_exi142_81,
    output wire [0:0] out_c0_exi142_82,
    output wire [63:0] out_c0_exi142_83,
    output wire [0:0] out_c0_exi142_84,
    output wire [63:0] out_c0_exi142_85,
    output wire [0:0] out_c0_exi142_86,
    output wire [63:0] out_c0_exi142_87,
    output wire [0:0] out_c0_exi142_88,
    output wire [63:0] out_c0_exi142_89,
    output wire [0:0] out_c0_exi142_90,
    output wire [63:0] out_c0_exi142_91,
    output wire [0:0] out_c0_exi142_92,
    output wire [63:0] out_c0_exi142_93,
    output wire [0:0] out_c0_exi142_94,
    output wire [63:0] out_c0_exi142_95,
    output wire [0:0] out_c0_exi142_96,
    output wire [63:0] out_c0_exi142_97,
    output wire [0:0] out_c0_exi142_98,
    output wire [63:0] out_c0_exi142_99,
    output wire [0:0] out_c0_exi142_100,
    output wire [63:0] out_c0_exi142_101,
    output wire [0:0] out_c0_exi142_102,
    output wire [63:0] out_c0_exi142_103,
    output wire [0:0] out_c0_exi142_104,
    output wire [63:0] out_c0_exi142_105,
    output wire [0:0] out_c0_exi142_106,
    output wire [63:0] out_c0_exi142_107,
    output wire [0:0] out_c0_exi142_108,
    output wire [63:0] out_c0_exi142_109,
    output wire [0:0] out_c0_exi142_110,
    output wire [63:0] out_c0_exi142_111,
    output wire [0:0] out_c0_exi142_112,
    output wire [63:0] out_c0_exi142_113,
    output wire [0:0] out_c0_exi142_114,
    output wire [63:0] out_c0_exi142_115,
    output wire [0:0] out_c0_exi142_116,
    output wire [63:0] out_c0_exi142_117,
    output wire [0:0] out_c0_exi142_118,
    output wire [63:0] out_c0_exi142_119,
    output wire [0:0] out_c0_exi142_120,
    output wire [63:0] out_c0_exi142_121,
    output wire [0:0] out_c0_exi142_122,
    output wire [63:0] out_c0_exi142_123,
    output wire [0:0] out_c0_exi142_124,
    output wire [63:0] out_c0_exi142_125,
    output wire [0:0] out_c0_exi142_126,
    output wire [63:0] out_c0_exi142_127,
    output wire [0:0] out_c0_exi142_128,
    output wire [63:0] out_c0_exi142_129,
    output wire [0:0] out_c0_exi142_130,
    output wire [63:0] out_c0_exi142_131,
    output wire [0:0] out_c0_exi142_132,
    output wire [0:0] out_c0_exi142_133,
    output wire [0:0] out_c0_exi142_134,
    output wire [63:0] out_c0_exi142_135,
    output wire [63:0] out_c0_exi142_136,
    output wire [63:0] out_c0_exi142_137,
    output wire [0:0] out_c0_exi142_138,
    output wire [0:0] out_c0_exi142_139,
    output wire [63:0] out_c0_exi142_140,
    output wire [0:0] out_c0_exi142_141,
    output wire [0:0] out_c0_exi142_142,
    output wire [0:0] out_o_valid,
    output wire [0:0] out_unnamed_cnn8,
    input wire clock,
    input wire resetn
    );

    wire [0:0] GND_q;
    wire [0:0] VCC_q;
    wire [3:0] c_i4_1gr_q;
    wire [3:0] c_i4_6gr_q;
    wire [63:0] c_i64_0gr_q;
    wire [63:0] c_i64_10_q;
    wire [63:0] c_i64_11_q;
    wire [63:0] c_i64_12_q;
    wire [63:0] c_i64_13_q;
    wire [63:0] c_i64_14_q;
    wire [63:0] c_i64_15_q;
    wire [63:0] c_i64_16_q;
    wire [63:0] c_i64_19_q;
    wire [63:0] c_i64_1gr_q;
    wire [63:0] c_i64_2gr_q;
    wire [63:0] c_i64_38_q;
    wire [63:0] c_i64_3gr_q;
    wire [63:0] c_i64_4gr_q;
    wire [63:0] c_i64_57_q;
    wire [63:0] c_i64_5gr_q;
    wire [63:0] c_i64_6gr_q;
    wire [63:0] c_i64_7gr_q;
    wire [63:0] c_i64_8gr_q;
    wire [63:0] c_i64_9gr_q;
    wire [1:0] i_add_ptr66_10_cnn1160_vt_const_1_q;
    wire [63:0] i_add_ptr66_10_cnn1160_vt_join_q;
    wire [61:0] i_add_ptr66_10_cnn1160_vt_select_63_b;
    wire [3:0] i_add_ptr66_11_cnn1199_vt_const_3_q;
    wire [63:0] i_add_ptr66_11_cnn1199_vt_join_q;
    wire [59:0] i_add_ptr66_11_cnn1199_vt_select_63_b;
    wire [63:0] i_add_ptr66_12_cnn1238_vt_join_q;
    wire [61:0] i_add_ptr66_12_cnn1238_vt_select_63_b;
    wire [2:0] i_add_ptr66_13_cnn1277_vt_const_2_q;
    wire [63:0] i_add_ptr66_13_cnn1277_vt_join_q;
    wire [60:0] i_add_ptr66_13_cnn1277_vt_select_63_b;
    wire [63:0] i_add_ptr66_14_cnn1316_vt_join_q;
    wire [61:0] i_add_ptr66_14_cnn1316_vt_select_63_b;
    wire [5:0] i_add_ptr66_15_cnn1355_vt_const_5_q;
    wire [63:0] i_add_ptr66_15_cnn1355_vt_join_q;
    wire [57:0] i_add_ptr66_15_cnn1355_vt_select_63_b;
    wire [63:0] i_add_ptr66_1_cnn809_vt_join_q;
    wire [60:0] i_add_ptr66_1_cnn809_vt_select_63_b;
    wire [63:0] i_add_ptr66_2_cnn848_vt_join_q;
    wire [61:0] i_add_ptr66_2_cnn848_vt_select_63_b;
    wire [63:0] i_add_ptr66_3_cnn887_vt_join_q;
    wire [59:0] i_add_ptr66_3_cnn887_vt_select_63_b;
    wire [63:0] i_add_ptr66_4_cnn926_vt_join_q;
    wire [61:0] i_add_ptr66_4_cnn926_vt_select_63_b;
    wire [63:0] i_add_ptr66_5_cnn965_vt_join_q;
    wire [60:0] i_add_ptr66_5_cnn965_vt_select_63_b;
    wire [63:0] i_add_ptr66_6_cnn1004_vt_join_q;
    wire [61:0] i_add_ptr66_6_cnn1004_vt_select_63_b;
    wire [4:0] i_add_ptr66_7_cnn1043_vt_const_4_q;
    wire [63:0] i_add_ptr66_7_cnn1043_vt_join_q;
    wire [58:0] i_add_ptr66_7_cnn1043_vt_select_63_b;
    wire [63:0] i_add_ptr66_8_cnn1082_vt_join_q;
    wire [61:0] i_add_ptr66_8_cnn1082_vt_select_63_b;
    wire [63:0] i_add_ptr66_9_cnn1121_vt_join_q;
    wire [60:0] i_add_ptr66_9_cnn1121_vt_select_63_b;
    wire [63:0] i_add_ptr66_cnn763_vt_join_q;
    wire [61:0] i_add_ptr66_cnn763_vt_select_63_b;
    wire [63:0] i_add_ptr70_10_cnn1162_vt_join_q;
    wire [61:0] i_add_ptr70_10_cnn1162_vt_select_63_b;
    wire [63:0] i_add_ptr70_11_cnn1201_vt_join_q;
    wire [61:0] i_add_ptr70_11_cnn1201_vt_select_63_b;
    wire [63:0] i_add_ptr70_12_cnn1240_vt_join_q;
    wire [61:0] i_add_ptr70_12_cnn1240_vt_select_63_b;
    wire [63:0] i_add_ptr70_13_cnn1279_vt_join_q;
    wire [61:0] i_add_ptr70_13_cnn1279_vt_select_63_b;
    wire [63:0] i_add_ptr70_14_cnn1318_vt_join_q;
    wire [61:0] i_add_ptr70_14_cnn1318_vt_select_63_b;
    wire [63:0] i_add_ptr70_15_cnn1357_vt_join_q;
    wire [61:0] i_add_ptr70_15_cnn1357_vt_select_63_b;
    wire [63:0] i_add_ptr70_173_cnn811_vt_join_q;
    wire [61:0] i_add_ptr70_173_cnn811_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_10_cnn1170_vt_join_q;
    wire [61:0] i_add_ptr70_1_10_cnn1170_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_11_cnn1209_vt_join_q;
    wire [61:0] i_add_ptr70_1_11_cnn1209_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_12_cnn1248_vt_join_q;
    wire [61:0] i_add_ptr70_1_12_cnn1248_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_13_cnn1287_vt_join_q;
    wire [61:0] i_add_ptr70_1_13_cnn1287_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_14_cnn1326_vt_join_q;
    wire [61:0] i_add_ptr70_1_14_cnn1326_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_15_cnn1365_vt_join_q;
    wire [61:0] i_add_ptr70_1_15_cnn1365_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_1_cnn819_vt_join_q;
    wire [61:0] i_add_ptr70_1_1_cnn819_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_2_cnn858_vt_join_q;
    wire [61:0] i_add_ptr70_1_2_cnn858_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_3_cnn897_vt_join_q;
    wire [61:0] i_add_ptr70_1_3_cnn897_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_4_cnn936_vt_join_q;
    wire [61:0] i_add_ptr70_1_4_cnn936_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_5_cnn975_vt_join_q;
    wire [61:0] i_add_ptr70_1_5_cnn975_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_6_cnn1014_vt_join_q;
    wire [61:0] i_add_ptr70_1_6_cnn1014_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_7_cnn1053_vt_join_q;
    wire [61:0] i_add_ptr70_1_7_cnn1053_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_8_cnn1092_vt_join_q;
    wire [61:0] i_add_ptr70_1_8_cnn1092_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_9_cnn1131_vt_join_q;
    wire [61:0] i_add_ptr70_1_9_cnn1131_vt_select_63_b;
    wire [63:0] i_add_ptr70_1_cnn780_vt_join_q;
    wire [61:0] i_add_ptr70_1_cnn780_vt_select_63_b;
    wire [63:0] i_add_ptr70_286_cnn850_vt_join_q;
    wire [61:0] i_add_ptr70_286_cnn850_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_10_cnn1178_vt_join_q;
    wire [61:0] i_add_ptr70_2_10_cnn1178_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_11_cnn1217_vt_join_q;
    wire [61:0] i_add_ptr70_2_11_cnn1217_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_12_cnn1256_vt_join_q;
    wire [61:0] i_add_ptr70_2_12_cnn1256_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_13_cnn1295_vt_join_q;
    wire [61:0] i_add_ptr70_2_13_cnn1295_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_14_cnn1334_vt_join_q;
    wire [61:0] i_add_ptr70_2_14_cnn1334_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_15_cnn1373_vt_join_q;
    wire [61:0] i_add_ptr70_2_15_cnn1373_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_1_cnn827_vt_join_q;
    wire [61:0] i_add_ptr70_2_1_cnn827_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_2_cnn866_vt_join_q;
    wire [61:0] i_add_ptr70_2_2_cnn866_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_3_cnn905_vt_join_q;
    wire [61:0] i_add_ptr70_2_3_cnn905_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_4_cnn944_vt_join_q;
    wire [61:0] i_add_ptr70_2_4_cnn944_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_5_cnn983_vt_join_q;
    wire [61:0] i_add_ptr70_2_5_cnn983_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_6_cnn1022_vt_join_q;
    wire [61:0] i_add_ptr70_2_6_cnn1022_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_7_cnn1061_vt_join_q;
    wire [61:0] i_add_ptr70_2_7_cnn1061_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_8_cnn1100_vt_join_q;
    wire [61:0] i_add_ptr70_2_8_cnn1100_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_9_cnn1139_vt_join_q;
    wire [61:0] i_add_ptr70_2_9_cnn1139_vt_select_63_b;
    wire [63:0] i_add_ptr70_2_cnn788_vt_join_q;
    wire [61:0] i_add_ptr70_2_cnn788_vt_select_63_b;
    wire [63:0] i_add_ptr70_399_cnn889_vt_join_q;
    wire [61:0] i_add_ptr70_399_cnn889_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_10_cnn1186_vt_join_q;
    wire [61:0] i_add_ptr70_3_10_cnn1186_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_11_cnn1225_vt_join_q;
    wire [61:0] i_add_ptr70_3_11_cnn1225_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_12_cnn1264_vt_join_q;
    wire [61:0] i_add_ptr70_3_12_cnn1264_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_13_cnn1303_vt_join_q;
    wire [61:0] i_add_ptr70_3_13_cnn1303_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_14_cnn1342_vt_join_q;
    wire [61:0] i_add_ptr70_3_14_cnn1342_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_15_cnn1381_vt_join_q;
    wire [61:0] i_add_ptr70_3_15_cnn1381_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_1_cnn835_vt_join_q;
    wire [61:0] i_add_ptr70_3_1_cnn835_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_2_cnn874_vt_join_q;
    wire [61:0] i_add_ptr70_3_2_cnn874_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_3_cnn913_vt_join_q;
    wire [61:0] i_add_ptr70_3_3_cnn913_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_4_cnn952_vt_join_q;
    wire [61:0] i_add_ptr70_3_4_cnn952_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_5_cnn991_vt_join_q;
    wire [61:0] i_add_ptr70_3_5_cnn991_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_6_cnn1030_vt_join_q;
    wire [61:0] i_add_ptr70_3_6_cnn1030_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_7_cnn1069_vt_join_q;
    wire [61:0] i_add_ptr70_3_7_cnn1069_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_8_cnn1108_vt_join_q;
    wire [61:0] i_add_ptr70_3_8_cnn1108_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_9_cnn1147_vt_join_q;
    wire [61:0] i_add_ptr70_3_9_cnn1147_vt_select_63_b;
    wire [63:0] i_add_ptr70_3_cnn796_vt_join_q;
    wire [61:0] i_add_ptr70_3_cnn796_vt_select_63_b;
    wire [63:0] i_add_ptr70_4_cnn928_vt_join_q;
    wire [61:0] i_add_ptr70_4_cnn928_vt_select_63_b;
    wire [63:0] i_add_ptr70_5_cnn967_vt_join_q;
    wire [61:0] i_add_ptr70_5_cnn967_vt_select_63_b;
    wire [63:0] i_add_ptr70_6_cnn1006_vt_join_q;
    wire [61:0] i_add_ptr70_6_cnn1006_vt_select_63_b;
    wire [63:0] i_add_ptr70_7_cnn1045_vt_join_q;
    wire [61:0] i_add_ptr70_7_cnn1045_vt_select_63_b;
    wire [63:0] i_add_ptr70_8_cnn1084_vt_join_q;
    wire [61:0] i_add_ptr70_8_cnn1084_vt_select_63_b;
    wire [63:0] i_add_ptr70_9_cnn1123_vt_join_q;
    wire [61:0] i_add_ptr70_9_cnn1123_vt_select_63_b;
    wire [63:0] i_add_ptr70_cnn765_vt_join_q;
    wire [61:0] i_add_ptr70_cnn765_vt_select_63_b;
    wire [63:0] i_add_ptr73_10_cnn1164_vt_join_q;
    wire [61:0] i_add_ptr73_10_cnn1164_vt_select_63_b;
    wire [63:0] i_add_ptr73_11_cnn1203_vt_join_q;
    wire [61:0] i_add_ptr73_11_cnn1203_vt_select_63_b;
    wire [63:0] i_add_ptr73_12_cnn1242_vt_join_q;
    wire [61:0] i_add_ptr73_12_cnn1242_vt_select_63_b;
    wire [63:0] i_add_ptr73_13_cnn1281_vt_join_q;
    wire [61:0] i_add_ptr73_13_cnn1281_vt_select_63_b;
    wire [63:0] i_add_ptr73_14_cnn1320_vt_join_q;
    wire [61:0] i_add_ptr73_14_cnn1320_vt_select_63_b;
    wire [63:0] i_add_ptr73_15_cnn1359_vt_join_q;
    wire [61:0] i_add_ptr73_15_cnn1359_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_10_cnn1172_vt_join_q;
    wire [61:0] i_add_ptr73_169_10_cnn1172_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_11_cnn1211_vt_join_q;
    wire [61:0] i_add_ptr73_169_11_cnn1211_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_12_cnn1250_vt_join_q;
    wire [61:0] i_add_ptr73_169_12_cnn1250_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_13_cnn1289_vt_join_q;
    wire [61:0] i_add_ptr73_169_13_cnn1289_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_14_cnn1328_vt_join_q;
    wire [61:0] i_add_ptr73_169_14_cnn1328_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_15_cnn1367_vt_join_q;
    wire [61:0] i_add_ptr73_169_15_cnn1367_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_1_cnn821_vt_join_q;
    wire [61:0] i_add_ptr73_169_1_cnn821_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_2_cnn860_vt_join_q;
    wire [61:0] i_add_ptr73_169_2_cnn860_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_3_cnn899_vt_join_q;
    wire [61:0] i_add_ptr73_169_3_cnn899_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_4_cnn938_vt_join_q;
    wire [61:0] i_add_ptr73_169_4_cnn938_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_5_cnn977_vt_join_q;
    wire [61:0] i_add_ptr73_169_5_cnn977_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_6_cnn1016_vt_join_q;
    wire [61:0] i_add_ptr73_169_6_cnn1016_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_7_cnn1055_vt_join_q;
    wire [61:0] i_add_ptr73_169_7_cnn1055_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_8_cnn1094_vt_join_q;
    wire [61:0] i_add_ptr73_169_8_cnn1094_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_9_cnn1133_vt_join_q;
    wire [61:0] i_add_ptr73_169_9_cnn1133_vt_select_63_b;
    wire [63:0] i_add_ptr73_169_cnn782_vt_join_q;
    wire [61:0] i_add_ptr73_169_cnn782_vt_select_63_b;
    wire [63:0] i_add_ptr73_174_cnn813_vt_join_q;
    wire [61:0] i_add_ptr73_174_cnn813_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_10_cnn1180_vt_join_q;
    wire [61:0] i_add_ptr73_270_10_cnn1180_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_11_cnn1219_vt_join_q;
    wire [61:0] i_add_ptr73_270_11_cnn1219_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_12_cnn1258_vt_join_q;
    wire [61:0] i_add_ptr73_270_12_cnn1258_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_13_cnn1297_vt_join_q;
    wire [61:0] i_add_ptr73_270_13_cnn1297_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_14_cnn1336_vt_join_q;
    wire [61:0] i_add_ptr73_270_14_cnn1336_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_15_cnn1375_vt_join_q;
    wire [61:0] i_add_ptr73_270_15_cnn1375_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_1_cnn829_vt_join_q;
    wire [61:0] i_add_ptr73_270_1_cnn829_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_2_cnn868_vt_join_q;
    wire [61:0] i_add_ptr73_270_2_cnn868_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_3_cnn907_vt_join_q;
    wire [61:0] i_add_ptr73_270_3_cnn907_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_4_cnn946_vt_join_q;
    wire [61:0] i_add_ptr73_270_4_cnn946_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_5_cnn985_vt_join_q;
    wire [61:0] i_add_ptr73_270_5_cnn985_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_6_cnn1024_vt_join_q;
    wire [61:0] i_add_ptr73_270_6_cnn1024_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_7_cnn1063_vt_join_q;
    wire [61:0] i_add_ptr73_270_7_cnn1063_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_8_cnn1102_vt_join_q;
    wire [61:0] i_add_ptr73_270_8_cnn1102_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_9_cnn1141_vt_join_q;
    wire [61:0] i_add_ptr73_270_9_cnn1141_vt_select_63_b;
    wire [63:0] i_add_ptr73_270_cnn790_vt_join_q;
    wire [61:0] i_add_ptr73_270_cnn790_vt_select_63_b;
    wire [63:0] i_add_ptr73_287_cnn852_vt_join_q;
    wire [61:0] i_add_ptr73_287_cnn852_vt_select_63_b;
    wire [63:0] i_add_ptr73_3100_cnn891_vt_join_q;
    wire [61:0] i_add_ptr73_3100_cnn891_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_10_cnn1188_vt_join_q;
    wire [61:0] i_add_ptr73_371_10_cnn1188_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_11_cnn1227_vt_join_q;
    wire [61:0] i_add_ptr73_371_11_cnn1227_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_12_cnn1266_vt_join_q;
    wire [61:0] i_add_ptr73_371_12_cnn1266_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_13_cnn1305_vt_join_q;
    wire [61:0] i_add_ptr73_371_13_cnn1305_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_14_cnn1344_vt_join_q;
    wire [61:0] i_add_ptr73_371_14_cnn1344_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_15_cnn1383_vt_join_q;
    wire [61:0] i_add_ptr73_371_15_cnn1383_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_1_cnn837_vt_join_q;
    wire [61:0] i_add_ptr73_371_1_cnn837_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_2_cnn876_vt_join_q;
    wire [61:0] i_add_ptr73_371_2_cnn876_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_3_cnn915_vt_join_q;
    wire [61:0] i_add_ptr73_371_3_cnn915_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_4_cnn954_vt_join_q;
    wire [61:0] i_add_ptr73_371_4_cnn954_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_5_cnn993_vt_join_q;
    wire [61:0] i_add_ptr73_371_5_cnn993_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_6_cnn1032_vt_join_q;
    wire [61:0] i_add_ptr73_371_6_cnn1032_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_7_cnn1071_vt_join_q;
    wire [61:0] i_add_ptr73_371_7_cnn1071_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_8_cnn1110_vt_join_q;
    wire [61:0] i_add_ptr73_371_8_cnn1110_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_9_cnn1149_vt_join_q;
    wire [61:0] i_add_ptr73_371_9_cnn1149_vt_select_63_b;
    wire [63:0] i_add_ptr73_371_cnn798_vt_join_q;
    wire [61:0] i_add_ptr73_371_cnn798_vt_select_63_b;
    wire [63:0] i_add_ptr73_4_cnn930_vt_join_q;
    wire [61:0] i_add_ptr73_4_cnn930_vt_select_63_b;
    wire [63:0] i_add_ptr73_5_cnn969_vt_join_q;
    wire [61:0] i_add_ptr73_5_cnn969_vt_select_63_b;
    wire [63:0] i_add_ptr73_6_cnn1008_vt_join_q;
    wire [61:0] i_add_ptr73_6_cnn1008_vt_select_63_b;
    wire [63:0] i_add_ptr73_7_cnn1047_vt_join_q;
    wire [61:0] i_add_ptr73_7_cnn1047_vt_select_63_b;
    wire [63:0] i_add_ptr73_8_cnn1086_vt_join_q;
    wire [61:0] i_add_ptr73_8_cnn1086_vt_select_63_b;
    wire [63:0] i_add_ptr73_9_cnn1125_vt_join_q;
    wire [61:0] i_add_ptr73_9_cnn1125_vt_select_63_b;
    wire [63:0] i_add_ptr73_cnn774_vt_join_q;
    wire [61:0] i_add_ptr73_cnn774_vt_select_63_b;
    wire [4:0] i_fpgaindvars_iv_next_cnn1395_a;
    wire [4:0] i_fpgaindvars_iv_next_cnn1395_b;
    logic [4:0] i_fpgaindvars_iv_next_cnn1395_o;
    wire [4:0] i_fpgaindvars_iv_next_cnn1395_q;
    wire [63:0] i_inc79_10_cnn1194_q;
    wire [1:0] i_inc79_10_cnn1194_vt_const_1_q;
    wire [63:0] i_inc79_10_cnn1194_vt_join_q;
    wire [63:0] i_inc79_11_cnn1233_q;
    wire [63:0] i_inc79_11_cnn1233_vt_join_q;
    wire [63:0] i_inc79_12_cnn1272_q;
    wire [63:0] i_inc79_12_cnn1272_vt_join_q;
    wire [63:0] i_inc79_13_cnn1311_q;
    wire [2:0] i_inc79_13_cnn1311_vt_const_3_q;
    wire [63:0] i_inc79_13_cnn1311_vt_join_q;
    wire [63:0] i_inc79_14_cnn1350_q;
    wire [63:0] i_inc79_14_cnn1350_vt_join_q;
    wire [59:0] i_inc79_14_cnn1350_vt_select_63_b;
    wire [64:0] i_inc79_15_cnn1389_a;
    wire [64:0] i_inc79_15_cnn1389_b;
    logic [64:0] i_inc79_15_cnn1389_o;
    wire [64:0] i_inc79_15_cnn1389_q;
    wire [63:0] i_inc79_1_cnn843_q;
    wire [63:0] i_inc79_1_cnn843_vt_join_q;
    wire [63:0] i_inc79_2_cnn882_q;
    wire [63:0] i_inc79_2_cnn882_vt_join_q;
    wire [61:0] i_inc79_2_cnn882_vt_select_63_b;
    wire [63:0] i_inc79_3_cnn921_q;
    wire [63:0] i_inc79_3_cnn921_vt_join_q;
    wire [63:0] i_inc79_4_cnn960_q;
    wire [63:0] i_inc79_4_cnn960_vt_join_q;
    wire [63:0] i_inc79_5_cnn999_q;
    wire [63:0] i_inc79_5_cnn999_vt_join_q;
    wire [63:0] i_inc79_6_cnn1038_q;
    wire [63:0] i_inc79_6_cnn1038_vt_join_q;
    wire [60:0] i_inc79_6_cnn1038_vt_select_63_b;
    wire [63:0] i_inc79_7_cnn1077_q;
    wire [63:0] i_inc79_7_cnn1077_vt_join_q;
    wire [63:0] i_inc79_8_cnn1116_q;
    wire [63:0] i_inc79_8_cnn1116_vt_join_q;
    wire [63:0] i_inc79_9_cnn1155_q;
    wire [63:0] i_inc79_9_cnn1155_vt_join_q;
    wire [63:0] i_inc79_cnn804_q;
    wire [63:0] i_inc79_cnn804_vt_join_q;
    wire [62:0] i_inc79_cnn804_vt_select_63_b;
    (* preserve_syn_only *) reg [0:0] i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor941_cnn727_q;
    (* preserve_syn_only *) reg [0:0] i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q;
    (* preserve_syn_only *) reg [0:0] i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q;
    (* preserve_syn_only *) reg [0:0] i_llvm_fpga_fanout_i1_fanout_adaptor943_cnn1400_q;
    (* preserve_syn_only *) reg [63:0] i_llvm_fpga_fanout_i64_mul69_1_fanout_adaptor_cnn744_q;
    (* preserve_syn_only *) reg [63:0] i_llvm_fpga_fanout_i64_mul69_2_fanout_adaptor_cnn746_q;
    (* preserve_syn_only *) reg [63:0] i_llvm_fpga_fanout_i64_mul69_3_fanout_adaptor_cnn748_q;
    (* preserve_syn_only *) reg [63:0] i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn108_cnn768_out_dest_data_out_27_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn109_cnn777_out_dest_data_out_28_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn110_cnn785_out_dest_data_out_29_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn111_cnn793_out_dest_data_out_30_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn112_cnn801_out_dest_data_out_31_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn113_cnn816_out_dest_data_out_32_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn114_cnn824_out_dest_data_out_33_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn115_cnn832_out_dest_data_out_34_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn116_cnn840_out_dest_data_out_35_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn117_cnn855_out_dest_data_out_36_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn118_cnn863_out_dest_data_out_37_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn119_cnn871_out_dest_data_out_38_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn120_cnn879_out_dest_data_out_39_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn121_cnn894_out_dest_data_out_40_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn122_cnn902_out_dest_data_out_41_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn123_cnn910_out_dest_data_out_42_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn124_cnn918_out_dest_data_out_43_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn125_cnn933_out_dest_data_out_44_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn126_cnn941_out_dest_data_out_45_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn127_cnn949_out_dest_data_out_46_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn128_cnn957_out_dest_data_out_47_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn129_cnn972_out_dest_data_out_48_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn130_cnn980_out_dest_data_out_49_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn131_cnn988_out_dest_data_out_50_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn132_cnn996_out_dest_data_out_51_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn133_cnn1011_out_dest_data_out_52_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn134_cnn1019_out_dest_data_out_53_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn135_cnn1027_out_dest_data_out_54_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn136_cnn1035_out_dest_data_out_55_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn137_cnn1050_out_dest_data_out_56_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn138_cnn1058_out_dest_data_out_57_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn139_cnn1066_out_dest_data_out_58_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn140_cnn1074_out_dest_data_out_59_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn141_cnn1089_out_dest_data_out_60_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn142_cnn1097_out_dest_data_out_61_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn143_cnn1105_out_dest_data_out_62_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn144_cnn1113_out_dest_data_out_63_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn145_cnn1128_out_dest_data_out_64_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn146_cnn1136_out_dest_data_out_65_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn147_cnn1144_out_dest_data_out_66_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn148_cnn1152_out_dest_data_out_67_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn149_cnn1167_out_dest_data_out_68_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn150_cnn1175_out_dest_data_out_69_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn151_cnn1183_out_dest_data_out_70_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn152_cnn1191_out_dest_data_out_71_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn153_cnn1206_out_dest_data_out_72_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn154_cnn1214_out_dest_data_out_73_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn155_cnn1222_out_dest_data_out_74_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn156_cnn1230_out_dest_data_out_75_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn157_cnn1245_out_dest_data_out_76_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn158_cnn1253_out_dest_data_out_77_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn159_cnn1261_out_dest_data_out_78_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn160_cnn1269_out_dest_data_out_79_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn161_cnn1284_out_dest_data_out_80_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn162_cnn1292_out_dest_data_out_81_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn163_cnn1300_out_dest_data_out_82_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn164_cnn1308_out_dest_data_out_83_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn165_cnn1323_out_dest_data_out_84_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn166_cnn1331_out_dest_data_out_85_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn167_cnn1339_out_dest_data_out_86_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn168_cnn1347_out_dest_data_out_87_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn169_cnn1362_out_dest_data_out_88_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn170_cnn1370_out_dest_data_out_89_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn171_cnn1378_out_dest_data_out_90_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn172_cnn1386_out_dest_data_out_91_0;
    wire [0:0] i_llvm_fpga_ffwd_dest_i1_unnamed_cnn173_cnn1396_out_dest_data_out_26_0;
    wire [0:0] i_llvm_fpga_pipeline_keep_going_cnn729_out_exiting_stall_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going_cnn729_out_exiting_valid_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going_cnn729_out_not_exitcond_stall_out;
    wire [0:0] i_llvm_fpga_pipeline_keep_going_cnn729_out_pipeline_valid_out;
    wire [0:0] i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_feedback_stall_out_45;
    wire [0:0] i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_feedback_stall_out_42;
    wire [0:0] i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_feedback_stall_out_40;
    wire [3:0] i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390_out_feedback_stall_out_32;
    wire [63:0] i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_feedback_stall_out_36;
    wire [63:0] i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_feedback_stall_out_37;
    wire [63:0] i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_feedback_stall_out_35;
    wire [63:0] i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_feedback_stall_out_41;
    wire [63:0] i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_feedback_stall_out_39;
    wire [63:0] i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_feedback_stall_out_38;
    wire [63:0] i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_feedback_stall_out_34;
    wire [63:0] i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out;
    wire [0:0] i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_feedback_stall_out_43;
    wire [63:0] i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out;
    wire [0:0] i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_feedback_stall_out_44;
    wire [7:0] i_llvm_fpga_push_i1_notcmp67110_push45_cnn1463_out_feedback_out_45;
    wire [0:0] i_llvm_fpga_push_i1_notcmp67110_push45_cnn1463_out_feedback_valid_out_45;
    wire [7:0] i_llvm_fpga_push_i1_notcmp71106_push42_cnn1451_out_feedback_out_42;
    wire [0:0] i_llvm_fpga_push_i1_notcmp71106_push42_cnn1451_out_feedback_valid_out_42;
    wire [7:0] i_llvm_fpga_push_i1_notcmp75102_push40_cnn1445_out_feedback_out_40;
    wire [0:0] i_llvm_fpga_push_i1_notcmp75102_push40_cnn1445_out_feedback_valid_out_40;
    wire [7:0] i_llvm_fpga_push_i1_notexitcond_cnn1421_out_feedback_out_2;
    wire [0:0] i_llvm_fpga_push_i1_notexitcond_cnn1421_out_feedback_valid_out_2;
    wire [7:0] i_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417_out_feedback_out_32;
    wire [0:0] i_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417_out_feedback_valid_out_32;
    wire [63:0] i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_data_out;
    wire [63:0] i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_feedback_out_36;
    wire [0:0] i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_feedback_valid_out_36;
    wire [63:0] i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_data_out;
    wire [63:0] i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_feedback_out_37;
    wire [0:0] i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_feedback_valid_out_37;
    wire [63:0] i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out;
    wire [63:0] i_llvm_fpga_push_i64_add82_push35_cnn1427_out_feedback_out_35;
    wire [0:0] i_llvm_fpga_push_i64_add82_push35_cnn1427_out_feedback_valid_out_35;
    wire [63:0] i_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405_out_feedback_out_41;
    wire [0:0] i_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405_out_feedback_valid_out_41;
    wire [63:0] i_llvm_fpga_push_i64_mul8599_push39_cnn1408_out_feedback_out_39;
    wire [0:0] i_llvm_fpga_push_i64_mul8599_push39_cnn1408_out_feedback_valid_out_39;
    wire [63:0] i_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411_out_feedback_out_38;
    wire [0:0] i_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411_out_feedback_valid_out_38;
    wire [63:0] i_llvm_fpga_push_i64_ti_055_push34_cnn1414_out_feedback_out_34;
    wire [0:0] i_llvm_fpga_push_i64_ti_055_push34_cnn1414_out_feedback_valid_out_34;
    wire [63:0] i_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457_out_feedback_out_43;
    wire [0:0] i_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457_out_feedback_valid_out_43;
    wire [63:0] i_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402_out_feedback_out_44;
    wire [0:0] i_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402_out_feedback_valid_out_44;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_out_buffer_out;
    wire [9:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_select_63_b;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_out_buffer_out;
    wire [63:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_join_q;
    wire [53:0] i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_select_63_b;
    wire [63:0] i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_join_q;
    wire [61:0] i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_select_63_b;
    wire [3:0] i_mul58_cnn752_vt_const_3_q;
    wire [63:0] i_mul58_cnn752_vt_join_q;
    wire [59:0] i_mul58_cnn752_vt_select_63_b;
    wire [63:0] i_mul65_11_cnn1195_vt_join_q;
    wire [61:0] i_mul65_11_cnn1195_vt_select_63_b;
    wire [63:0] i_mul65_13_cnn1273_vt_join_q;
    wire [62:0] i_mul65_13_cnn1273_vt_select_63_b;
    wire [3:0] i_mul65_15_cnn1351_vt_const_3_q;
    wire [63:0] i_mul65_15_cnn1351_vt_join_q;
    wire [59:0] i_mul65_15_cnn1351_vt_select_63_b;
    wire [63:0] i_mul65_1_cnn805_vt_join_q;
    wire [62:0] i_mul65_1_cnn805_vt_select_63_b;
    wire [63:0] i_mul65_3_cnn883_vt_join_q;
    wire [61:0] i_mul65_3_cnn883_vt_select_63_b;
    wire [63:0] i_mul65_5_cnn961_vt_join_q;
    wire [62:0] i_mul65_5_cnn961_vt_select_63_b;
    wire [63:0] i_mul65_7_cnn1039_vt_join_q;
    wire [60:0] i_mul65_7_cnn1039_vt_select_63_b;
    wire [63:0] i_mul65_9_cnn1117_vt_join_q;
    wire [62:0] i_mul65_9_cnn1117_vt_select_63_b;
    wire [64:0] i_mul69_1_cnn743_a;
    wire [64:0] i_mul69_1_cnn743_b;
    logic [64:0] i_mul69_1_cnn743_o;
    wire [64:0] i_mul69_1_cnn743_q;
    wire [64:0] i_mul69_2_cnn745_a;
    wire [64:0] i_mul69_2_cnn745_b;
    logic [64:0] i_mul69_2_cnn745_o;
    wire [64:0] i_mul69_2_cnn745_q;
    wire [64:0] i_mul69_3_cnn747_a;
    wire [64:0] i_mul69_3_cnn747_b;
    logic [64:0] i_mul69_3_cnn747_o;
    wire [64:0] i_mul69_3_cnn747_q;
    wire [64:0] i_mul69_add2_cnn737_a;
    wire [64:0] i_mul69_add2_cnn737_b;
    logic [64:0] i_mul69_add2_cnn737_o;
    wire [64:0] i_mul69_add2_cnn737_q;
    wire [64:0] i_mul69_add4_cnn741_a;
    wire [64:0] i_mul69_add4_cnn741_b;
    logic [64:0] i_mul69_add4_cnn741_o;
    wire [64:0] i_mul69_add4_cnn741_q;
    wire [0:0] i_notcmp_cnn1420_q;
    wire [0:0] i_unnamed_cnn1399_q;
    wire [63:0] i_unnamed_cnn735_vt_join_q;
    wire [62:0] i_unnamed_cnn735_vt_select_63_b;
    wire [3:0] bgTrunc_i_fpgaindvars_iv_next_cnn1395_sel_x_b;
    wire [63:0] bgTrunc_i_inc79_15_cnn1389_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_10_cnn1156_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_11_cnn1195_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_12_cnn1234_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_13_cnn1273_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_14_cnn1312_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_15_cnn1351_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_1_cnn805_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_2_cnn844_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_3_cnn883_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_4_cnn922_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_5_cnn961_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_6_cnn1000_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_7_cnn1039_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_8_cnn1078_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_9_cnn1117_sel_x_b;
    wire [63:0] bgTrunc_i_mul65_cnn759_sel_x_b;
    wire [63:0] bgTrunc_i_mul69_1_cnn743_sel_x_b;
    wire [63:0] bgTrunc_i_mul69_2_cnn745_sel_x_b;
    wire [63:0] bgTrunc_i_mul69_3_cnn747_sel_x_b;
    wire [63:0] bgTrunc_i_mul69_add2_cnn737_sel_x_b;
    wire [63:0] bgTrunc_i_mul69_add4_cnn741_sel_x_b;
    wire [64:0] i_add_ptr59_cnn758_add_x_a;
    wire [64:0] i_add_ptr59_cnn758_add_x_b;
    logic [64:0] i_add_ptr59_cnn758_add_x_o;
    wire [64:0] i_add_ptr59_cnn758_add_x_q;
    wire [127:0] i_add_ptr59_cnn758_mult_extender_x_q;
    wire [60:0] i_add_ptr59_cnn758_mult_multconst_x_q;
    wire [63:0] i_add_ptr59_cnn758_trunc_sel_x_b;
    wire [63:0] i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_10_cnn1161_add_x_a;
    wire [64:0] i_add_ptr66_10_cnn1161_add_x_b;
    logic [64:0] i_add_ptr66_10_cnn1161_add_x_o;
    wire [64:0] i_add_ptr66_10_cnn1161_add_x_q;
    wire [127:0] i_add_ptr66_10_cnn1161_mult_extender_x_q;
    wire [63:0] i_add_ptr66_10_cnn1161_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_10_cnn1161_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_11_cnn1200_add_x_a;
    wire [64:0] i_add_ptr66_11_cnn1200_add_x_b;
    logic [64:0] i_add_ptr66_11_cnn1200_add_x_o;
    wire [64:0] i_add_ptr66_11_cnn1200_add_x_q;
    wire [127:0] i_add_ptr66_11_cnn1200_mult_extender_x_q;
    wire [63:0] i_add_ptr66_11_cnn1200_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_11_cnn1200_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_12_cnn1239_add_x_a;
    wire [64:0] i_add_ptr66_12_cnn1239_add_x_b;
    logic [64:0] i_add_ptr66_12_cnn1239_add_x_o;
    wire [64:0] i_add_ptr66_12_cnn1239_add_x_q;
    wire [127:0] i_add_ptr66_12_cnn1239_mult_extender_x_q;
    wire [63:0] i_add_ptr66_12_cnn1239_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_12_cnn1239_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_13_cnn1278_add_x_a;
    wire [64:0] i_add_ptr66_13_cnn1278_add_x_b;
    logic [64:0] i_add_ptr66_13_cnn1278_add_x_o;
    wire [64:0] i_add_ptr66_13_cnn1278_add_x_q;
    wire [127:0] i_add_ptr66_13_cnn1278_mult_extender_x_q;
    wire [63:0] i_add_ptr66_13_cnn1278_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_13_cnn1278_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_14_cnn1317_add_x_a;
    wire [64:0] i_add_ptr66_14_cnn1317_add_x_b;
    logic [64:0] i_add_ptr66_14_cnn1317_add_x_o;
    wire [64:0] i_add_ptr66_14_cnn1317_add_x_q;
    wire [127:0] i_add_ptr66_14_cnn1317_mult_extender_x_q;
    wire [63:0] i_add_ptr66_14_cnn1317_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_14_cnn1317_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_15_cnn1356_add_x_a;
    wire [64:0] i_add_ptr66_15_cnn1356_add_x_b;
    logic [64:0] i_add_ptr66_15_cnn1356_add_x_o;
    wire [64:0] i_add_ptr66_15_cnn1356_add_x_q;
    wire [127:0] i_add_ptr66_15_cnn1356_mult_extender_x_q;
    wire [63:0] i_add_ptr66_15_cnn1356_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_15_cnn1356_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_1_cnn810_add_x_a;
    wire [64:0] i_add_ptr66_1_cnn810_add_x_b;
    logic [64:0] i_add_ptr66_1_cnn810_add_x_o;
    wire [64:0] i_add_ptr66_1_cnn810_add_x_q;
    wire [127:0] i_add_ptr66_1_cnn810_mult_extender_x_q;
    wire [63:0] i_add_ptr66_1_cnn810_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_1_cnn810_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_2_cnn849_add_x_a;
    wire [64:0] i_add_ptr66_2_cnn849_add_x_b;
    logic [64:0] i_add_ptr66_2_cnn849_add_x_o;
    wire [64:0] i_add_ptr66_2_cnn849_add_x_q;
    wire [127:0] i_add_ptr66_2_cnn849_mult_extender_x_q;
    wire [63:0] i_add_ptr66_2_cnn849_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_2_cnn849_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_3_cnn888_add_x_a;
    wire [64:0] i_add_ptr66_3_cnn888_add_x_b;
    logic [64:0] i_add_ptr66_3_cnn888_add_x_o;
    wire [64:0] i_add_ptr66_3_cnn888_add_x_q;
    wire [127:0] i_add_ptr66_3_cnn888_mult_extender_x_q;
    wire [63:0] i_add_ptr66_3_cnn888_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_3_cnn888_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_4_cnn927_add_x_a;
    wire [64:0] i_add_ptr66_4_cnn927_add_x_b;
    logic [64:0] i_add_ptr66_4_cnn927_add_x_o;
    wire [64:0] i_add_ptr66_4_cnn927_add_x_q;
    wire [127:0] i_add_ptr66_4_cnn927_mult_extender_x_q;
    wire [63:0] i_add_ptr66_4_cnn927_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_4_cnn927_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_5_cnn966_add_x_a;
    wire [64:0] i_add_ptr66_5_cnn966_add_x_b;
    logic [64:0] i_add_ptr66_5_cnn966_add_x_o;
    wire [64:0] i_add_ptr66_5_cnn966_add_x_q;
    wire [127:0] i_add_ptr66_5_cnn966_mult_extender_x_q;
    wire [63:0] i_add_ptr66_5_cnn966_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_5_cnn966_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_6_cnn1005_add_x_a;
    wire [64:0] i_add_ptr66_6_cnn1005_add_x_b;
    logic [64:0] i_add_ptr66_6_cnn1005_add_x_o;
    wire [64:0] i_add_ptr66_6_cnn1005_add_x_q;
    wire [127:0] i_add_ptr66_6_cnn1005_mult_extender_x_q;
    wire [63:0] i_add_ptr66_6_cnn1005_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_6_cnn1005_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_7_cnn1044_add_x_a;
    wire [64:0] i_add_ptr66_7_cnn1044_add_x_b;
    logic [64:0] i_add_ptr66_7_cnn1044_add_x_o;
    wire [64:0] i_add_ptr66_7_cnn1044_add_x_q;
    wire [127:0] i_add_ptr66_7_cnn1044_mult_extender_x_q;
    wire [63:0] i_add_ptr66_7_cnn1044_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_7_cnn1044_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_8_cnn1083_add_x_a;
    wire [64:0] i_add_ptr66_8_cnn1083_add_x_b;
    logic [64:0] i_add_ptr66_8_cnn1083_add_x_o;
    wire [64:0] i_add_ptr66_8_cnn1083_add_x_q;
    wire [127:0] i_add_ptr66_8_cnn1083_mult_extender_x_q;
    wire [63:0] i_add_ptr66_8_cnn1083_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_8_cnn1083_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_9_cnn1122_add_x_a;
    wire [64:0] i_add_ptr66_9_cnn1122_add_x_b;
    logic [64:0] i_add_ptr66_9_cnn1122_add_x_o;
    wire [64:0] i_add_ptr66_9_cnn1122_add_x_q;
    wire [127:0] i_add_ptr66_9_cnn1122_mult_extender_x_q;
    wire [63:0] i_add_ptr66_9_cnn1122_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_9_cnn1122_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr66_cnn764_add_x_a;
    wire [64:0] i_add_ptr66_cnn764_add_x_b;
    logic [64:0] i_add_ptr66_cnn764_add_x_o;
    wire [64:0] i_add_ptr66_cnn764_add_x_q;
    wire [127:0] i_add_ptr66_cnn764_mult_extender_x_q;
    wire [63:0] i_add_ptr66_cnn764_trunc_sel_x_b;
    wire [63:0] i_add_ptr66_cnn764_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_10_cnn1163_add_x_a;
    wire [64:0] i_add_ptr70_10_cnn1163_add_x_b;
    logic [64:0] i_add_ptr70_10_cnn1163_add_x_o;
    wire [64:0] i_add_ptr70_10_cnn1163_add_x_q;
    wire [127:0] i_add_ptr70_10_cnn1163_mult_extender_x_q;
    wire [63:0] i_add_ptr70_10_cnn1163_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_10_cnn1163_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_11_cnn1202_add_x_a;
    wire [64:0] i_add_ptr70_11_cnn1202_add_x_b;
    logic [64:0] i_add_ptr70_11_cnn1202_add_x_o;
    wire [64:0] i_add_ptr70_11_cnn1202_add_x_q;
    wire [127:0] i_add_ptr70_11_cnn1202_mult_extender_x_q;
    wire [63:0] i_add_ptr70_11_cnn1202_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_11_cnn1202_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_12_cnn1241_add_x_a;
    wire [64:0] i_add_ptr70_12_cnn1241_add_x_b;
    logic [64:0] i_add_ptr70_12_cnn1241_add_x_o;
    wire [64:0] i_add_ptr70_12_cnn1241_add_x_q;
    wire [127:0] i_add_ptr70_12_cnn1241_mult_extender_x_q;
    wire [63:0] i_add_ptr70_12_cnn1241_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_12_cnn1241_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_13_cnn1280_add_x_a;
    wire [64:0] i_add_ptr70_13_cnn1280_add_x_b;
    logic [64:0] i_add_ptr70_13_cnn1280_add_x_o;
    wire [64:0] i_add_ptr70_13_cnn1280_add_x_q;
    wire [127:0] i_add_ptr70_13_cnn1280_mult_extender_x_q;
    wire [63:0] i_add_ptr70_13_cnn1280_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_13_cnn1280_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_14_cnn1319_add_x_a;
    wire [64:0] i_add_ptr70_14_cnn1319_add_x_b;
    logic [64:0] i_add_ptr70_14_cnn1319_add_x_o;
    wire [64:0] i_add_ptr70_14_cnn1319_add_x_q;
    wire [127:0] i_add_ptr70_14_cnn1319_mult_extender_x_q;
    wire [63:0] i_add_ptr70_14_cnn1319_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_14_cnn1319_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_15_cnn1358_add_x_a;
    wire [64:0] i_add_ptr70_15_cnn1358_add_x_b;
    logic [64:0] i_add_ptr70_15_cnn1358_add_x_o;
    wire [64:0] i_add_ptr70_15_cnn1358_add_x_q;
    wire [127:0] i_add_ptr70_15_cnn1358_mult_extender_x_q;
    wire [63:0] i_add_ptr70_15_cnn1358_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_15_cnn1358_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_173_cnn812_add_x_a;
    wire [64:0] i_add_ptr70_173_cnn812_add_x_b;
    logic [64:0] i_add_ptr70_173_cnn812_add_x_o;
    wire [64:0] i_add_ptr70_173_cnn812_add_x_q;
    wire [127:0] i_add_ptr70_173_cnn812_mult_extender_x_q;
    wire [63:0] i_add_ptr70_173_cnn812_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_173_cnn812_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_10_cnn1171_add_x_a;
    wire [64:0] i_add_ptr70_1_10_cnn1171_add_x_b;
    logic [64:0] i_add_ptr70_1_10_cnn1171_add_x_o;
    wire [64:0] i_add_ptr70_1_10_cnn1171_add_x_q;
    wire [127:0] i_add_ptr70_1_10_cnn1171_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_10_cnn1171_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_10_cnn1171_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_11_cnn1210_add_x_a;
    wire [64:0] i_add_ptr70_1_11_cnn1210_add_x_b;
    logic [64:0] i_add_ptr70_1_11_cnn1210_add_x_o;
    wire [64:0] i_add_ptr70_1_11_cnn1210_add_x_q;
    wire [127:0] i_add_ptr70_1_11_cnn1210_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_11_cnn1210_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_11_cnn1210_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_12_cnn1249_add_x_a;
    wire [64:0] i_add_ptr70_1_12_cnn1249_add_x_b;
    logic [64:0] i_add_ptr70_1_12_cnn1249_add_x_o;
    wire [64:0] i_add_ptr70_1_12_cnn1249_add_x_q;
    wire [127:0] i_add_ptr70_1_12_cnn1249_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_12_cnn1249_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_12_cnn1249_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_13_cnn1288_add_x_a;
    wire [64:0] i_add_ptr70_1_13_cnn1288_add_x_b;
    logic [64:0] i_add_ptr70_1_13_cnn1288_add_x_o;
    wire [64:0] i_add_ptr70_1_13_cnn1288_add_x_q;
    wire [127:0] i_add_ptr70_1_13_cnn1288_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_13_cnn1288_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_13_cnn1288_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_14_cnn1327_add_x_a;
    wire [64:0] i_add_ptr70_1_14_cnn1327_add_x_b;
    logic [64:0] i_add_ptr70_1_14_cnn1327_add_x_o;
    wire [64:0] i_add_ptr70_1_14_cnn1327_add_x_q;
    wire [127:0] i_add_ptr70_1_14_cnn1327_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_14_cnn1327_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_14_cnn1327_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_15_cnn1366_add_x_a;
    wire [64:0] i_add_ptr70_1_15_cnn1366_add_x_b;
    logic [64:0] i_add_ptr70_1_15_cnn1366_add_x_o;
    wire [64:0] i_add_ptr70_1_15_cnn1366_add_x_q;
    wire [127:0] i_add_ptr70_1_15_cnn1366_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_15_cnn1366_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_15_cnn1366_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_1_cnn820_add_x_a;
    wire [64:0] i_add_ptr70_1_1_cnn820_add_x_b;
    logic [64:0] i_add_ptr70_1_1_cnn820_add_x_o;
    wire [64:0] i_add_ptr70_1_1_cnn820_add_x_q;
    wire [127:0] i_add_ptr70_1_1_cnn820_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_1_cnn820_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_1_cnn820_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_2_cnn859_add_x_a;
    wire [64:0] i_add_ptr70_1_2_cnn859_add_x_b;
    logic [64:0] i_add_ptr70_1_2_cnn859_add_x_o;
    wire [64:0] i_add_ptr70_1_2_cnn859_add_x_q;
    wire [127:0] i_add_ptr70_1_2_cnn859_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_2_cnn859_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_2_cnn859_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_3_cnn898_add_x_a;
    wire [64:0] i_add_ptr70_1_3_cnn898_add_x_b;
    logic [64:0] i_add_ptr70_1_3_cnn898_add_x_o;
    wire [64:0] i_add_ptr70_1_3_cnn898_add_x_q;
    wire [127:0] i_add_ptr70_1_3_cnn898_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_3_cnn898_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_3_cnn898_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_4_cnn937_add_x_a;
    wire [64:0] i_add_ptr70_1_4_cnn937_add_x_b;
    logic [64:0] i_add_ptr70_1_4_cnn937_add_x_o;
    wire [64:0] i_add_ptr70_1_4_cnn937_add_x_q;
    wire [127:0] i_add_ptr70_1_4_cnn937_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_4_cnn937_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_4_cnn937_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_5_cnn976_add_x_a;
    wire [64:0] i_add_ptr70_1_5_cnn976_add_x_b;
    logic [64:0] i_add_ptr70_1_5_cnn976_add_x_o;
    wire [64:0] i_add_ptr70_1_5_cnn976_add_x_q;
    wire [127:0] i_add_ptr70_1_5_cnn976_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_5_cnn976_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_5_cnn976_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_6_cnn1015_add_x_a;
    wire [64:0] i_add_ptr70_1_6_cnn1015_add_x_b;
    logic [64:0] i_add_ptr70_1_6_cnn1015_add_x_o;
    wire [64:0] i_add_ptr70_1_6_cnn1015_add_x_q;
    wire [127:0] i_add_ptr70_1_6_cnn1015_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_6_cnn1015_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_6_cnn1015_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_7_cnn1054_add_x_a;
    wire [64:0] i_add_ptr70_1_7_cnn1054_add_x_b;
    logic [64:0] i_add_ptr70_1_7_cnn1054_add_x_o;
    wire [64:0] i_add_ptr70_1_7_cnn1054_add_x_q;
    wire [127:0] i_add_ptr70_1_7_cnn1054_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_7_cnn1054_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_7_cnn1054_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_8_cnn1093_add_x_a;
    wire [64:0] i_add_ptr70_1_8_cnn1093_add_x_b;
    logic [64:0] i_add_ptr70_1_8_cnn1093_add_x_o;
    wire [64:0] i_add_ptr70_1_8_cnn1093_add_x_q;
    wire [127:0] i_add_ptr70_1_8_cnn1093_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_8_cnn1093_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_8_cnn1093_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_9_cnn1132_add_x_a;
    wire [64:0] i_add_ptr70_1_9_cnn1132_add_x_b;
    logic [64:0] i_add_ptr70_1_9_cnn1132_add_x_o;
    wire [64:0] i_add_ptr70_1_9_cnn1132_add_x_q;
    wire [127:0] i_add_ptr70_1_9_cnn1132_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_9_cnn1132_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_9_cnn1132_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_1_cnn781_add_x_a;
    wire [64:0] i_add_ptr70_1_cnn781_add_x_b;
    logic [64:0] i_add_ptr70_1_cnn781_add_x_o;
    wire [64:0] i_add_ptr70_1_cnn781_add_x_q;
    wire [127:0] i_add_ptr70_1_cnn781_mult_extender_x_q;
    wire [63:0] i_add_ptr70_1_cnn781_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_1_cnn781_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_286_cnn851_add_x_a;
    wire [64:0] i_add_ptr70_286_cnn851_add_x_b;
    logic [64:0] i_add_ptr70_286_cnn851_add_x_o;
    wire [64:0] i_add_ptr70_286_cnn851_add_x_q;
    wire [127:0] i_add_ptr70_286_cnn851_mult_extender_x_q;
    wire [63:0] i_add_ptr70_286_cnn851_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_286_cnn851_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_10_cnn1179_add_x_a;
    wire [64:0] i_add_ptr70_2_10_cnn1179_add_x_b;
    logic [64:0] i_add_ptr70_2_10_cnn1179_add_x_o;
    wire [64:0] i_add_ptr70_2_10_cnn1179_add_x_q;
    wire [127:0] i_add_ptr70_2_10_cnn1179_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_10_cnn1179_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_10_cnn1179_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_11_cnn1218_add_x_a;
    wire [64:0] i_add_ptr70_2_11_cnn1218_add_x_b;
    logic [64:0] i_add_ptr70_2_11_cnn1218_add_x_o;
    wire [64:0] i_add_ptr70_2_11_cnn1218_add_x_q;
    wire [127:0] i_add_ptr70_2_11_cnn1218_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_11_cnn1218_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_11_cnn1218_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_12_cnn1257_add_x_a;
    wire [64:0] i_add_ptr70_2_12_cnn1257_add_x_b;
    logic [64:0] i_add_ptr70_2_12_cnn1257_add_x_o;
    wire [64:0] i_add_ptr70_2_12_cnn1257_add_x_q;
    wire [127:0] i_add_ptr70_2_12_cnn1257_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_12_cnn1257_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_12_cnn1257_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_13_cnn1296_add_x_a;
    wire [64:0] i_add_ptr70_2_13_cnn1296_add_x_b;
    logic [64:0] i_add_ptr70_2_13_cnn1296_add_x_o;
    wire [64:0] i_add_ptr70_2_13_cnn1296_add_x_q;
    wire [127:0] i_add_ptr70_2_13_cnn1296_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_13_cnn1296_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_13_cnn1296_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_14_cnn1335_add_x_a;
    wire [64:0] i_add_ptr70_2_14_cnn1335_add_x_b;
    logic [64:0] i_add_ptr70_2_14_cnn1335_add_x_o;
    wire [64:0] i_add_ptr70_2_14_cnn1335_add_x_q;
    wire [127:0] i_add_ptr70_2_14_cnn1335_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_14_cnn1335_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_14_cnn1335_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_15_cnn1374_add_x_a;
    wire [64:0] i_add_ptr70_2_15_cnn1374_add_x_b;
    logic [64:0] i_add_ptr70_2_15_cnn1374_add_x_o;
    wire [64:0] i_add_ptr70_2_15_cnn1374_add_x_q;
    wire [127:0] i_add_ptr70_2_15_cnn1374_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_15_cnn1374_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_15_cnn1374_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_1_cnn828_add_x_a;
    wire [64:0] i_add_ptr70_2_1_cnn828_add_x_b;
    logic [64:0] i_add_ptr70_2_1_cnn828_add_x_o;
    wire [64:0] i_add_ptr70_2_1_cnn828_add_x_q;
    wire [127:0] i_add_ptr70_2_1_cnn828_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_1_cnn828_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_1_cnn828_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_2_cnn867_add_x_a;
    wire [64:0] i_add_ptr70_2_2_cnn867_add_x_b;
    logic [64:0] i_add_ptr70_2_2_cnn867_add_x_o;
    wire [64:0] i_add_ptr70_2_2_cnn867_add_x_q;
    wire [127:0] i_add_ptr70_2_2_cnn867_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_2_cnn867_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_2_cnn867_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_3_cnn906_add_x_a;
    wire [64:0] i_add_ptr70_2_3_cnn906_add_x_b;
    logic [64:0] i_add_ptr70_2_3_cnn906_add_x_o;
    wire [64:0] i_add_ptr70_2_3_cnn906_add_x_q;
    wire [127:0] i_add_ptr70_2_3_cnn906_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_3_cnn906_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_3_cnn906_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_4_cnn945_add_x_a;
    wire [64:0] i_add_ptr70_2_4_cnn945_add_x_b;
    logic [64:0] i_add_ptr70_2_4_cnn945_add_x_o;
    wire [64:0] i_add_ptr70_2_4_cnn945_add_x_q;
    wire [127:0] i_add_ptr70_2_4_cnn945_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_4_cnn945_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_4_cnn945_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_5_cnn984_add_x_a;
    wire [64:0] i_add_ptr70_2_5_cnn984_add_x_b;
    logic [64:0] i_add_ptr70_2_5_cnn984_add_x_o;
    wire [64:0] i_add_ptr70_2_5_cnn984_add_x_q;
    wire [127:0] i_add_ptr70_2_5_cnn984_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_5_cnn984_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_5_cnn984_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_6_cnn1023_add_x_a;
    wire [64:0] i_add_ptr70_2_6_cnn1023_add_x_b;
    logic [64:0] i_add_ptr70_2_6_cnn1023_add_x_o;
    wire [64:0] i_add_ptr70_2_6_cnn1023_add_x_q;
    wire [127:0] i_add_ptr70_2_6_cnn1023_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_6_cnn1023_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_6_cnn1023_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_7_cnn1062_add_x_a;
    wire [64:0] i_add_ptr70_2_7_cnn1062_add_x_b;
    logic [64:0] i_add_ptr70_2_7_cnn1062_add_x_o;
    wire [64:0] i_add_ptr70_2_7_cnn1062_add_x_q;
    wire [127:0] i_add_ptr70_2_7_cnn1062_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_7_cnn1062_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_7_cnn1062_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_8_cnn1101_add_x_a;
    wire [64:0] i_add_ptr70_2_8_cnn1101_add_x_b;
    logic [64:0] i_add_ptr70_2_8_cnn1101_add_x_o;
    wire [64:0] i_add_ptr70_2_8_cnn1101_add_x_q;
    wire [127:0] i_add_ptr70_2_8_cnn1101_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_8_cnn1101_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_8_cnn1101_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_9_cnn1140_add_x_a;
    wire [64:0] i_add_ptr70_2_9_cnn1140_add_x_b;
    logic [64:0] i_add_ptr70_2_9_cnn1140_add_x_o;
    wire [64:0] i_add_ptr70_2_9_cnn1140_add_x_q;
    wire [127:0] i_add_ptr70_2_9_cnn1140_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_9_cnn1140_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_9_cnn1140_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_2_cnn789_add_x_a;
    wire [64:0] i_add_ptr70_2_cnn789_add_x_b;
    logic [64:0] i_add_ptr70_2_cnn789_add_x_o;
    wire [64:0] i_add_ptr70_2_cnn789_add_x_q;
    wire [127:0] i_add_ptr70_2_cnn789_mult_extender_x_q;
    wire [63:0] i_add_ptr70_2_cnn789_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_2_cnn789_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_399_cnn890_add_x_a;
    wire [64:0] i_add_ptr70_399_cnn890_add_x_b;
    logic [64:0] i_add_ptr70_399_cnn890_add_x_o;
    wire [64:0] i_add_ptr70_399_cnn890_add_x_q;
    wire [127:0] i_add_ptr70_399_cnn890_mult_extender_x_q;
    wire [63:0] i_add_ptr70_399_cnn890_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_399_cnn890_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_10_cnn1187_add_x_a;
    wire [64:0] i_add_ptr70_3_10_cnn1187_add_x_b;
    logic [64:0] i_add_ptr70_3_10_cnn1187_add_x_o;
    wire [64:0] i_add_ptr70_3_10_cnn1187_add_x_q;
    wire [127:0] i_add_ptr70_3_10_cnn1187_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_10_cnn1187_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_10_cnn1187_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_11_cnn1226_add_x_a;
    wire [64:0] i_add_ptr70_3_11_cnn1226_add_x_b;
    logic [64:0] i_add_ptr70_3_11_cnn1226_add_x_o;
    wire [64:0] i_add_ptr70_3_11_cnn1226_add_x_q;
    wire [127:0] i_add_ptr70_3_11_cnn1226_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_11_cnn1226_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_11_cnn1226_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_12_cnn1265_add_x_a;
    wire [64:0] i_add_ptr70_3_12_cnn1265_add_x_b;
    logic [64:0] i_add_ptr70_3_12_cnn1265_add_x_o;
    wire [64:0] i_add_ptr70_3_12_cnn1265_add_x_q;
    wire [127:0] i_add_ptr70_3_12_cnn1265_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_12_cnn1265_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_12_cnn1265_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_13_cnn1304_add_x_a;
    wire [64:0] i_add_ptr70_3_13_cnn1304_add_x_b;
    logic [64:0] i_add_ptr70_3_13_cnn1304_add_x_o;
    wire [64:0] i_add_ptr70_3_13_cnn1304_add_x_q;
    wire [127:0] i_add_ptr70_3_13_cnn1304_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_13_cnn1304_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_13_cnn1304_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_14_cnn1343_add_x_a;
    wire [64:0] i_add_ptr70_3_14_cnn1343_add_x_b;
    logic [64:0] i_add_ptr70_3_14_cnn1343_add_x_o;
    wire [64:0] i_add_ptr70_3_14_cnn1343_add_x_q;
    wire [127:0] i_add_ptr70_3_14_cnn1343_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_14_cnn1343_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_14_cnn1343_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_15_cnn1382_add_x_a;
    wire [64:0] i_add_ptr70_3_15_cnn1382_add_x_b;
    logic [64:0] i_add_ptr70_3_15_cnn1382_add_x_o;
    wire [64:0] i_add_ptr70_3_15_cnn1382_add_x_q;
    wire [127:0] i_add_ptr70_3_15_cnn1382_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_15_cnn1382_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_15_cnn1382_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_1_cnn836_add_x_a;
    wire [64:0] i_add_ptr70_3_1_cnn836_add_x_b;
    logic [64:0] i_add_ptr70_3_1_cnn836_add_x_o;
    wire [64:0] i_add_ptr70_3_1_cnn836_add_x_q;
    wire [127:0] i_add_ptr70_3_1_cnn836_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_1_cnn836_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_1_cnn836_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_2_cnn875_add_x_a;
    wire [64:0] i_add_ptr70_3_2_cnn875_add_x_b;
    logic [64:0] i_add_ptr70_3_2_cnn875_add_x_o;
    wire [64:0] i_add_ptr70_3_2_cnn875_add_x_q;
    wire [127:0] i_add_ptr70_3_2_cnn875_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_2_cnn875_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_2_cnn875_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_3_cnn914_add_x_a;
    wire [64:0] i_add_ptr70_3_3_cnn914_add_x_b;
    logic [64:0] i_add_ptr70_3_3_cnn914_add_x_o;
    wire [64:0] i_add_ptr70_3_3_cnn914_add_x_q;
    wire [127:0] i_add_ptr70_3_3_cnn914_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_3_cnn914_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_3_cnn914_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_4_cnn953_add_x_a;
    wire [64:0] i_add_ptr70_3_4_cnn953_add_x_b;
    logic [64:0] i_add_ptr70_3_4_cnn953_add_x_o;
    wire [64:0] i_add_ptr70_3_4_cnn953_add_x_q;
    wire [127:0] i_add_ptr70_3_4_cnn953_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_4_cnn953_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_4_cnn953_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_5_cnn992_add_x_a;
    wire [64:0] i_add_ptr70_3_5_cnn992_add_x_b;
    logic [64:0] i_add_ptr70_3_5_cnn992_add_x_o;
    wire [64:0] i_add_ptr70_3_5_cnn992_add_x_q;
    wire [127:0] i_add_ptr70_3_5_cnn992_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_5_cnn992_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_5_cnn992_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_6_cnn1031_add_x_a;
    wire [64:0] i_add_ptr70_3_6_cnn1031_add_x_b;
    logic [64:0] i_add_ptr70_3_6_cnn1031_add_x_o;
    wire [64:0] i_add_ptr70_3_6_cnn1031_add_x_q;
    wire [127:0] i_add_ptr70_3_6_cnn1031_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_6_cnn1031_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_6_cnn1031_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_7_cnn1070_add_x_a;
    wire [64:0] i_add_ptr70_3_7_cnn1070_add_x_b;
    logic [64:0] i_add_ptr70_3_7_cnn1070_add_x_o;
    wire [64:0] i_add_ptr70_3_7_cnn1070_add_x_q;
    wire [127:0] i_add_ptr70_3_7_cnn1070_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_7_cnn1070_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_7_cnn1070_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_8_cnn1109_add_x_a;
    wire [64:0] i_add_ptr70_3_8_cnn1109_add_x_b;
    logic [64:0] i_add_ptr70_3_8_cnn1109_add_x_o;
    wire [64:0] i_add_ptr70_3_8_cnn1109_add_x_q;
    wire [127:0] i_add_ptr70_3_8_cnn1109_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_8_cnn1109_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_8_cnn1109_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_9_cnn1148_add_x_a;
    wire [64:0] i_add_ptr70_3_9_cnn1148_add_x_b;
    logic [64:0] i_add_ptr70_3_9_cnn1148_add_x_o;
    wire [64:0] i_add_ptr70_3_9_cnn1148_add_x_q;
    wire [127:0] i_add_ptr70_3_9_cnn1148_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_9_cnn1148_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_9_cnn1148_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_3_cnn797_add_x_a;
    wire [64:0] i_add_ptr70_3_cnn797_add_x_b;
    logic [64:0] i_add_ptr70_3_cnn797_add_x_o;
    wire [64:0] i_add_ptr70_3_cnn797_add_x_q;
    wire [127:0] i_add_ptr70_3_cnn797_mult_extender_x_q;
    wire [63:0] i_add_ptr70_3_cnn797_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_3_cnn797_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_4_cnn929_add_x_a;
    wire [64:0] i_add_ptr70_4_cnn929_add_x_b;
    logic [64:0] i_add_ptr70_4_cnn929_add_x_o;
    wire [64:0] i_add_ptr70_4_cnn929_add_x_q;
    wire [127:0] i_add_ptr70_4_cnn929_mult_extender_x_q;
    wire [63:0] i_add_ptr70_4_cnn929_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_4_cnn929_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_5_cnn968_add_x_a;
    wire [64:0] i_add_ptr70_5_cnn968_add_x_b;
    logic [64:0] i_add_ptr70_5_cnn968_add_x_o;
    wire [64:0] i_add_ptr70_5_cnn968_add_x_q;
    wire [127:0] i_add_ptr70_5_cnn968_mult_extender_x_q;
    wire [63:0] i_add_ptr70_5_cnn968_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_5_cnn968_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_6_cnn1007_add_x_a;
    wire [64:0] i_add_ptr70_6_cnn1007_add_x_b;
    logic [64:0] i_add_ptr70_6_cnn1007_add_x_o;
    wire [64:0] i_add_ptr70_6_cnn1007_add_x_q;
    wire [127:0] i_add_ptr70_6_cnn1007_mult_extender_x_q;
    wire [63:0] i_add_ptr70_6_cnn1007_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_6_cnn1007_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_7_cnn1046_add_x_a;
    wire [64:0] i_add_ptr70_7_cnn1046_add_x_b;
    logic [64:0] i_add_ptr70_7_cnn1046_add_x_o;
    wire [64:0] i_add_ptr70_7_cnn1046_add_x_q;
    wire [127:0] i_add_ptr70_7_cnn1046_mult_extender_x_q;
    wire [63:0] i_add_ptr70_7_cnn1046_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_7_cnn1046_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_8_cnn1085_add_x_a;
    wire [64:0] i_add_ptr70_8_cnn1085_add_x_b;
    logic [64:0] i_add_ptr70_8_cnn1085_add_x_o;
    wire [64:0] i_add_ptr70_8_cnn1085_add_x_q;
    wire [127:0] i_add_ptr70_8_cnn1085_mult_extender_x_q;
    wire [63:0] i_add_ptr70_8_cnn1085_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_8_cnn1085_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_9_cnn1124_add_x_a;
    wire [64:0] i_add_ptr70_9_cnn1124_add_x_b;
    logic [64:0] i_add_ptr70_9_cnn1124_add_x_o;
    wire [64:0] i_add_ptr70_9_cnn1124_add_x_q;
    wire [127:0] i_add_ptr70_9_cnn1124_mult_extender_x_q;
    wire [63:0] i_add_ptr70_9_cnn1124_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_9_cnn1124_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr70_cnn766_add_x_a;
    wire [64:0] i_add_ptr70_cnn766_add_x_b;
    logic [64:0] i_add_ptr70_cnn766_add_x_o;
    wire [64:0] i_add_ptr70_cnn766_add_x_q;
    wire [127:0] i_add_ptr70_cnn766_mult_extender_x_q;
    wire [63:0] i_add_ptr70_cnn766_trunc_sel_x_b;
    wire [63:0] i_add_ptr70_cnn766_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_10_cnn1165_add_x_a;
    wire [64:0] i_add_ptr73_10_cnn1165_add_x_b;
    logic [64:0] i_add_ptr73_10_cnn1165_add_x_o;
    wire [64:0] i_add_ptr73_10_cnn1165_add_x_q;
    wire [127:0] i_add_ptr73_10_cnn1165_mult_extender_x_q;
    wire [63:0] i_add_ptr73_10_cnn1165_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_10_cnn1165_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_11_cnn1204_add_x_a;
    wire [64:0] i_add_ptr73_11_cnn1204_add_x_b;
    logic [64:0] i_add_ptr73_11_cnn1204_add_x_o;
    wire [64:0] i_add_ptr73_11_cnn1204_add_x_q;
    wire [127:0] i_add_ptr73_11_cnn1204_mult_extender_x_q;
    wire [63:0] i_add_ptr73_11_cnn1204_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_11_cnn1204_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_12_cnn1243_add_x_a;
    wire [64:0] i_add_ptr73_12_cnn1243_add_x_b;
    logic [64:0] i_add_ptr73_12_cnn1243_add_x_o;
    wire [64:0] i_add_ptr73_12_cnn1243_add_x_q;
    wire [127:0] i_add_ptr73_12_cnn1243_mult_extender_x_q;
    wire [63:0] i_add_ptr73_12_cnn1243_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_12_cnn1243_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_13_cnn1282_add_x_a;
    wire [64:0] i_add_ptr73_13_cnn1282_add_x_b;
    logic [64:0] i_add_ptr73_13_cnn1282_add_x_o;
    wire [64:0] i_add_ptr73_13_cnn1282_add_x_q;
    wire [127:0] i_add_ptr73_13_cnn1282_mult_extender_x_q;
    wire [63:0] i_add_ptr73_13_cnn1282_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_13_cnn1282_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_14_cnn1321_add_x_a;
    wire [64:0] i_add_ptr73_14_cnn1321_add_x_b;
    logic [64:0] i_add_ptr73_14_cnn1321_add_x_o;
    wire [64:0] i_add_ptr73_14_cnn1321_add_x_q;
    wire [127:0] i_add_ptr73_14_cnn1321_mult_extender_x_q;
    wire [63:0] i_add_ptr73_14_cnn1321_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_14_cnn1321_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_15_cnn1360_add_x_a;
    wire [64:0] i_add_ptr73_15_cnn1360_add_x_b;
    logic [64:0] i_add_ptr73_15_cnn1360_add_x_o;
    wire [64:0] i_add_ptr73_15_cnn1360_add_x_q;
    wire [127:0] i_add_ptr73_15_cnn1360_mult_extender_x_q;
    wire [63:0] i_add_ptr73_15_cnn1360_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_15_cnn1360_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_10_cnn1173_add_x_a;
    wire [64:0] i_add_ptr73_169_10_cnn1173_add_x_b;
    logic [64:0] i_add_ptr73_169_10_cnn1173_add_x_o;
    wire [64:0] i_add_ptr73_169_10_cnn1173_add_x_q;
    wire [127:0] i_add_ptr73_169_10_cnn1173_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_10_cnn1173_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_10_cnn1173_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_11_cnn1212_add_x_a;
    wire [64:0] i_add_ptr73_169_11_cnn1212_add_x_b;
    logic [64:0] i_add_ptr73_169_11_cnn1212_add_x_o;
    wire [64:0] i_add_ptr73_169_11_cnn1212_add_x_q;
    wire [127:0] i_add_ptr73_169_11_cnn1212_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_11_cnn1212_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_11_cnn1212_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_12_cnn1251_add_x_a;
    wire [64:0] i_add_ptr73_169_12_cnn1251_add_x_b;
    logic [64:0] i_add_ptr73_169_12_cnn1251_add_x_o;
    wire [64:0] i_add_ptr73_169_12_cnn1251_add_x_q;
    wire [127:0] i_add_ptr73_169_12_cnn1251_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_12_cnn1251_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_12_cnn1251_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_13_cnn1290_add_x_a;
    wire [64:0] i_add_ptr73_169_13_cnn1290_add_x_b;
    logic [64:0] i_add_ptr73_169_13_cnn1290_add_x_o;
    wire [64:0] i_add_ptr73_169_13_cnn1290_add_x_q;
    wire [127:0] i_add_ptr73_169_13_cnn1290_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_13_cnn1290_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_13_cnn1290_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_14_cnn1329_add_x_a;
    wire [64:0] i_add_ptr73_169_14_cnn1329_add_x_b;
    logic [64:0] i_add_ptr73_169_14_cnn1329_add_x_o;
    wire [64:0] i_add_ptr73_169_14_cnn1329_add_x_q;
    wire [127:0] i_add_ptr73_169_14_cnn1329_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_14_cnn1329_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_14_cnn1329_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_15_cnn1368_add_x_a;
    wire [64:0] i_add_ptr73_169_15_cnn1368_add_x_b;
    logic [64:0] i_add_ptr73_169_15_cnn1368_add_x_o;
    wire [64:0] i_add_ptr73_169_15_cnn1368_add_x_q;
    wire [127:0] i_add_ptr73_169_15_cnn1368_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_15_cnn1368_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_15_cnn1368_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_1_cnn822_add_x_a;
    wire [64:0] i_add_ptr73_169_1_cnn822_add_x_b;
    logic [64:0] i_add_ptr73_169_1_cnn822_add_x_o;
    wire [64:0] i_add_ptr73_169_1_cnn822_add_x_q;
    wire [127:0] i_add_ptr73_169_1_cnn822_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_1_cnn822_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_1_cnn822_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_2_cnn861_add_x_a;
    wire [64:0] i_add_ptr73_169_2_cnn861_add_x_b;
    logic [64:0] i_add_ptr73_169_2_cnn861_add_x_o;
    wire [64:0] i_add_ptr73_169_2_cnn861_add_x_q;
    wire [127:0] i_add_ptr73_169_2_cnn861_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_2_cnn861_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_2_cnn861_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_3_cnn900_add_x_a;
    wire [64:0] i_add_ptr73_169_3_cnn900_add_x_b;
    logic [64:0] i_add_ptr73_169_3_cnn900_add_x_o;
    wire [64:0] i_add_ptr73_169_3_cnn900_add_x_q;
    wire [127:0] i_add_ptr73_169_3_cnn900_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_3_cnn900_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_3_cnn900_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_4_cnn939_add_x_a;
    wire [64:0] i_add_ptr73_169_4_cnn939_add_x_b;
    logic [64:0] i_add_ptr73_169_4_cnn939_add_x_o;
    wire [64:0] i_add_ptr73_169_4_cnn939_add_x_q;
    wire [127:0] i_add_ptr73_169_4_cnn939_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_4_cnn939_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_4_cnn939_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_5_cnn978_add_x_a;
    wire [64:0] i_add_ptr73_169_5_cnn978_add_x_b;
    logic [64:0] i_add_ptr73_169_5_cnn978_add_x_o;
    wire [64:0] i_add_ptr73_169_5_cnn978_add_x_q;
    wire [127:0] i_add_ptr73_169_5_cnn978_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_5_cnn978_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_5_cnn978_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_6_cnn1017_add_x_a;
    wire [64:0] i_add_ptr73_169_6_cnn1017_add_x_b;
    logic [64:0] i_add_ptr73_169_6_cnn1017_add_x_o;
    wire [64:0] i_add_ptr73_169_6_cnn1017_add_x_q;
    wire [127:0] i_add_ptr73_169_6_cnn1017_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_6_cnn1017_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_6_cnn1017_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_7_cnn1056_add_x_a;
    wire [64:0] i_add_ptr73_169_7_cnn1056_add_x_b;
    logic [64:0] i_add_ptr73_169_7_cnn1056_add_x_o;
    wire [64:0] i_add_ptr73_169_7_cnn1056_add_x_q;
    wire [127:0] i_add_ptr73_169_7_cnn1056_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_7_cnn1056_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_7_cnn1056_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_8_cnn1095_add_x_a;
    wire [64:0] i_add_ptr73_169_8_cnn1095_add_x_b;
    logic [64:0] i_add_ptr73_169_8_cnn1095_add_x_o;
    wire [64:0] i_add_ptr73_169_8_cnn1095_add_x_q;
    wire [127:0] i_add_ptr73_169_8_cnn1095_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_8_cnn1095_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_8_cnn1095_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_9_cnn1134_add_x_a;
    wire [64:0] i_add_ptr73_169_9_cnn1134_add_x_b;
    logic [64:0] i_add_ptr73_169_9_cnn1134_add_x_o;
    wire [64:0] i_add_ptr73_169_9_cnn1134_add_x_q;
    wire [127:0] i_add_ptr73_169_9_cnn1134_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_9_cnn1134_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_9_cnn1134_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_169_cnn783_add_x_a;
    wire [64:0] i_add_ptr73_169_cnn783_add_x_b;
    logic [64:0] i_add_ptr73_169_cnn783_add_x_o;
    wire [64:0] i_add_ptr73_169_cnn783_add_x_q;
    wire [127:0] i_add_ptr73_169_cnn783_mult_extender_x_q;
    wire [63:0] i_add_ptr73_169_cnn783_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_169_cnn783_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_174_cnn814_add_x_a;
    wire [64:0] i_add_ptr73_174_cnn814_add_x_b;
    logic [64:0] i_add_ptr73_174_cnn814_add_x_o;
    wire [64:0] i_add_ptr73_174_cnn814_add_x_q;
    wire [127:0] i_add_ptr73_174_cnn814_mult_extender_x_q;
    wire [63:0] i_add_ptr73_174_cnn814_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_174_cnn814_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_10_cnn1181_add_x_a;
    wire [64:0] i_add_ptr73_270_10_cnn1181_add_x_b;
    logic [64:0] i_add_ptr73_270_10_cnn1181_add_x_o;
    wire [64:0] i_add_ptr73_270_10_cnn1181_add_x_q;
    wire [127:0] i_add_ptr73_270_10_cnn1181_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_10_cnn1181_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_10_cnn1181_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_11_cnn1220_add_x_a;
    wire [64:0] i_add_ptr73_270_11_cnn1220_add_x_b;
    logic [64:0] i_add_ptr73_270_11_cnn1220_add_x_o;
    wire [64:0] i_add_ptr73_270_11_cnn1220_add_x_q;
    wire [127:0] i_add_ptr73_270_11_cnn1220_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_11_cnn1220_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_11_cnn1220_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_12_cnn1259_add_x_a;
    wire [64:0] i_add_ptr73_270_12_cnn1259_add_x_b;
    logic [64:0] i_add_ptr73_270_12_cnn1259_add_x_o;
    wire [64:0] i_add_ptr73_270_12_cnn1259_add_x_q;
    wire [127:0] i_add_ptr73_270_12_cnn1259_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_12_cnn1259_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_12_cnn1259_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_13_cnn1298_add_x_a;
    wire [64:0] i_add_ptr73_270_13_cnn1298_add_x_b;
    logic [64:0] i_add_ptr73_270_13_cnn1298_add_x_o;
    wire [64:0] i_add_ptr73_270_13_cnn1298_add_x_q;
    wire [127:0] i_add_ptr73_270_13_cnn1298_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_13_cnn1298_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_13_cnn1298_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_14_cnn1337_add_x_a;
    wire [64:0] i_add_ptr73_270_14_cnn1337_add_x_b;
    logic [64:0] i_add_ptr73_270_14_cnn1337_add_x_o;
    wire [64:0] i_add_ptr73_270_14_cnn1337_add_x_q;
    wire [127:0] i_add_ptr73_270_14_cnn1337_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_14_cnn1337_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_14_cnn1337_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_15_cnn1376_add_x_a;
    wire [64:0] i_add_ptr73_270_15_cnn1376_add_x_b;
    logic [64:0] i_add_ptr73_270_15_cnn1376_add_x_o;
    wire [64:0] i_add_ptr73_270_15_cnn1376_add_x_q;
    wire [127:0] i_add_ptr73_270_15_cnn1376_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_15_cnn1376_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_15_cnn1376_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_1_cnn830_add_x_a;
    wire [64:0] i_add_ptr73_270_1_cnn830_add_x_b;
    logic [64:0] i_add_ptr73_270_1_cnn830_add_x_o;
    wire [64:0] i_add_ptr73_270_1_cnn830_add_x_q;
    wire [127:0] i_add_ptr73_270_1_cnn830_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_1_cnn830_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_1_cnn830_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_2_cnn869_add_x_a;
    wire [64:0] i_add_ptr73_270_2_cnn869_add_x_b;
    logic [64:0] i_add_ptr73_270_2_cnn869_add_x_o;
    wire [64:0] i_add_ptr73_270_2_cnn869_add_x_q;
    wire [127:0] i_add_ptr73_270_2_cnn869_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_2_cnn869_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_2_cnn869_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_3_cnn908_add_x_a;
    wire [64:0] i_add_ptr73_270_3_cnn908_add_x_b;
    logic [64:0] i_add_ptr73_270_3_cnn908_add_x_o;
    wire [64:0] i_add_ptr73_270_3_cnn908_add_x_q;
    wire [127:0] i_add_ptr73_270_3_cnn908_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_3_cnn908_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_3_cnn908_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_4_cnn947_add_x_a;
    wire [64:0] i_add_ptr73_270_4_cnn947_add_x_b;
    logic [64:0] i_add_ptr73_270_4_cnn947_add_x_o;
    wire [64:0] i_add_ptr73_270_4_cnn947_add_x_q;
    wire [127:0] i_add_ptr73_270_4_cnn947_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_4_cnn947_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_4_cnn947_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_5_cnn986_add_x_a;
    wire [64:0] i_add_ptr73_270_5_cnn986_add_x_b;
    logic [64:0] i_add_ptr73_270_5_cnn986_add_x_o;
    wire [64:0] i_add_ptr73_270_5_cnn986_add_x_q;
    wire [127:0] i_add_ptr73_270_5_cnn986_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_5_cnn986_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_5_cnn986_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_6_cnn1025_add_x_a;
    wire [64:0] i_add_ptr73_270_6_cnn1025_add_x_b;
    logic [64:0] i_add_ptr73_270_6_cnn1025_add_x_o;
    wire [64:0] i_add_ptr73_270_6_cnn1025_add_x_q;
    wire [127:0] i_add_ptr73_270_6_cnn1025_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_6_cnn1025_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_6_cnn1025_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_7_cnn1064_add_x_a;
    wire [64:0] i_add_ptr73_270_7_cnn1064_add_x_b;
    logic [64:0] i_add_ptr73_270_7_cnn1064_add_x_o;
    wire [64:0] i_add_ptr73_270_7_cnn1064_add_x_q;
    wire [127:0] i_add_ptr73_270_7_cnn1064_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_7_cnn1064_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_7_cnn1064_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_8_cnn1103_add_x_a;
    wire [64:0] i_add_ptr73_270_8_cnn1103_add_x_b;
    logic [64:0] i_add_ptr73_270_8_cnn1103_add_x_o;
    wire [64:0] i_add_ptr73_270_8_cnn1103_add_x_q;
    wire [127:0] i_add_ptr73_270_8_cnn1103_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_8_cnn1103_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_8_cnn1103_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_9_cnn1142_add_x_a;
    wire [64:0] i_add_ptr73_270_9_cnn1142_add_x_b;
    logic [64:0] i_add_ptr73_270_9_cnn1142_add_x_o;
    wire [64:0] i_add_ptr73_270_9_cnn1142_add_x_q;
    wire [127:0] i_add_ptr73_270_9_cnn1142_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_9_cnn1142_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_9_cnn1142_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_270_cnn791_add_x_a;
    wire [64:0] i_add_ptr73_270_cnn791_add_x_b;
    logic [64:0] i_add_ptr73_270_cnn791_add_x_o;
    wire [64:0] i_add_ptr73_270_cnn791_add_x_q;
    wire [127:0] i_add_ptr73_270_cnn791_mult_extender_x_q;
    wire [63:0] i_add_ptr73_270_cnn791_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_270_cnn791_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_287_cnn853_add_x_a;
    wire [64:0] i_add_ptr73_287_cnn853_add_x_b;
    logic [64:0] i_add_ptr73_287_cnn853_add_x_o;
    wire [64:0] i_add_ptr73_287_cnn853_add_x_q;
    wire [127:0] i_add_ptr73_287_cnn853_mult_extender_x_q;
    wire [63:0] i_add_ptr73_287_cnn853_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_287_cnn853_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_3100_cnn892_add_x_a;
    wire [64:0] i_add_ptr73_3100_cnn892_add_x_b;
    logic [64:0] i_add_ptr73_3100_cnn892_add_x_o;
    wire [64:0] i_add_ptr73_3100_cnn892_add_x_q;
    wire [127:0] i_add_ptr73_3100_cnn892_mult_extender_x_q;
    wire [63:0] i_add_ptr73_3100_cnn892_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_3100_cnn892_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_10_cnn1189_add_x_a;
    wire [64:0] i_add_ptr73_371_10_cnn1189_add_x_b;
    logic [64:0] i_add_ptr73_371_10_cnn1189_add_x_o;
    wire [64:0] i_add_ptr73_371_10_cnn1189_add_x_q;
    wire [127:0] i_add_ptr73_371_10_cnn1189_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_10_cnn1189_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_10_cnn1189_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_11_cnn1228_add_x_a;
    wire [64:0] i_add_ptr73_371_11_cnn1228_add_x_b;
    logic [64:0] i_add_ptr73_371_11_cnn1228_add_x_o;
    wire [64:0] i_add_ptr73_371_11_cnn1228_add_x_q;
    wire [127:0] i_add_ptr73_371_11_cnn1228_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_11_cnn1228_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_11_cnn1228_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_12_cnn1267_add_x_a;
    wire [64:0] i_add_ptr73_371_12_cnn1267_add_x_b;
    logic [64:0] i_add_ptr73_371_12_cnn1267_add_x_o;
    wire [64:0] i_add_ptr73_371_12_cnn1267_add_x_q;
    wire [127:0] i_add_ptr73_371_12_cnn1267_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_12_cnn1267_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_12_cnn1267_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_13_cnn1306_add_x_a;
    wire [64:0] i_add_ptr73_371_13_cnn1306_add_x_b;
    logic [64:0] i_add_ptr73_371_13_cnn1306_add_x_o;
    wire [64:0] i_add_ptr73_371_13_cnn1306_add_x_q;
    wire [127:0] i_add_ptr73_371_13_cnn1306_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_13_cnn1306_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_13_cnn1306_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_14_cnn1345_add_x_a;
    wire [64:0] i_add_ptr73_371_14_cnn1345_add_x_b;
    logic [64:0] i_add_ptr73_371_14_cnn1345_add_x_o;
    wire [64:0] i_add_ptr73_371_14_cnn1345_add_x_q;
    wire [127:0] i_add_ptr73_371_14_cnn1345_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_14_cnn1345_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_14_cnn1345_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_15_cnn1384_add_x_a;
    wire [64:0] i_add_ptr73_371_15_cnn1384_add_x_b;
    logic [64:0] i_add_ptr73_371_15_cnn1384_add_x_o;
    wire [64:0] i_add_ptr73_371_15_cnn1384_add_x_q;
    wire [127:0] i_add_ptr73_371_15_cnn1384_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_15_cnn1384_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_15_cnn1384_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_1_cnn838_add_x_a;
    wire [64:0] i_add_ptr73_371_1_cnn838_add_x_b;
    logic [64:0] i_add_ptr73_371_1_cnn838_add_x_o;
    wire [64:0] i_add_ptr73_371_1_cnn838_add_x_q;
    wire [127:0] i_add_ptr73_371_1_cnn838_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_1_cnn838_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_1_cnn838_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_2_cnn877_add_x_a;
    wire [64:0] i_add_ptr73_371_2_cnn877_add_x_b;
    logic [64:0] i_add_ptr73_371_2_cnn877_add_x_o;
    wire [64:0] i_add_ptr73_371_2_cnn877_add_x_q;
    wire [127:0] i_add_ptr73_371_2_cnn877_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_2_cnn877_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_2_cnn877_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_3_cnn916_add_x_a;
    wire [64:0] i_add_ptr73_371_3_cnn916_add_x_b;
    logic [64:0] i_add_ptr73_371_3_cnn916_add_x_o;
    wire [64:0] i_add_ptr73_371_3_cnn916_add_x_q;
    wire [127:0] i_add_ptr73_371_3_cnn916_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_3_cnn916_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_3_cnn916_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_4_cnn955_add_x_a;
    wire [64:0] i_add_ptr73_371_4_cnn955_add_x_b;
    logic [64:0] i_add_ptr73_371_4_cnn955_add_x_o;
    wire [64:0] i_add_ptr73_371_4_cnn955_add_x_q;
    wire [127:0] i_add_ptr73_371_4_cnn955_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_4_cnn955_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_4_cnn955_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_5_cnn994_add_x_a;
    wire [64:0] i_add_ptr73_371_5_cnn994_add_x_b;
    logic [64:0] i_add_ptr73_371_5_cnn994_add_x_o;
    wire [64:0] i_add_ptr73_371_5_cnn994_add_x_q;
    wire [127:0] i_add_ptr73_371_5_cnn994_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_5_cnn994_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_5_cnn994_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_6_cnn1033_add_x_a;
    wire [64:0] i_add_ptr73_371_6_cnn1033_add_x_b;
    logic [64:0] i_add_ptr73_371_6_cnn1033_add_x_o;
    wire [64:0] i_add_ptr73_371_6_cnn1033_add_x_q;
    wire [127:0] i_add_ptr73_371_6_cnn1033_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_6_cnn1033_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_6_cnn1033_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_7_cnn1072_add_x_a;
    wire [64:0] i_add_ptr73_371_7_cnn1072_add_x_b;
    logic [64:0] i_add_ptr73_371_7_cnn1072_add_x_o;
    wire [64:0] i_add_ptr73_371_7_cnn1072_add_x_q;
    wire [127:0] i_add_ptr73_371_7_cnn1072_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_7_cnn1072_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_7_cnn1072_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_8_cnn1111_add_x_a;
    wire [64:0] i_add_ptr73_371_8_cnn1111_add_x_b;
    logic [64:0] i_add_ptr73_371_8_cnn1111_add_x_o;
    wire [64:0] i_add_ptr73_371_8_cnn1111_add_x_q;
    wire [127:0] i_add_ptr73_371_8_cnn1111_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_8_cnn1111_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_8_cnn1111_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_9_cnn1150_add_x_a;
    wire [64:0] i_add_ptr73_371_9_cnn1150_add_x_b;
    logic [64:0] i_add_ptr73_371_9_cnn1150_add_x_o;
    wire [64:0] i_add_ptr73_371_9_cnn1150_add_x_q;
    wire [127:0] i_add_ptr73_371_9_cnn1150_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_9_cnn1150_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_9_cnn1150_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_371_cnn799_add_x_a;
    wire [64:0] i_add_ptr73_371_cnn799_add_x_b;
    logic [64:0] i_add_ptr73_371_cnn799_add_x_o;
    wire [64:0] i_add_ptr73_371_cnn799_add_x_q;
    wire [127:0] i_add_ptr73_371_cnn799_mult_extender_x_q;
    wire [63:0] i_add_ptr73_371_cnn799_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_371_cnn799_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_4_cnn931_add_x_a;
    wire [64:0] i_add_ptr73_4_cnn931_add_x_b;
    logic [64:0] i_add_ptr73_4_cnn931_add_x_o;
    wire [64:0] i_add_ptr73_4_cnn931_add_x_q;
    wire [127:0] i_add_ptr73_4_cnn931_mult_extender_x_q;
    wire [63:0] i_add_ptr73_4_cnn931_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_4_cnn931_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_5_cnn970_add_x_a;
    wire [64:0] i_add_ptr73_5_cnn970_add_x_b;
    logic [64:0] i_add_ptr73_5_cnn970_add_x_o;
    wire [64:0] i_add_ptr73_5_cnn970_add_x_q;
    wire [127:0] i_add_ptr73_5_cnn970_mult_extender_x_q;
    wire [63:0] i_add_ptr73_5_cnn970_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_5_cnn970_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_6_cnn1009_add_x_a;
    wire [64:0] i_add_ptr73_6_cnn1009_add_x_b;
    logic [64:0] i_add_ptr73_6_cnn1009_add_x_o;
    wire [64:0] i_add_ptr73_6_cnn1009_add_x_q;
    wire [127:0] i_add_ptr73_6_cnn1009_mult_extender_x_q;
    wire [63:0] i_add_ptr73_6_cnn1009_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_6_cnn1009_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_7_cnn1048_add_x_a;
    wire [64:0] i_add_ptr73_7_cnn1048_add_x_b;
    logic [64:0] i_add_ptr73_7_cnn1048_add_x_o;
    wire [64:0] i_add_ptr73_7_cnn1048_add_x_q;
    wire [127:0] i_add_ptr73_7_cnn1048_mult_extender_x_q;
    wire [63:0] i_add_ptr73_7_cnn1048_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_7_cnn1048_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_8_cnn1087_add_x_a;
    wire [64:0] i_add_ptr73_8_cnn1087_add_x_b;
    logic [64:0] i_add_ptr73_8_cnn1087_add_x_o;
    wire [64:0] i_add_ptr73_8_cnn1087_add_x_q;
    wire [127:0] i_add_ptr73_8_cnn1087_mult_extender_x_q;
    wire [63:0] i_add_ptr73_8_cnn1087_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_8_cnn1087_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_9_cnn1126_add_x_a;
    wire [64:0] i_add_ptr73_9_cnn1126_add_x_b;
    logic [64:0] i_add_ptr73_9_cnn1126_add_x_o;
    wire [64:0] i_add_ptr73_9_cnn1126_add_x_q;
    wire [127:0] i_add_ptr73_9_cnn1126_mult_extender_x_q;
    wire [63:0] i_add_ptr73_9_cnn1126_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_9_cnn1126_dupName_0_trunc_sel_x_b;
    wire [64:0] i_add_ptr73_cnn775_add_x_a;
    wire [64:0] i_add_ptr73_cnn775_add_x_b;
    logic [64:0] i_add_ptr73_cnn775_add_x_o;
    wire [64:0] i_add_ptr73_cnn775_add_x_q;
    wire [127:0] i_add_ptr73_cnn775_mult_extender_x_q;
    wire [63:0] i_add_ptr73_cnn775_trunc_sel_x_b;
    wire [63:0] i_add_ptr73_cnn775_dupName_0_trunc_sel_x_b;
    wire [127:0] i_mul65_10_cnn1156_extender_x_q;
    wire [54:0] i_mul65_10_cnn1156_multconst_x_q;
    wire [127:0] i_mul65_11_cnn1195_extender_x_q;
    wire [127:0] i_mul65_12_cnn1234_extender_x_q;
    wire [127:0] i_mul65_13_cnn1273_extender_x_q;
    wire [127:0] i_mul65_14_cnn1312_extender_x_q;
    wire [127:0] i_mul65_15_cnn1351_extender_x_q;
    wire [127:0] i_mul65_1_cnn805_extender_x_q;
    wire [127:0] i_mul65_2_cnn844_extender_x_q;
    wire [127:0] i_mul65_3_cnn883_extender_x_q;
    wire [127:0] i_mul65_4_cnn922_extender_x_q;
    wire [127:0] i_mul65_5_cnn961_extender_x_q;
    wire [127:0] i_mul65_6_cnn1000_extender_x_q;
    wire [127:0] i_mul65_7_cnn1039_extender_x_q;
    wire [127:0] i_mul65_8_cnn1078_extender_x_q;
    wire [127:0] i_mul65_9_cnn1117_extender_x_q;
    wire [127:0] i_mul65_cnn759_extender_x_q;
    wire [10:0] i_mul65_10_cnn1156_bjA2_q;
    wire [18:0] i_mul65_10_cnn1156_bjA7_q;
    wire [18:0] i_mul65_10_cnn1156_bjA12_q;
    wire [18:0] i_mul65_10_cnn1156_bjA17_q;
    wire [46:0] i_mul65_10_cnn1156_sums_align_1_q;
    wire [46:0] i_mul65_10_cnn1156_sums_align_1_qint;
    wire [64:0] i_mul65_10_cnn1156_sums_align_3_q;
    wire [64:0] i_mul65_10_cnn1156_sums_align_3_qint;
    wire [74:0] i_mul65_10_cnn1156_sums_align_5_q;
    wire [74:0] i_mul65_10_cnn1156_sums_align_5_qint;
    wire [47:0] i_mul65_10_cnn1156_sums_result_add_0_0_a;
    wire [47:0] i_mul65_10_cnn1156_sums_result_add_0_0_b;
    logic [47:0] i_mul65_10_cnn1156_sums_result_add_0_0_o;
    wire [47:0] i_mul65_10_cnn1156_sums_result_add_0_0_q;
    wire [10:0] i_mul65_11_cnn1195_bjA2_q;
    wire [18:0] i_mul65_11_cnn1195_bjA7_q;
    wire [18:0] i_mul65_11_cnn1195_bjA12_q;
    wire [18:0] i_mul65_11_cnn1195_bjA17_q;
    wire [46:0] i_mul65_11_cnn1195_sums_align_1_q;
    wire [46:0] i_mul65_11_cnn1195_sums_align_1_qint;
    wire [64:0] i_mul65_11_cnn1195_sums_align_3_q;
    wire [64:0] i_mul65_11_cnn1195_sums_align_3_qint;
    wire [74:0] i_mul65_11_cnn1195_sums_align_5_q;
    wire [74:0] i_mul65_11_cnn1195_sums_align_5_qint;
    wire [47:0] i_mul65_11_cnn1195_sums_result_add_0_0_a;
    wire [47:0] i_mul65_11_cnn1195_sums_result_add_0_0_b;
    logic [47:0] i_mul65_11_cnn1195_sums_result_add_0_0_o;
    wire [47:0] i_mul65_11_cnn1195_sums_result_add_0_0_q;
    wire [10:0] i_mul65_12_cnn1234_bjA2_q;
    wire [18:0] i_mul65_12_cnn1234_bjA7_q;
    wire [18:0] i_mul65_12_cnn1234_bjA12_q;
    wire [18:0] i_mul65_12_cnn1234_bjA17_q;
    wire [46:0] i_mul65_12_cnn1234_sums_align_1_q;
    wire [46:0] i_mul65_12_cnn1234_sums_align_1_qint;
    wire [64:0] i_mul65_12_cnn1234_sums_align_3_q;
    wire [64:0] i_mul65_12_cnn1234_sums_align_3_qint;
    wire [74:0] i_mul65_12_cnn1234_sums_align_5_q;
    wire [74:0] i_mul65_12_cnn1234_sums_align_5_qint;
    wire [47:0] i_mul65_12_cnn1234_sums_result_add_0_0_a;
    wire [47:0] i_mul65_12_cnn1234_sums_result_add_0_0_b;
    logic [47:0] i_mul65_12_cnn1234_sums_result_add_0_0_o;
    wire [47:0] i_mul65_12_cnn1234_sums_result_add_0_0_q;
    wire [10:0] i_mul65_13_cnn1273_bjA2_q;
    wire [18:0] i_mul65_13_cnn1273_bjA7_q;
    wire [18:0] i_mul65_13_cnn1273_bjA12_q;
    wire [18:0] i_mul65_13_cnn1273_bjA17_q;
    wire [46:0] i_mul65_13_cnn1273_sums_align_1_q;
    wire [46:0] i_mul65_13_cnn1273_sums_align_1_qint;
    wire [64:0] i_mul65_13_cnn1273_sums_align_3_q;
    wire [64:0] i_mul65_13_cnn1273_sums_align_3_qint;
    wire [74:0] i_mul65_13_cnn1273_sums_align_5_q;
    wire [74:0] i_mul65_13_cnn1273_sums_align_5_qint;
    wire [47:0] i_mul65_13_cnn1273_sums_result_add_0_0_a;
    wire [47:0] i_mul65_13_cnn1273_sums_result_add_0_0_b;
    logic [47:0] i_mul65_13_cnn1273_sums_result_add_0_0_o;
    wire [47:0] i_mul65_13_cnn1273_sums_result_add_0_0_q;
    wire [10:0] i_mul65_14_cnn1312_bjA2_q;
    wire [18:0] i_mul65_14_cnn1312_bjA7_q;
    wire [18:0] i_mul65_14_cnn1312_bjA12_q;
    wire [18:0] i_mul65_14_cnn1312_bjA17_q;
    wire [46:0] i_mul65_14_cnn1312_sums_align_1_q;
    wire [46:0] i_mul65_14_cnn1312_sums_align_1_qint;
    wire [64:0] i_mul65_14_cnn1312_sums_align_3_q;
    wire [64:0] i_mul65_14_cnn1312_sums_align_3_qint;
    wire [74:0] i_mul65_14_cnn1312_sums_align_5_q;
    wire [74:0] i_mul65_14_cnn1312_sums_align_5_qint;
    wire [47:0] i_mul65_14_cnn1312_sums_result_add_0_0_a;
    wire [47:0] i_mul65_14_cnn1312_sums_result_add_0_0_b;
    logic [47:0] i_mul65_14_cnn1312_sums_result_add_0_0_o;
    wire [47:0] i_mul65_14_cnn1312_sums_result_add_0_0_q;
    wire [10:0] i_mul65_15_cnn1351_bjA2_q;
    wire [18:0] i_mul65_15_cnn1351_bjA7_q;
    wire [18:0] i_mul65_15_cnn1351_bjA12_q;
    wire [18:0] i_mul65_15_cnn1351_bjA17_q;
    wire [46:0] i_mul65_15_cnn1351_sums_align_1_q;
    wire [46:0] i_mul65_15_cnn1351_sums_align_1_qint;
    wire [64:0] i_mul65_15_cnn1351_sums_align_3_q;
    wire [64:0] i_mul65_15_cnn1351_sums_align_3_qint;
    wire [74:0] i_mul65_15_cnn1351_sums_align_5_q;
    wire [74:0] i_mul65_15_cnn1351_sums_align_5_qint;
    wire [47:0] i_mul65_15_cnn1351_sums_result_add_0_0_a;
    wire [47:0] i_mul65_15_cnn1351_sums_result_add_0_0_b;
    logic [47:0] i_mul65_15_cnn1351_sums_result_add_0_0_o;
    wire [47:0] i_mul65_15_cnn1351_sums_result_add_0_0_q;
    wire [10:0] i_mul65_1_cnn805_bjA2_q;
    wire [18:0] i_mul65_1_cnn805_bjA7_q;
    wire [18:0] i_mul65_1_cnn805_bjA12_q;
    wire [18:0] i_mul65_1_cnn805_bjA17_q;
    wire [46:0] i_mul65_1_cnn805_sums_align_1_q;
    wire [46:0] i_mul65_1_cnn805_sums_align_1_qint;
    wire [64:0] i_mul65_1_cnn805_sums_align_3_q;
    wire [64:0] i_mul65_1_cnn805_sums_align_3_qint;
    wire [74:0] i_mul65_1_cnn805_sums_align_5_q;
    wire [74:0] i_mul65_1_cnn805_sums_align_5_qint;
    wire [47:0] i_mul65_1_cnn805_sums_result_add_0_0_a;
    wire [47:0] i_mul65_1_cnn805_sums_result_add_0_0_b;
    logic [47:0] i_mul65_1_cnn805_sums_result_add_0_0_o;
    wire [47:0] i_mul65_1_cnn805_sums_result_add_0_0_q;
    wire [10:0] i_mul65_2_cnn844_bjA2_q;
    wire [18:0] i_mul65_2_cnn844_bjA7_q;
    wire [18:0] i_mul65_2_cnn844_bjA12_q;
    wire [18:0] i_mul65_2_cnn844_bjA17_q;
    wire [46:0] i_mul65_2_cnn844_sums_align_1_q;
    wire [46:0] i_mul65_2_cnn844_sums_align_1_qint;
    wire [64:0] i_mul65_2_cnn844_sums_align_3_q;
    wire [64:0] i_mul65_2_cnn844_sums_align_3_qint;
    wire [74:0] i_mul65_2_cnn844_sums_align_5_q;
    wire [74:0] i_mul65_2_cnn844_sums_align_5_qint;
    wire [47:0] i_mul65_2_cnn844_sums_result_add_0_0_a;
    wire [47:0] i_mul65_2_cnn844_sums_result_add_0_0_b;
    logic [47:0] i_mul65_2_cnn844_sums_result_add_0_0_o;
    wire [47:0] i_mul65_2_cnn844_sums_result_add_0_0_q;
    wire [10:0] i_mul65_3_cnn883_bjA2_q;
    wire [18:0] i_mul65_3_cnn883_bjA7_q;
    wire [18:0] i_mul65_3_cnn883_bjA12_q;
    wire [18:0] i_mul65_3_cnn883_bjA17_q;
    wire [46:0] i_mul65_3_cnn883_sums_align_1_q;
    wire [46:0] i_mul65_3_cnn883_sums_align_1_qint;
    wire [64:0] i_mul65_3_cnn883_sums_align_3_q;
    wire [64:0] i_mul65_3_cnn883_sums_align_3_qint;
    wire [74:0] i_mul65_3_cnn883_sums_align_5_q;
    wire [74:0] i_mul65_3_cnn883_sums_align_5_qint;
    wire [47:0] i_mul65_3_cnn883_sums_result_add_0_0_a;
    wire [47:0] i_mul65_3_cnn883_sums_result_add_0_0_b;
    logic [47:0] i_mul65_3_cnn883_sums_result_add_0_0_o;
    wire [47:0] i_mul65_3_cnn883_sums_result_add_0_0_q;
    wire [10:0] i_mul65_4_cnn922_bjA2_q;
    wire [18:0] i_mul65_4_cnn922_bjA7_q;
    wire [18:0] i_mul65_4_cnn922_bjA12_q;
    wire [18:0] i_mul65_4_cnn922_bjA17_q;
    wire [46:0] i_mul65_4_cnn922_sums_align_1_q;
    wire [46:0] i_mul65_4_cnn922_sums_align_1_qint;
    wire [64:0] i_mul65_4_cnn922_sums_align_3_q;
    wire [64:0] i_mul65_4_cnn922_sums_align_3_qint;
    wire [74:0] i_mul65_4_cnn922_sums_align_5_q;
    wire [74:0] i_mul65_4_cnn922_sums_align_5_qint;
    wire [47:0] i_mul65_4_cnn922_sums_result_add_0_0_a;
    wire [47:0] i_mul65_4_cnn922_sums_result_add_0_0_b;
    logic [47:0] i_mul65_4_cnn922_sums_result_add_0_0_o;
    wire [47:0] i_mul65_4_cnn922_sums_result_add_0_0_q;
    wire [10:0] i_mul65_5_cnn961_bjA2_q;
    wire [18:0] i_mul65_5_cnn961_bjA7_q;
    wire [18:0] i_mul65_5_cnn961_bjA12_q;
    wire [18:0] i_mul65_5_cnn961_bjA17_q;
    wire [46:0] i_mul65_5_cnn961_sums_align_1_q;
    wire [46:0] i_mul65_5_cnn961_sums_align_1_qint;
    wire [64:0] i_mul65_5_cnn961_sums_align_3_q;
    wire [64:0] i_mul65_5_cnn961_sums_align_3_qint;
    wire [74:0] i_mul65_5_cnn961_sums_align_5_q;
    wire [74:0] i_mul65_5_cnn961_sums_align_5_qint;
    wire [47:0] i_mul65_5_cnn961_sums_result_add_0_0_a;
    wire [47:0] i_mul65_5_cnn961_sums_result_add_0_0_b;
    logic [47:0] i_mul65_5_cnn961_sums_result_add_0_0_o;
    wire [47:0] i_mul65_5_cnn961_sums_result_add_0_0_q;
    wire [10:0] i_mul65_6_cnn1000_bjA2_q;
    wire [18:0] i_mul65_6_cnn1000_bjA7_q;
    wire [18:0] i_mul65_6_cnn1000_bjA12_q;
    wire [18:0] i_mul65_6_cnn1000_bjA17_q;
    wire [46:0] i_mul65_6_cnn1000_sums_align_1_q;
    wire [46:0] i_mul65_6_cnn1000_sums_align_1_qint;
    wire [64:0] i_mul65_6_cnn1000_sums_align_3_q;
    wire [64:0] i_mul65_6_cnn1000_sums_align_3_qint;
    wire [74:0] i_mul65_6_cnn1000_sums_align_5_q;
    wire [74:0] i_mul65_6_cnn1000_sums_align_5_qint;
    wire [47:0] i_mul65_6_cnn1000_sums_result_add_0_0_a;
    wire [47:0] i_mul65_6_cnn1000_sums_result_add_0_0_b;
    logic [47:0] i_mul65_6_cnn1000_sums_result_add_0_0_o;
    wire [47:0] i_mul65_6_cnn1000_sums_result_add_0_0_q;
    wire [10:0] i_mul65_7_cnn1039_bjA2_q;
    wire [18:0] i_mul65_7_cnn1039_bjA7_q;
    wire [18:0] i_mul65_7_cnn1039_bjA12_q;
    wire [18:0] i_mul65_7_cnn1039_bjA17_q;
    wire [46:0] i_mul65_7_cnn1039_sums_align_1_q;
    wire [46:0] i_mul65_7_cnn1039_sums_align_1_qint;
    wire [64:0] i_mul65_7_cnn1039_sums_align_3_q;
    wire [64:0] i_mul65_7_cnn1039_sums_align_3_qint;
    wire [74:0] i_mul65_7_cnn1039_sums_align_5_q;
    wire [74:0] i_mul65_7_cnn1039_sums_align_5_qint;
    wire [47:0] i_mul65_7_cnn1039_sums_result_add_0_0_a;
    wire [47:0] i_mul65_7_cnn1039_sums_result_add_0_0_b;
    logic [47:0] i_mul65_7_cnn1039_sums_result_add_0_0_o;
    wire [47:0] i_mul65_7_cnn1039_sums_result_add_0_0_q;
    wire [10:0] i_mul65_8_cnn1078_bjA2_q;
    wire [18:0] i_mul65_8_cnn1078_bjA7_q;
    wire [18:0] i_mul65_8_cnn1078_bjA12_q;
    wire [18:0] i_mul65_8_cnn1078_bjA17_q;
    wire [46:0] i_mul65_8_cnn1078_sums_align_1_q;
    wire [46:0] i_mul65_8_cnn1078_sums_align_1_qint;
    wire [64:0] i_mul65_8_cnn1078_sums_align_3_q;
    wire [64:0] i_mul65_8_cnn1078_sums_align_3_qint;
    wire [74:0] i_mul65_8_cnn1078_sums_align_5_q;
    wire [74:0] i_mul65_8_cnn1078_sums_align_5_qint;
    wire [47:0] i_mul65_8_cnn1078_sums_result_add_0_0_a;
    wire [47:0] i_mul65_8_cnn1078_sums_result_add_0_0_b;
    logic [47:0] i_mul65_8_cnn1078_sums_result_add_0_0_o;
    wire [47:0] i_mul65_8_cnn1078_sums_result_add_0_0_q;
    wire [10:0] i_mul65_9_cnn1117_bjA2_q;
    wire [18:0] i_mul65_9_cnn1117_bjA7_q;
    wire [18:0] i_mul65_9_cnn1117_bjA12_q;
    wire [18:0] i_mul65_9_cnn1117_bjA17_q;
    wire [46:0] i_mul65_9_cnn1117_sums_align_1_q;
    wire [46:0] i_mul65_9_cnn1117_sums_align_1_qint;
    wire [64:0] i_mul65_9_cnn1117_sums_align_3_q;
    wire [64:0] i_mul65_9_cnn1117_sums_align_3_qint;
    wire [74:0] i_mul65_9_cnn1117_sums_align_5_q;
    wire [74:0] i_mul65_9_cnn1117_sums_align_5_qint;
    wire [47:0] i_mul65_9_cnn1117_sums_result_add_0_0_a;
    wire [47:0] i_mul65_9_cnn1117_sums_result_add_0_0_b;
    logic [47:0] i_mul65_9_cnn1117_sums_result_add_0_0_o;
    wire [47:0] i_mul65_9_cnn1117_sums_result_add_0_0_q;
    wire [9:0] i_mul65_cnn759_bs1_b;
    wire [10:0] i_mul65_cnn759_bjA2_q;
    wire [53:0] i_mul65_cnn759_bs6_in;
    wire [17:0] i_mul65_cnn759_bs6_b;
    wire [18:0] i_mul65_cnn759_bjA7_q;
    wire [35:0] i_mul65_cnn759_bs11_in;
    wire [17:0] i_mul65_cnn759_bs11_b;
    wire [18:0] i_mul65_cnn759_bjA12_q;
    wire [17:0] i_mul65_cnn759_bs16_in;
    wire [17:0] i_mul65_cnn759_bs16_b;
    wire [18:0] i_mul65_cnn759_bjA17_q;
    wire [46:0] i_mul65_cnn759_sums_align_1_q;
    wire [46:0] i_mul65_cnn759_sums_align_1_qint;
    wire [64:0] i_mul65_cnn759_sums_align_3_q;
    wire [64:0] i_mul65_cnn759_sums_align_3_qint;
    wire [74:0] i_mul65_cnn759_sums_align_5_q;
    wire [74:0] i_mul65_cnn759_sums_align_5_qint;
    wire [47:0] i_mul65_cnn759_sums_result_add_0_0_a;
    wire [47:0] i_mul65_cnn759_sums_result_add_0_0_b;
    logic [47:0] i_mul65_cnn759_sums_result_add_0_0_o;
    wire [47:0] i_mul65_cnn759_sums_result_add_0_0_q;
    wire [10:0] i_add_ptr59_cnn758_mult_x_bjA2_q;
    wire [18:0] i_add_ptr59_cnn758_mult_x_bjA7_q;
    wire [18:0] i_add_ptr59_cnn758_mult_x_bjA12_q;
    wire [18:0] i_add_ptr59_cnn758_mult_x_bjA17_q;
    wire [40:0] i_add_ptr59_cnn758_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr59_cnn758_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr59_cnn758_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr59_cnn758_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr59_cnn758_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr59_cnn758_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_10_cnn1161_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_10_cnn1161_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_10_cnn1161_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_10_cnn1161_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_10_cnn1161_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_10_cnn1161_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_10_cnn1161_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_10_cnn1161_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_10_cnn1161_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_10_cnn1161_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_11_cnn1200_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_11_cnn1200_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_11_cnn1200_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_11_cnn1200_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_11_cnn1200_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_11_cnn1200_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_11_cnn1200_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_11_cnn1200_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_11_cnn1200_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_11_cnn1200_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_12_cnn1239_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_12_cnn1239_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_12_cnn1239_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_12_cnn1239_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_12_cnn1239_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_12_cnn1239_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_12_cnn1239_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_12_cnn1239_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_12_cnn1239_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_12_cnn1239_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_13_cnn1278_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_13_cnn1278_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_13_cnn1278_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_13_cnn1278_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_13_cnn1278_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_13_cnn1278_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_13_cnn1278_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_13_cnn1278_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_13_cnn1278_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_13_cnn1278_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_14_cnn1317_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_14_cnn1317_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_14_cnn1317_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_14_cnn1317_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_14_cnn1317_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_14_cnn1317_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_14_cnn1317_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_14_cnn1317_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_14_cnn1317_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_14_cnn1317_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_15_cnn1356_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_15_cnn1356_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_15_cnn1356_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_15_cnn1356_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_15_cnn1356_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_15_cnn1356_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_15_cnn1356_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_15_cnn1356_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_15_cnn1356_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_15_cnn1356_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_1_cnn810_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_1_cnn810_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_1_cnn810_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_1_cnn810_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_1_cnn810_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_1_cnn810_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_1_cnn810_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_1_cnn810_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_1_cnn810_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_1_cnn810_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_2_cnn849_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_2_cnn849_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_2_cnn849_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_2_cnn849_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_2_cnn849_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_2_cnn849_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_2_cnn849_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_2_cnn849_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_2_cnn849_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_2_cnn849_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_3_cnn888_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_3_cnn888_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_3_cnn888_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_3_cnn888_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_3_cnn888_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_3_cnn888_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_3_cnn888_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_3_cnn888_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_3_cnn888_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_3_cnn888_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_4_cnn927_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_4_cnn927_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_4_cnn927_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_4_cnn927_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_4_cnn927_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_4_cnn927_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_4_cnn927_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_4_cnn927_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_4_cnn927_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_4_cnn927_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_5_cnn966_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_5_cnn966_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_5_cnn966_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_5_cnn966_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_5_cnn966_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_5_cnn966_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_5_cnn966_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_5_cnn966_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_5_cnn966_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_5_cnn966_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_6_cnn1005_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_6_cnn1005_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_6_cnn1005_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_6_cnn1005_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_6_cnn1005_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_6_cnn1005_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_6_cnn1005_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_6_cnn1005_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_6_cnn1005_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_6_cnn1005_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_7_cnn1044_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_7_cnn1044_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_7_cnn1044_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_7_cnn1044_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_7_cnn1044_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_7_cnn1044_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_7_cnn1044_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_7_cnn1044_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_7_cnn1044_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_7_cnn1044_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_8_cnn1083_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_8_cnn1083_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_8_cnn1083_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_8_cnn1083_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_8_cnn1083_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_8_cnn1083_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_8_cnn1083_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_8_cnn1083_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_8_cnn1083_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_8_cnn1083_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_9_cnn1122_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_9_cnn1122_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_9_cnn1122_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_9_cnn1122_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_9_cnn1122_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_9_cnn1122_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_9_cnn1122_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_9_cnn1122_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_9_cnn1122_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_9_cnn1122_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr66_cnn764_mult_x_bjA2_q;
    wire [18:0] i_add_ptr66_cnn764_mult_x_bjA7_q;
    wire [18:0] i_add_ptr66_cnn764_mult_x_bjA12_q;
    wire [18:0] i_add_ptr66_cnn764_mult_x_bjA17_q;
    wire [40:0] i_add_ptr66_cnn764_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr66_cnn764_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr66_cnn764_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr66_cnn764_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr66_cnn764_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr66_cnn764_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr70_10_cnn1163_mult_x_bjA2_q;
    wire [18:0] i_add_ptr70_10_cnn1163_mult_x_bjA7_q;
    wire [18:0] i_add_ptr70_10_cnn1163_mult_x_bjA12_q;
    wire [18:0] i_add_ptr70_10_cnn1163_mult_x_bjA17_q;
    wire [40:0] i_add_ptr70_10_cnn1163_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_10_cnn1163_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_10_cnn1163_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_10_cnn1163_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_10_cnn1163_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_10_cnn1163_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_11_cnn1202_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_11_cnn1202_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_11_cnn1202_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_11_cnn1202_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_11_cnn1202_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_11_cnn1202_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_12_cnn1241_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_12_cnn1241_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_12_cnn1241_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_12_cnn1241_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_12_cnn1241_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_12_cnn1241_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_13_cnn1280_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_13_cnn1280_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_13_cnn1280_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_13_cnn1280_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_13_cnn1280_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_13_cnn1280_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_14_cnn1319_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_14_cnn1319_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_14_cnn1319_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_14_cnn1319_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_14_cnn1319_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_14_cnn1319_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_15_cnn1358_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_15_cnn1358_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_15_cnn1358_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_15_cnn1358_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_15_cnn1358_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_15_cnn1358_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_173_cnn812_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_173_cnn812_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_173_cnn812_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_173_cnn812_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_173_cnn812_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_173_cnn812_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q;
    wire [18:0] i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q;
    wire [18:0] i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q;
    wire [18:0] i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q;
    wire [40:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_1_cnn820_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_1_cnn820_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_1_cnn820_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_1_cnn820_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_1_cnn820_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_1_cnn820_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_2_cnn859_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_2_cnn859_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_2_cnn859_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_2_cnn859_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_2_cnn859_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_2_cnn859_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_3_cnn898_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_3_cnn898_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_3_cnn898_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_3_cnn898_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_3_cnn898_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_3_cnn898_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_4_cnn937_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_4_cnn937_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_4_cnn937_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_4_cnn937_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_4_cnn937_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_4_cnn937_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_5_cnn976_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_5_cnn976_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_5_cnn976_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_5_cnn976_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_5_cnn976_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_5_cnn976_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_1_cnn781_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_1_cnn781_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_1_cnn781_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_1_cnn781_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_1_cnn781_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_1_cnn781_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_286_cnn851_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_286_cnn851_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_286_cnn851_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_286_cnn851_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_286_cnn851_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_286_cnn851_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q;
    wire [18:0] i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q;
    wire [18:0] i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q;
    wire [18:0] i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q;
    wire [40:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_1_cnn828_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_1_cnn828_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_1_cnn828_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_1_cnn828_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_1_cnn828_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_1_cnn828_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_2_cnn867_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_2_cnn867_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_2_cnn867_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_2_cnn867_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_2_cnn867_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_2_cnn867_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_3_cnn906_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_3_cnn906_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_3_cnn906_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_3_cnn906_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_3_cnn906_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_3_cnn906_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_4_cnn945_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_4_cnn945_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_4_cnn945_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_4_cnn945_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_4_cnn945_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_4_cnn945_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_5_cnn984_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_5_cnn984_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_5_cnn984_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_5_cnn984_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_5_cnn984_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_5_cnn984_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_2_cnn789_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_2_cnn789_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_2_cnn789_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_2_cnn789_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_2_cnn789_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_2_cnn789_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_399_cnn890_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_399_cnn890_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_399_cnn890_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_399_cnn890_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_399_cnn890_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_399_cnn890_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q;
    wire [18:0] i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q;
    wire [18:0] i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q;
    wire [18:0] i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q;
    wire [40:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_1_cnn836_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_1_cnn836_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_1_cnn836_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_1_cnn836_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_1_cnn836_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_1_cnn836_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_2_cnn875_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_2_cnn875_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_2_cnn875_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_2_cnn875_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_2_cnn875_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_2_cnn875_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_3_cnn914_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_3_cnn914_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_3_cnn914_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_3_cnn914_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_3_cnn914_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_3_cnn914_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_4_cnn953_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_4_cnn953_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_4_cnn953_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_4_cnn953_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_4_cnn953_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_4_cnn953_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_5_cnn992_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_5_cnn992_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_5_cnn992_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_5_cnn992_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_5_cnn992_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_5_cnn992_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_3_cnn797_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_3_cnn797_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_3_cnn797_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_3_cnn797_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_3_cnn797_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_3_cnn797_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_4_cnn929_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_4_cnn929_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_4_cnn929_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_4_cnn929_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_4_cnn929_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_4_cnn929_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_5_cnn968_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_5_cnn968_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_5_cnn968_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_5_cnn968_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_5_cnn968_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_5_cnn968_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_6_cnn1007_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_6_cnn1007_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_6_cnn1007_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_6_cnn1007_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_6_cnn1007_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_6_cnn1007_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_7_cnn1046_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_7_cnn1046_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_7_cnn1046_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_7_cnn1046_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_7_cnn1046_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_7_cnn1046_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_8_cnn1085_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_8_cnn1085_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_8_cnn1085_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_8_cnn1085_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_8_cnn1085_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_8_cnn1085_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_9_cnn1124_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_9_cnn1124_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_9_cnn1124_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_9_cnn1124_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_9_cnn1124_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_9_cnn1124_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr70_cnn766_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr70_cnn766_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr70_cnn766_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr70_cnn766_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr70_cnn766_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr70_cnn766_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_q;
    wire [10:0] i_add_ptr73_10_cnn1165_mult_x_bjA2_q;
    wire [18:0] i_add_ptr73_10_cnn1165_mult_x_bjA7_q;
    wire [18:0] i_add_ptr73_10_cnn1165_mult_x_bjA12_q;
    wire [18:0] i_add_ptr73_10_cnn1165_mult_x_bjA17_q;
    wire [40:0] i_add_ptr73_10_cnn1165_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_10_cnn1165_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_10_cnn1165_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_10_cnn1165_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_10_cnn1165_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_10_cnn1165_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_11_cnn1204_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_11_cnn1204_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_11_cnn1204_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_11_cnn1204_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_11_cnn1204_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_11_cnn1204_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_12_cnn1243_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_12_cnn1243_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_12_cnn1243_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_12_cnn1243_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_12_cnn1243_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_12_cnn1243_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_13_cnn1282_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_13_cnn1282_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_13_cnn1282_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_13_cnn1282_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_13_cnn1282_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_13_cnn1282_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_14_cnn1321_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_14_cnn1321_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_14_cnn1321_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_14_cnn1321_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_14_cnn1321_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_14_cnn1321_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_15_cnn1360_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_15_cnn1360_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_15_cnn1360_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_15_cnn1360_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_15_cnn1360_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_15_cnn1360_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_1_cnn822_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_1_cnn822_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_1_cnn822_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_1_cnn822_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_1_cnn822_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_1_cnn822_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_2_cnn861_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_2_cnn861_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_2_cnn861_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_2_cnn861_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_2_cnn861_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_2_cnn861_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_3_cnn900_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_3_cnn900_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_3_cnn900_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_3_cnn900_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_3_cnn900_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_3_cnn900_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_4_cnn939_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_4_cnn939_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_4_cnn939_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_4_cnn939_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_4_cnn939_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_4_cnn939_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_5_cnn978_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_5_cnn978_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_5_cnn978_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_5_cnn978_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_5_cnn978_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_5_cnn978_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_169_cnn783_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_169_cnn783_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_169_cnn783_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_169_cnn783_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_169_cnn783_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_169_cnn783_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_174_cnn814_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_174_cnn814_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_174_cnn814_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_174_cnn814_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_174_cnn814_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_174_cnn814_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_1_cnn830_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_1_cnn830_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_1_cnn830_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_1_cnn830_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_1_cnn830_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_1_cnn830_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_2_cnn869_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_2_cnn869_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_2_cnn869_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_2_cnn869_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_2_cnn869_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_2_cnn869_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_3_cnn908_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_3_cnn908_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_3_cnn908_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_3_cnn908_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_3_cnn908_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_3_cnn908_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_4_cnn947_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_4_cnn947_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_4_cnn947_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_4_cnn947_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_4_cnn947_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_4_cnn947_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_5_cnn986_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_5_cnn986_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_5_cnn986_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_5_cnn986_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_5_cnn986_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_5_cnn986_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_270_cnn791_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_270_cnn791_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_270_cnn791_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_270_cnn791_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_270_cnn791_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_270_cnn791_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_287_cnn853_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_287_cnn853_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_287_cnn853_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_287_cnn853_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_287_cnn853_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_287_cnn853_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_3100_cnn892_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_3100_cnn892_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_3100_cnn892_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_3100_cnn892_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_3100_cnn892_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_3100_cnn892_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_1_cnn838_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_1_cnn838_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_1_cnn838_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_1_cnn838_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_1_cnn838_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_1_cnn838_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_2_cnn877_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_2_cnn877_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_2_cnn877_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_2_cnn877_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_2_cnn877_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_2_cnn877_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_3_cnn916_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_3_cnn916_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_3_cnn916_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_3_cnn916_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_3_cnn916_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_3_cnn916_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_4_cnn955_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_4_cnn955_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_4_cnn955_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_4_cnn955_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_4_cnn955_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_4_cnn955_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_5_cnn994_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_5_cnn994_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_5_cnn994_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_5_cnn994_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_5_cnn994_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_5_cnn994_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_371_cnn799_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_371_cnn799_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_371_cnn799_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_371_cnn799_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_371_cnn799_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_371_cnn799_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_4_cnn931_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_4_cnn931_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_4_cnn931_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_4_cnn931_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_4_cnn931_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_4_cnn931_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_5_cnn970_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_5_cnn970_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_5_cnn970_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_5_cnn970_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_5_cnn970_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_5_cnn970_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_6_cnn1009_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_6_cnn1009_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_6_cnn1009_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_6_cnn1009_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_6_cnn1009_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_6_cnn1009_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_7_cnn1048_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_7_cnn1048_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_7_cnn1048_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_7_cnn1048_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_7_cnn1048_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_7_cnn1048_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_8_cnn1087_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_8_cnn1087_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_8_cnn1087_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_8_cnn1087_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_8_cnn1087_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_8_cnn1087_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_9_cnn1126_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_9_cnn1126_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_9_cnn1126_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_9_cnn1126_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_9_cnn1126_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_9_cnn1126_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_q;
    wire [40:0] i_add_ptr73_cnn775_mult_x_sums_align_1_q;
    wire [40:0] i_add_ptr73_cnn775_mult_x_sums_align_1_qint;
    wire [58:0] i_add_ptr73_cnn775_mult_x_sums_align_3_q;
    wire [58:0] i_add_ptr73_cnn775_mult_x_sums_align_3_qint;
    wire [68:0] i_add_ptr73_cnn775_mult_x_sums_align_5_q;
    wire [68:0] i_add_ptr73_cnn775_mult_x_sums_align_5_qint;
    wire [41:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_a;
    wire [41:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_b;
    logic [41:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_o;
    wire [41:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_q;
    wire [69:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_a;
    wire [69:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_b;
    logic [69:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_o;
    wire [69:0] i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_q;
    wire [59:0] leftShiftStage0Idx1Rng4_uid7611_i_mul58_cnn753_shift_x_in;
    wire [59:0] leftShiftStage0Idx1Rng4_uid7611_i_mul58_cnn753_shift_x_b;
    wire [63:0] leftShiftStage0Idx1_uid7612_i_mul58_cnn753_shift_x_q;
    wire [0:0] leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_s;
    reg [63:0] leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_q;
    wire [62:0] leftShiftStage0Idx1Rng1_uid7620_i_unnamed_cnn736_shift_x_in;
    wire [62:0] leftShiftStage0Idx1Rng1_uid7620_i_unnamed_cnn736_shift_x_b;
    wire [63:0] leftShiftStage0Idx1_uid7621_i_unnamed_cnn736_shift_x_q;
    wire [0:0] leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_s;
    reg [63:0] leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_q;
    wire [12:0] i_add_ptr59_cnn758_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr59_cnn758_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr59_cnn758_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr59_cnn758_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr59_cnn758_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr59_cnn758_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr59_cnn758_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr59_cnn758_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_10_cnn1161_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_10_cnn1161_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_10_cnn1161_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_10_cnn1161_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_10_cnn1161_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_10_cnn1161_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_10_cnn1161_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_10_cnn1161_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_11_cnn1200_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_11_cnn1200_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_11_cnn1200_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_11_cnn1200_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_11_cnn1200_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_11_cnn1200_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_11_cnn1200_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_11_cnn1200_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_12_cnn1239_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_12_cnn1239_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_12_cnn1239_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_12_cnn1239_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_12_cnn1239_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_12_cnn1239_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_12_cnn1239_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_12_cnn1239_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_13_cnn1278_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_13_cnn1278_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_13_cnn1278_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_13_cnn1278_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_13_cnn1278_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_13_cnn1278_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_13_cnn1278_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_13_cnn1278_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_14_cnn1317_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_14_cnn1317_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_14_cnn1317_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_14_cnn1317_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_14_cnn1317_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_14_cnn1317_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_14_cnn1317_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_14_cnn1317_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_15_cnn1356_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_15_cnn1356_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_15_cnn1356_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_15_cnn1356_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_15_cnn1356_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_15_cnn1356_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_15_cnn1356_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_15_cnn1356_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_1_cnn810_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_1_cnn810_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_1_cnn810_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_1_cnn810_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_1_cnn810_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_1_cnn810_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_1_cnn810_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_1_cnn810_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_2_cnn849_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_2_cnn849_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_2_cnn849_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_2_cnn849_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_2_cnn849_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_2_cnn849_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_2_cnn849_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_2_cnn849_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_3_cnn888_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_3_cnn888_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_3_cnn888_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_3_cnn888_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_3_cnn888_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_3_cnn888_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_3_cnn888_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_3_cnn888_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_4_cnn927_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_4_cnn927_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_4_cnn927_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_4_cnn927_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_4_cnn927_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_4_cnn927_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_4_cnn927_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_4_cnn927_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_5_cnn966_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_5_cnn966_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_5_cnn966_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_5_cnn966_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_5_cnn966_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_5_cnn966_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_5_cnn966_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_5_cnn966_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_6_cnn1005_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_6_cnn1005_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_6_cnn1005_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_6_cnn1005_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_6_cnn1005_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_6_cnn1005_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_6_cnn1005_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_6_cnn1005_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_7_cnn1044_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_7_cnn1044_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_7_cnn1044_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_7_cnn1044_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_7_cnn1044_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_7_cnn1044_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_7_cnn1044_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_7_cnn1044_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_8_cnn1083_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_8_cnn1083_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_8_cnn1083_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_8_cnn1083_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_8_cnn1083_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_8_cnn1083_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_8_cnn1083_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_8_cnn1083_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_9_cnn1122_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_9_cnn1122_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_9_cnn1122_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_9_cnn1122_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_9_cnn1122_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_9_cnn1122_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_9_cnn1122_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_9_cnn1122_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr66_cnn764_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr66_cnn764_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr66_cnn764_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr66_cnn764_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr66_cnn764_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr66_cnn764_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr66_cnn764_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr66_cnn764_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_10_cnn1163_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_10_cnn1163_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_10_cnn1163_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_10_cnn1163_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_10_cnn1163_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_10_cnn1163_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_10_cnn1163_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_10_cnn1163_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_11_cnn1202_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_11_cnn1202_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_11_cnn1202_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_11_cnn1202_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_11_cnn1202_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_11_cnn1202_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_11_cnn1202_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_11_cnn1202_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_12_cnn1241_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_12_cnn1241_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_12_cnn1241_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_12_cnn1241_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_12_cnn1241_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_12_cnn1241_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_12_cnn1241_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_12_cnn1241_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_13_cnn1280_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_13_cnn1280_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_13_cnn1280_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_13_cnn1280_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_13_cnn1280_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_13_cnn1280_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_13_cnn1280_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_13_cnn1280_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_14_cnn1319_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_14_cnn1319_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_14_cnn1319_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_14_cnn1319_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_14_cnn1319_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_14_cnn1319_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_14_cnn1319_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_14_cnn1319_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_15_cnn1358_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_15_cnn1358_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_15_cnn1358_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_15_cnn1358_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_15_cnn1358_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_15_cnn1358_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_15_cnn1358_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_15_cnn1358_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_173_cnn812_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_173_cnn812_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_173_cnn812_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_173_cnn812_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_173_cnn812_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_173_cnn812_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_173_cnn812_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_173_cnn812_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_1_cnn820_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_1_cnn820_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_1_cnn820_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_1_cnn820_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_1_cnn820_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_1_cnn820_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_1_cnn820_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_1_cnn820_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_2_cnn859_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_2_cnn859_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_2_cnn859_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_2_cnn859_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_2_cnn859_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_2_cnn859_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_2_cnn859_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_2_cnn859_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_3_cnn898_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_3_cnn898_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_3_cnn898_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_3_cnn898_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_3_cnn898_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_3_cnn898_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_3_cnn898_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_3_cnn898_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_4_cnn937_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_4_cnn937_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_4_cnn937_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_4_cnn937_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_4_cnn937_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_4_cnn937_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_4_cnn937_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_4_cnn937_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_5_cnn976_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_5_cnn976_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_5_cnn976_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_5_cnn976_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_5_cnn976_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_5_cnn976_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_5_cnn976_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_5_cnn976_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_1_cnn781_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_1_cnn781_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_1_cnn781_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_1_cnn781_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_1_cnn781_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_1_cnn781_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_1_cnn781_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_1_cnn781_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_286_cnn851_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_286_cnn851_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_286_cnn851_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_286_cnn851_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_286_cnn851_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_286_cnn851_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_286_cnn851_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_286_cnn851_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_1_cnn828_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_1_cnn828_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_1_cnn828_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_1_cnn828_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_1_cnn828_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_1_cnn828_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_1_cnn828_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_1_cnn828_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_2_cnn867_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_2_cnn867_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_2_cnn867_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_2_cnn867_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_2_cnn867_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_2_cnn867_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_2_cnn867_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_2_cnn867_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_3_cnn906_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_3_cnn906_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_3_cnn906_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_3_cnn906_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_3_cnn906_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_3_cnn906_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_3_cnn906_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_3_cnn906_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_4_cnn945_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_4_cnn945_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_4_cnn945_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_4_cnn945_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_4_cnn945_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_4_cnn945_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_4_cnn945_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_4_cnn945_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_5_cnn984_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_5_cnn984_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_5_cnn984_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_5_cnn984_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_5_cnn984_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_5_cnn984_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_5_cnn984_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_5_cnn984_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_2_cnn789_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_2_cnn789_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_2_cnn789_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_2_cnn789_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_2_cnn789_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_2_cnn789_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_2_cnn789_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_2_cnn789_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_399_cnn890_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_399_cnn890_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_399_cnn890_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_399_cnn890_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_399_cnn890_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_399_cnn890_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_399_cnn890_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_399_cnn890_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_1_cnn836_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_1_cnn836_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_1_cnn836_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_1_cnn836_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_1_cnn836_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_1_cnn836_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_1_cnn836_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_1_cnn836_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_2_cnn875_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_2_cnn875_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_2_cnn875_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_2_cnn875_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_2_cnn875_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_2_cnn875_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_2_cnn875_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_2_cnn875_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_3_cnn914_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_3_cnn914_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_3_cnn914_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_3_cnn914_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_3_cnn914_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_3_cnn914_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_3_cnn914_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_3_cnn914_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_4_cnn953_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_4_cnn953_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_4_cnn953_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_4_cnn953_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_4_cnn953_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_4_cnn953_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_4_cnn953_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_4_cnn953_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_5_cnn992_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_5_cnn992_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_5_cnn992_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_5_cnn992_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_5_cnn992_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_5_cnn992_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_5_cnn992_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_5_cnn992_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_3_cnn797_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_3_cnn797_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_3_cnn797_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_3_cnn797_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_3_cnn797_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_3_cnn797_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_3_cnn797_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_3_cnn797_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_4_cnn929_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_4_cnn929_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_4_cnn929_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_4_cnn929_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_4_cnn929_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_4_cnn929_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_4_cnn929_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_4_cnn929_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_5_cnn968_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_5_cnn968_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_5_cnn968_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_5_cnn968_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_5_cnn968_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_5_cnn968_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_5_cnn968_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_5_cnn968_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_6_cnn1007_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_6_cnn1007_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_6_cnn1007_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_6_cnn1007_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_6_cnn1007_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_6_cnn1007_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_6_cnn1007_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_6_cnn1007_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_7_cnn1046_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_7_cnn1046_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_7_cnn1046_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_7_cnn1046_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_7_cnn1046_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_7_cnn1046_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_7_cnn1046_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_7_cnn1046_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_8_cnn1085_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_8_cnn1085_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_8_cnn1085_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_8_cnn1085_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_8_cnn1085_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_8_cnn1085_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_8_cnn1085_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_8_cnn1085_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_9_cnn1124_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_9_cnn1124_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_9_cnn1124_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_9_cnn1124_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_9_cnn1124_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_9_cnn1124_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_9_cnn1124_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_9_cnn1124_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr70_cnn766_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr70_cnn766_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr70_cnn766_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr70_cnn766_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr70_cnn766_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr70_cnn766_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr70_cnn766_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr70_cnn766_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_10_cnn1165_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_10_cnn1165_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_10_cnn1165_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_10_cnn1165_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_10_cnn1165_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_10_cnn1165_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_10_cnn1165_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_10_cnn1165_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_11_cnn1204_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_11_cnn1204_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_11_cnn1204_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_11_cnn1204_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_11_cnn1204_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_11_cnn1204_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_11_cnn1204_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_11_cnn1204_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_12_cnn1243_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_12_cnn1243_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_12_cnn1243_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_12_cnn1243_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_12_cnn1243_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_12_cnn1243_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_12_cnn1243_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_12_cnn1243_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_13_cnn1282_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_13_cnn1282_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_13_cnn1282_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_13_cnn1282_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_13_cnn1282_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_13_cnn1282_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_13_cnn1282_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_13_cnn1282_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_14_cnn1321_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_14_cnn1321_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_14_cnn1321_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_14_cnn1321_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_14_cnn1321_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_14_cnn1321_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_14_cnn1321_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_14_cnn1321_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_15_cnn1360_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_15_cnn1360_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_15_cnn1360_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_15_cnn1360_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_15_cnn1360_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_15_cnn1360_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_15_cnn1360_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_15_cnn1360_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_1_cnn822_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_1_cnn822_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_1_cnn822_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_1_cnn822_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_1_cnn822_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_1_cnn822_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_1_cnn822_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_1_cnn822_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_2_cnn861_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_2_cnn861_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_2_cnn861_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_2_cnn861_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_2_cnn861_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_2_cnn861_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_2_cnn861_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_2_cnn861_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_3_cnn900_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_3_cnn900_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_3_cnn900_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_3_cnn900_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_3_cnn900_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_3_cnn900_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_3_cnn900_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_3_cnn900_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_4_cnn939_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_4_cnn939_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_4_cnn939_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_4_cnn939_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_4_cnn939_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_4_cnn939_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_4_cnn939_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_4_cnn939_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_5_cnn978_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_5_cnn978_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_5_cnn978_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_5_cnn978_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_5_cnn978_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_5_cnn978_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_5_cnn978_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_5_cnn978_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_169_cnn783_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_169_cnn783_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_169_cnn783_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_169_cnn783_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_169_cnn783_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_169_cnn783_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_169_cnn783_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_169_cnn783_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_174_cnn814_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_174_cnn814_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_174_cnn814_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_174_cnn814_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_174_cnn814_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_174_cnn814_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_174_cnn814_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_174_cnn814_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_1_cnn830_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_1_cnn830_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_1_cnn830_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_1_cnn830_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_1_cnn830_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_1_cnn830_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_1_cnn830_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_1_cnn830_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_2_cnn869_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_2_cnn869_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_2_cnn869_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_2_cnn869_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_2_cnn869_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_2_cnn869_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_2_cnn869_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_2_cnn869_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_3_cnn908_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_3_cnn908_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_3_cnn908_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_3_cnn908_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_3_cnn908_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_3_cnn908_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_3_cnn908_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_3_cnn908_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_4_cnn947_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_4_cnn947_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_4_cnn947_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_4_cnn947_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_4_cnn947_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_4_cnn947_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_4_cnn947_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_4_cnn947_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_5_cnn986_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_5_cnn986_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_5_cnn986_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_5_cnn986_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_5_cnn986_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_5_cnn986_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_5_cnn986_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_5_cnn986_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_270_cnn791_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_270_cnn791_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_270_cnn791_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_270_cnn791_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_270_cnn791_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_270_cnn791_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_270_cnn791_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_270_cnn791_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_287_cnn853_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_287_cnn853_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_287_cnn853_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_287_cnn853_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_287_cnn853_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_287_cnn853_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_287_cnn853_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_287_cnn853_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_3100_cnn892_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_3100_cnn892_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_3100_cnn892_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_3100_cnn892_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_3100_cnn892_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_3100_cnn892_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_3100_cnn892_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_3100_cnn892_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_1_cnn838_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_1_cnn838_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_1_cnn838_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_1_cnn838_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_1_cnn838_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_1_cnn838_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_1_cnn838_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_1_cnn838_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_2_cnn877_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_2_cnn877_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_2_cnn877_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_2_cnn877_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_2_cnn877_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_2_cnn877_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_2_cnn877_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_2_cnn877_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_3_cnn916_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_3_cnn916_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_3_cnn916_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_3_cnn916_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_3_cnn916_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_3_cnn916_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_3_cnn916_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_3_cnn916_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_4_cnn955_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_4_cnn955_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_4_cnn955_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_4_cnn955_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_4_cnn955_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_4_cnn955_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_4_cnn955_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_4_cnn955_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_5_cnn994_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_5_cnn994_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_5_cnn994_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_5_cnn994_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_5_cnn994_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_5_cnn994_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_5_cnn994_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_5_cnn994_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_371_cnn799_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_371_cnn799_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_371_cnn799_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_371_cnn799_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_371_cnn799_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_371_cnn799_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_371_cnn799_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_371_cnn799_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_4_cnn931_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_4_cnn931_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_4_cnn931_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_4_cnn931_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_4_cnn931_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_4_cnn931_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_4_cnn931_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_4_cnn931_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_5_cnn970_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_5_cnn970_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_5_cnn970_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_5_cnn970_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_5_cnn970_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_5_cnn970_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_5_cnn970_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_5_cnn970_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_6_cnn1009_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_6_cnn1009_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_6_cnn1009_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_6_cnn1009_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_6_cnn1009_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_6_cnn1009_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_6_cnn1009_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_6_cnn1009_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_7_cnn1048_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_7_cnn1048_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_7_cnn1048_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_7_cnn1048_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_7_cnn1048_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_7_cnn1048_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_7_cnn1048_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_7_cnn1048_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_8_cnn1087_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_8_cnn1087_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_8_cnn1087_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_8_cnn1087_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_8_cnn1087_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_8_cnn1087_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_8_cnn1087_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_8_cnn1087_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_9_cnn1126_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_9_cnn1126_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_9_cnn1126_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_9_cnn1126_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_9_cnn1126_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_9_cnn1126_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_9_cnn1126_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_9_cnn1126_mult_x_im15_shift0_qint;
    wire [12:0] i_add_ptr73_cnn775_mult_x_im0_shift0_q;
    wire [12:0] i_add_ptr73_cnn775_mult_x_im0_shift0_qint;
    wire [20:0] i_add_ptr73_cnn775_mult_x_im5_shift0_q;
    wire [20:0] i_add_ptr73_cnn775_mult_x_im5_shift0_qint;
    wire [20:0] i_add_ptr73_cnn775_mult_x_im10_shift0_q;
    wire [20:0] i_add_ptr73_cnn775_mult_x_im10_shift0_qint;
    wire [20:0] i_add_ptr73_cnn775_mult_x_im15_shift0_q;
    wire [20:0] i_add_ptr73_cnn775_mult_x_im15_shift0_qint;
    wire [0:0] i_exitcond_cnn1393_cmp_nsign_q;
    wire [70:0] i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_10_cnn1156_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_11_cnn1195_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_12_cnn1234_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_13_cnn1273_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_14_cnn1312_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_15_cnn1351_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_1_cnn805_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_2_cnn844_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_3_cnn883_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_4_cnn922_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_5_cnn961_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_6_cnn1000_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_7_cnn1039_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_8_cnn1078_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_9_cnn1117_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_mul65_cnn759_sums_result_add_0_1_p1_of_2_a;
    wire [70:0] i_mul65_cnn759_sums_result_add_0_1_p1_of_2_b;
    logic [70:0] i_mul65_cnn759_sums_result_add_0_1_p1_of_2_o;
    wire [0:0] i_mul65_cnn759_sums_result_add_0_1_p1_of_2_c;
    wire [69:0] i_mul65_cnn759_sums_result_add_0_1_p1_of_2_q;
    wire [7:0] i_mul65_cnn759_sums_result_add_0_1_p2_of_2_a;
    wire [7:0] i_mul65_cnn759_sums_result_add_0_1_p2_of_2_b;
    logic [7:0] i_mul65_cnn759_sums_result_add_0_1_p2_of_2_o;
    wire [0:0] i_mul65_cnn759_sums_result_add_0_1_p2_of_2_cin;
    wire [5:0] i_mul65_cnn759_sums_result_add_0_1_p2_of_2_q;
    wire [70:0] i_mul65_cnn759_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_mul65_cnn759_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_mul65_cnn759_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_mul65_cnn759_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_mul65_cnn759_sums_result_add_1_0_p1_of_2_q;
    wire [8:0] i_mul65_cnn759_sums_result_add_1_0_p2_of_2_a;
    wire [8:0] i_mul65_cnn759_sums_result_add_1_0_p2_of_2_b;
    logic [8:0] i_mul65_cnn759_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_mul65_cnn759_sums_result_add_1_0_p2_of_2_cin;
    wire [6:0] i_mul65_cnn759_sums_result_add_1_0_p2_of_2_q;
    wire [76:0] i_mul65_cnn759_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [70:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_a;
    wire [70:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_b;
    logic [70:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_o;
    wire [0:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_c;
    wire [69:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_q;
    wire [2:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_a;
    wire [2:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_b;
    logic [2:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_o;
    wire [0:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_cin;
    wire [0:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_q;
    wire [70:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitJoin_for_q_q;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q;
    wire [5:0] i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q;
    wire [69:0] i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b;
    wire [4:0] i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
    wire [5:0] i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [6:0] i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q;
    wire [0:0] i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b;
    wire [6:0] i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q;
    wire [0:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire [0:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
    wire [69:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q;
    wire [0:0] i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
    wire i_mul65_10_cnn1156_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_10_cnn1156_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_10_cnn1156_im0_cma_ch [0:0];
    wire [10:0] i_mul65_10_cnn1156_im0_cma_a0;
    wire [2:0] i_mul65_10_cnn1156_im0_cma_c0;
    wire [21:0] i_mul65_10_cnn1156_im0_cma_s0;
    wire [21:0] i_mul65_10_cnn1156_im0_cma_qq;
    reg [21:0] i_mul65_10_cnn1156_im0_cma_q;
    wire i_mul65_10_cnn1156_im0_cma_ena0;
    wire i_mul65_10_cnn1156_im0_cma_ena1;
    wire i_mul65_10_cnn1156_im0_cma_ena2;
    wire i_mul65_10_cnn1156_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_10_cnn1156_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_10_cnn1156_im5_cma_ch [0:0];
    wire [18:0] i_mul65_10_cnn1156_im5_cma_a0;
    wire [2:0] i_mul65_10_cnn1156_im5_cma_c0;
    wire [29:0] i_mul65_10_cnn1156_im5_cma_s0;
    wire [29:0] i_mul65_10_cnn1156_im5_cma_qq;
    reg [29:0] i_mul65_10_cnn1156_im5_cma_q;
    wire i_mul65_10_cnn1156_im5_cma_ena0;
    wire i_mul65_10_cnn1156_im5_cma_ena1;
    wire i_mul65_10_cnn1156_im5_cma_ena2;
    wire i_mul65_10_cnn1156_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_10_cnn1156_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_10_cnn1156_im10_cma_ch [0:0];
    wire [18:0] i_mul65_10_cnn1156_im10_cma_a0;
    wire [2:0] i_mul65_10_cnn1156_im10_cma_c0;
    wire [29:0] i_mul65_10_cnn1156_im10_cma_s0;
    wire [29:0] i_mul65_10_cnn1156_im10_cma_qq;
    reg [29:0] i_mul65_10_cnn1156_im10_cma_q;
    wire i_mul65_10_cnn1156_im10_cma_ena0;
    wire i_mul65_10_cnn1156_im10_cma_ena1;
    wire i_mul65_10_cnn1156_im10_cma_ena2;
    wire i_mul65_10_cnn1156_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_10_cnn1156_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_10_cnn1156_im15_cma_ch [0:0];
    wire [18:0] i_mul65_10_cnn1156_im15_cma_a0;
    wire [2:0] i_mul65_10_cnn1156_im15_cma_c0;
    wire [29:0] i_mul65_10_cnn1156_im15_cma_s0;
    wire [29:0] i_mul65_10_cnn1156_im15_cma_qq;
    reg [29:0] i_mul65_10_cnn1156_im15_cma_q;
    wire i_mul65_10_cnn1156_im15_cma_ena0;
    wire i_mul65_10_cnn1156_im15_cma_ena1;
    wire i_mul65_10_cnn1156_im15_cma_ena2;
    wire i_mul65_11_cnn1195_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_11_cnn1195_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_11_cnn1195_im0_cma_ch [0:0];
    wire [10:0] i_mul65_11_cnn1195_im0_cma_a0;
    wire [2:0] i_mul65_11_cnn1195_im0_cma_c0;
    wire [21:0] i_mul65_11_cnn1195_im0_cma_s0;
    wire [21:0] i_mul65_11_cnn1195_im0_cma_qq;
    reg [21:0] i_mul65_11_cnn1195_im0_cma_q;
    wire i_mul65_11_cnn1195_im0_cma_ena0;
    wire i_mul65_11_cnn1195_im0_cma_ena1;
    wire i_mul65_11_cnn1195_im0_cma_ena2;
    wire i_mul65_11_cnn1195_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_11_cnn1195_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_11_cnn1195_im5_cma_ch [0:0];
    wire [18:0] i_mul65_11_cnn1195_im5_cma_a0;
    wire [2:0] i_mul65_11_cnn1195_im5_cma_c0;
    wire [29:0] i_mul65_11_cnn1195_im5_cma_s0;
    wire [29:0] i_mul65_11_cnn1195_im5_cma_qq;
    reg [29:0] i_mul65_11_cnn1195_im5_cma_q;
    wire i_mul65_11_cnn1195_im5_cma_ena0;
    wire i_mul65_11_cnn1195_im5_cma_ena1;
    wire i_mul65_11_cnn1195_im5_cma_ena2;
    wire i_mul65_11_cnn1195_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_11_cnn1195_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_11_cnn1195_im10_cma_ch [0:0];
    wire [18:0] i_mul65_11_cnn1195_im10_cma_a0;
    wire [2:0] i_mul65_11_cnn1195_im10_cma_c0;
    wire [29:0] i_mul65_11_cnn1195_im10_cma_s0;
    wire [29:0] i_mul65_11_cnn1195_im10_cma_qq;
    reg [29:0] i_mul65_11_cnn1195_im10_cma_q;
    wire i_mul65_11_cnn1195_im10_cma_ena0;
    wire i_mul65_11_cnn1195_im10_cma_ena1;
    wire i_mul65_11_cnn1195_im10_cma_ena2;
    wire i_mul65_11_cnn1195_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_11_cnn1195_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_11_cnn1195_im15_cma_ch [0:0];
    wire [18:0] i_mul65_11_cnn1195_im15_cma_a0;
    wire [2:0] i_mul65_11_cnn1195_im15_cma_c0;
    wire [29:0] i_mul65_11_cnn1195_im15_cma_s0;
    wire [29:0] i_mul65_11_cnn1195_im15_cma_qq;
    reg [29:0] i_mul65_11_cnn1195_im15_cma_q;
    wire i_mul65_11_cnn1195_im15_cma_ena0;
    wire i_mul65_11_cnn1195_im15_cma_ena1;
    wire i_mul65_11_cnn1195_im15_cma_ena2;
    wire i_mul65_12_cnn1234_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_12_cnn1234_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_12_cnn1234_im0_cma_ch [0:0];
    wire [10:0] i_mul65_12_cnn1234_im0_cma_a0;
    wire [2:0] i_mul65_12_cnn1234_im0_cma_c0;
    wire [21:0] i_mul65_12_cnn1234_im0_cma_s0;
    wire [21:0] i_mul65_12_cnn1234_im0_cma_qq;
    reg [21:0] i_mul65_12_cnn1234_im0_cma_q;
    wire i_mul65_12_cnn1234_im0_cma_ena0;
    wire i_mul65_12_cnn1234_im0_cma_ena1;
    wire i_mul65_12_cnn1234_im0_cma_ena2;
    wire i_mul65_12_cnn1234_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_12_cnn1234_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_12_cnn1234_im5_cma_ch [0:0];
    wire [18:0] i_mul65_12_cnn1234_im5_cma_a0;
    wire [2:0] i_mul65_12_cnn1234_im5_cma_c0;
    wire [29:0] i_mul65_12_cnn1234_im5_cma_s0;
    wire [29:0] i_mul65_12_cnn1234_im5_cma_qq;
    reg [29:0] i_mul65_12_cnn1234_im5_cma_q;
    wire i_mul65_12_cnn1234_im5_cma_ena0;
    wire i_mul65_12_cnn1234_im5_cma_ena1;
    wire i_mul65_12_cnn1234_im5_cma_ena2;
    wire i_mul65_12_cnn1234_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_12_cnn1234_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_12_cnn1234_im10_cma_ch [0:0];
    wire [18:0] i_mul65_12_cnn1234_im10_cma_a0;
    wire [2:0] i_mul65_12_cnn1234_im10_cma_c0;
    wire [29:0] i_mul65_12_cnn1234_im10_cma_s0;
    wire [29:0] i_mul65_12_cnn1234_im10_cma_qq;
    reg [29:0] i_mul65_12_cnn1234_im10_cma_q;
    wire i_mul65_12_cnn1234_im10_cma_ena0;
    wire i_mul65_12_cnn1234_im10_cma_ena1;
    wire i_mul65_12_cnn1234_im10_cma_ena2;
    wire i_mul65_12_cnn1234_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_12_cnn1234_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_12_cnn1234_im15_cma_ch [0:0];
    wire [18:0] i_mul65_12_cnn1234_im15_cma_a0;
    wire [2:0] i_mul65_12_cnn1234_im15_cma_c0;
    wire [29:0] i_mul65_12_cnn1234_im15_cma_s0;
    wire [29:0] i_mul65_12_cnn1234_im15_cma_qq;
    reg [29:0] i_mul65_12_cnn1234_im15_cma_q;
    wire i_mul65_12_cnn1234_im15_cma_ena0;
    wire i_mul65_12_cnn1234_im15_cma_ena1;
    wire i_mul65_12_cnn1234_im15_cma_ena2;
    wire i_mul65_13_cnn1273_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_13_cnn1273_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_13_cnn1273_im0_cma_ch [0:0];
    wire [10:0] i_mul65_13_cnn1273_im0_cma_a0;
    wire [2:0] i_mul65_13_cnn1273_im0_cma_c0;
    wire [21:0] i_mul65_13_cnn1273_im0_cma_s0;
    wire [21:0] i_mul65_13_cnn1273_im0_cma_qq;
    reg [21:0] i_mul65_13_cnn1273_im0_cma_q;
    wire i_mul65_13_cnn1273_im0_cma_ena0;
    wire i_mul65_13_cnn1273_im0_cma_ena1;
    wire i_mul65_13_cnn1273_im0_cma_ena2;
    wire i_mul65_13_cnn1273_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_13_cnn1273_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_13_cnn1273_im5_cma_ch [0:0];
    wire [18:0] i_mul65_13_cnn1273_im5_cma_a0;
    wire [2:0] i_mul65_13_cnn1273_im5_cma_c0;
    wire [29:0] i_mul65_13_cnn1273_im5_cma_s0;
    wire [29:0] i_mul65_13_cnn1273_im5_cma_qq;
    reg [29:0] i_mul65_13_cnn1273_im5_cma_q;
    wire i_mul65_13_cnn1273_im5_cma_ena0;
    wire i_mul65_13_cnn1273_im5_cma_ena1;
    wire i_mul65_13_cnn1273_im5_cma_ena2;
    wire i_mul65_13_cnn1273_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_13_cnn1273_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_13_cnn1273_im10_cma_ch [0:0];
    wire [18:0] i_mul65_13_cnn1273_im10_cma_a0;
    wire [2:0] i_mul65_13_cnn1273_im10_cma_c0;
    wire [29:0] i_mul65_13_cnn1273_im10_cma_s0;
    wire [29:0] i_mul65_13_cnn1273_im10_cma_qq;
    reg [29:0] i_mul65_13_cnn1273_im10_cma_q;
    wire i_mul65_13_cnn1273_im10_cma_ena0;
    wire i_mul65_13_cnn1273_im10_cma_ena1;
    wire i_mul65_13_cnn1273_im10_cma_ena2;
    wire i_mul65_13_cnn1273_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_13_cnn1273_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_13_cnn1273_im15_cma_ch [0:0];
    wire [18:0] i_mul65_13_cnn1273_im15_cma_a0;
    wire [2:0] i_mul65_13_cnn1273_im15_cma_c0;
    wire [29:0] i_mul65_13_cnn1273_im15_cma_s0;
    wire [29:0] i_mul65_13_cnn1273_im15_cma_qq;
    reg [29:0] i_mul65_13_cnn1273_im15_cma_q;
    wire i_mul65_13_cnn1273_im15_cma_ena0;
    wire i_mul65_13_cnn1273_im15_cma_ena1;
    wire i_mul65_13_cnn1273_im15_cma_ena2;
    wire i_mul65_14_cnn1312_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_14_cnn1312_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_14_cnn1312_im0_cma_ch [0:0];
    wire [10:0] i_mul65_14_cnn1312_im0_cma_a0;
    wire [2:0] i_mul65_14_cnn1312_im0_cma_c0;
    wire [21:0] i_mul65_14_cnn1312_im0_cma_s0;
    wire [21:0] i_mul65_14_cnn1312_im0_cma_qq;
    reg [21:0] i_mul65_14_cnn1312_im0_cma_q;
    wire i_mul65_14_cnn1312_im0_cma_ena0;
    wire i_mul65_14_cnn1312_im0_cma_ena1;
    wire i_mul65_14_cnn1312_im0_cma_ena2;
    wire i_mul65_14_cnn1312_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_14_cnn1312_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_14_cnn1312_im5_cma_ch [0:0];
    wire [18:0] i_mul65_14_cnn1312_im5_cma_a0;
    wire [2:0] i_mul65_14_cnn1312_im5_cma_c0;
    wire [29:0] i_mul65_14_cnn1312_im5_cma_s0;
    wire [29:0] i_mul65_14_cnn1312_im5_cma_qq;
    reg [29:0] i_mul65_14_cnn1312_im5_cma_q;
    wire i_mul65_14_cnn1312_im5_cma_ena0;
    wire i_mul65_14_cnn1312_im5_cma_ena1;
    wire i_mul65_14_cnn1312_im5_cma_ena2;
    wire i_mul65_14_cnn1312_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_14_cnn1312_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_14_cnn1312_im10_cma_ch [0:0];
    wire [18:0] i_mul65_14_cnn1312_im10_cma_a0;
    wire [2:0] i_mul65_14_cnn1312_im10_cma_c0;
    wire [29:0] i_mul65_14_cnn1312_im10_cma_s0;
    wire [29:0] i_mul65_14_cnn1312_im10_cma_qq;
    reg [29:0] i_mul65_14_cnn1312_im10_cma_q;
    wire i_mul65_14_cnn1312_im10_cma_ena0;
    wire i_mul65_14_cnn1312_im10_cma_ena1;
    wire i_mul65_14_cnn1312_im10_cma_ena2;
    wire i_mul65_14_cnn1312_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_14_cnn1312_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_14_cnn1312_im15_cma_ch [0:0];
    wire [18:0] i_mul65_14_cnn1312_im15_cma_a0;
    wire [2:0] i_mul65_14_cnn1312_im15_cma_c0;
    wire [29:0] i_mul65_14_cnn1312_im15_cma_s0;
    wire [29:0] i_mul65_14_cnn1312_im15_cma_qq;
    reg [29:0] i_mul65_14_cnn1312_im15_cma_q;
    wire i_mul65_14_cnn1312_im15_cma_ena0;
    wire i_mul65_14_cnn1312_im15_cma_ena1;
    wire i_mul65_14_cnn1312_im15_cma_ena2;
    wire i_mul65_15_cnn1351_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_15_cnn1351_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_15_cnn1351_im0_cma_ch [0:0];
    wire [10:0] i_mul65_15_cnn1351_im0_cma_a0;
    wire [2:0] i_mul65_15_cnn1351_im0_cma_c0;
    wire [21:0] i_mul65_15_cnn1351_im0_cma_s0;
    wire [21:0] i_mul65_15_cnn1351_im0_cma_qq;
    reg [21:0] i_mul65_15_cnn1351_im0_cma_q;
    wire i_mul65_15_cnn1351_im0_cma_ena0;
    wire i_mul65_15_cnn1351_im0_cma_ena1;
    wire i_mul65_15_cnn1351_im0_cma_ena2;
    wire i_mul65_15_cnn1351_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_15_cnn1351_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_15_cnn1351_im5_cma_ch [0:0];
    wire [18:0] i_mul65_15_cnn1351_im5_cma_a0;
    wire [2:0] i_mul65_15_cnn1351_im5_cma_c0;
    wire [29:0] i_mul65_15_cnn1351_im5_cma_s0;
    wire [29:0] i_mul65_15_cnn1351_im5_cma_qq;
    reg [29:0] i_mul65_15_cnn1351_im5_cma_q;
    wire i_mul65_15_cnn1351_im5_cma_ena0;
    wire i_mul65_15_cnn1351_im5_cma_ena1;
    wire i_mul65_15_cnn1351_im5_cma_ena2;
    wire i_mul65_15_cnn1351_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_15_cnn1351_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_15_cnn1351_im10_cma_ch [0:0];
    wire [18:0] i_mul65_15_cnn1351_im10_cma_a0;
    wire [2:0] i_mul65_15_cnn1351_im10_cma_c0;
    wire [29:0] i_mul65_15_cnn1351_im10_cma_s0;
    wire [29:0] i_mul65_15_cnn1351_im10_cma_qq;
    reg [29:0] i_mul65_15_cnn1351_im10_cma_q;
    wire i_mul65_15_cnn1351_im10_cma_ena0;
    wire i_mul65_15_cnn1351_im10_cma_ena1;
    wire i_mul65_15_cnn1351_im10_cma_ena2;
    wire i_mul65_15_cnn1351_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_15_cnn1351_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_15_cnn1351_im15_cma_ch [0:0];
    wire [18:0] i_mul65_15_cnn1351_im15_cma_a0;
    wire [2:0] i_mul65_15_cnn1351_im15_cma_c0;
    wire [29:0] i_mul65_15_cnn1351_im15_cma_s0;
    wire [29:0] i_mul65_15_cnn1351_im15_cma_qq;
    reg [29:0] i_mul65_15_cnn1351_im15_cma_q;
    wire i_mul65_15_cnn1351_im15_cma_ena0;
    wire i_mul65_15_cnn1351_im15_cma_ena1;
    wire i_mul65_15_cnn1351_im15_cma_ena2;
    wire i_mul65_1_cnn805_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_1_cnn805_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_1_cnn805_im0_cma_ch [0:0];
    wire [10:0] i_mul65_1_cnn805_im0_cma_a0;
    wire [2:0] i_mul65_1_cnn805_im0_cma_c0;
    wire [21:0] i_mul65_1_cnn805_im0_cma_s0;
    wire [21:0] i_mul65_1_cnn805_im0_cma_qq;
    reg [21:0] i_mul65_1_cnn805_im0_cma_q;
    wire i_mul65_1_cnn805_im0_cma_ena0;
    wire i_mul65_1_cnn805_im0_cma_ena1;
    wire i_mul65_1_cnn805_im0_cma_ena2;
    wire i_mul65_1_cnn805_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_1_cnn805_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_1_cnn805_im5_cma_ch [0:0];
    wire [18:0] i_mul65_1_cnn805_im5_cma_a0;
    wire [2:0] i_mul65_1_cnn805_im5_cma_c0;
    wire [29:0] i_mul65_1_cnn805_im5_cma_s0;
    wire [29:0] i_mul65_1_cnn805_im5_cma_qq;
    reg [29:0] i_mul65_1_cnn805_im5_cma_q;
    wire i_mul65_1_cnn805_im5_cma_ena0;
    wire i_mul65_1_cnn805_im5_cma_ena1;
    wire i_mul65_1_cnn805_im5_cma_ena2;
    wire i_mul65_1_cnn805_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_1_cnn805_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_1_cnn805_im10_cma_ch [0:0];
    wire [18:0] i_mul65_1_cnn805_im10_cma_a0;
    wire [2:0] i_mul65_1_cnn805_im10_cma_c0;
    wire [29:0] i_mul65_1_cnn805_im10_cma_s0;
    wire [29:0] i_mul65_1_cnn805_im10_cma_qq;
    reg [29:0] i_mul65_1_cnn805_im10_cma_q;
    wire i_mul65_1_cnn805_im10_cma_ena0;
    wire i_mul65_1_cnn805_im10_cma_ena1;
    wire i_mul65_1_cnn805_im10_cma_ena2;
    wire i_mul65_1_cnn805_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_1_cnn805_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_1_cnn805_im15_cma_ch [0:0];
    wire [18:0] i_mul65_1_cnn805_im15_cma_a0;
    wire [2:0] i_mul65_1_cnn805_im15_cma_c0;
    wire [29:0] i_mul65_1_cnn805_im15_cma_s0;
    wire [29:0] i_mul65_1_cnn805_im15_cma_qq;
    reg [29:0] i_mul65_1_cnn805_im15_cma_q;
    wire i_mul65_1_cnn805_im15_cma_ena0;
    wire i_mul65_1_cnn805_im15_cma_ena1;
    wire i_mul65_1_cnn805_im15_cma_ena2;
    wire i_mul65_2_cnn844_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_2_cnn844_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_2_cnn844_im0_cma_ch [0:0];
    wire [10:0] i_mul65_2_cnn844_im0_cma_a0;
    wire [2:0] i_mul65_2_cnn844_im0_cma_c0;
    wire [21:0] i_mul65_2_cnn844_im0_cma_s0;
    wire [21:0] i_mul65_2_cnn844_im0_cma_qq;
    reg [21:0] i_mul65_2_cnn844_im0_cma_q;
    wire i_mul65_2_cnn844_im0_cma_ena0;
    wire i_mul65_2_cnn844_im0_cma_ena1;
    wire i_mul65_2_cnn844_im0_cma_ena2;
    wire i_mul65_2_cnn844_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_2_cnn844_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_2_cnn844_im5_cma_ch [0:0];
    wire [18:0] i_mul65_2_cnn844_im5_cma_a0;
    wire [2:0] i_mul65_2_cnn844_im5_cma_c0;
    wire [29:0] i_mul65_2_cnn844_im5_cma_s0;
    wire [29:0] i_mul65_2_cnn844_im5_cma_qq;
    reg [29:0] i_mul65_2_cnn844_im5_cma_q;
    wire i_mul65_2_cnn844_im5_cma_ena0;
    wire i_mul65_2_cnn844_im5_cma_ena1;
    wire i_mul65_2_cnn844_im5_cma_ena2;
    wire i_mul65_2_cnn844_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_2_cnn844_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_2_cnn844_im10_cma_ch [0:0];
    wire [18:0] i_mul65_2_cnn844_im10_cma_a0;
    wire [2:0] i_mul65_2_cnn844_im10_cma_c0;
    wire [29:0] i_mul65_2_cnn844_im10_cma_s0;
    wire [29:0] i_mul65_2_cnn844_im10_cma_qq;
    reg [29:0] i_mul65_2_cnn844_im10_cma_q;
    wire i_mul65_2_cnn844_im10_cma_ena0;
    wire i_mul65_2_cnn844_im10_cma_ena1;
    wire i_mul65_2_cnn844_im10_cma_ena2;
    wire i_mul65_2_cnn844_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_2_cnn844_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_2_cnn844_im15_cma_ch [0:0];
    wire [18:0] i_mul65_2_cnn844_im15_cma_a0;
    wire [2:0] i_mul65_2_cnn844_im15_cma_c0;
    wire [29:0] i_mul65_2_cnn844_im15_cma_s0;
    wire [29:0] i_mul65_2_cnn844_im15_cma_qq;
    reg [29:0] i_mul65_2_cnn844_im15_cma_q;
    wire i_mul65_2_cnn844_im15_cma_ena0;
    wire i_mul65_2_cnn844_im15_cma_ena1;
    wire i_mul65_2_cnn844_im15_cma_ena2;
    wire i_mul65_3_cnn883_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_3_cnn883_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_3_cnn883_im0_cma_ch [0:0];
    wire [10:0] i_mul65_3_cnn883_im0_cma_a0;
    wire [2:0] i_mul65_3_cnn883_im0_cma_c0;
    wire [21:0] i_mul65_3_cnn883_im0_cma_s0;
    wire [21:0] i_mul65_3_cnn883_im0_cma_qq;
    reg [21:0] i_mul65_3_cnn883_im0_cma_q;
    wire i_mul65_3_cnn883_im0_cma_ena0;
    wire i_mul65_3_cnn883_im0_cma_ena1;
    wire i_mul65_3_cnn883_im0_cma_ena2;
    wire i_mul65_3_cnn883_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_3_cnn883_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_3_cnn883_im5_cma_ch [0:0];
    wire [18:0] i_mul65_3_cnn883_im5_cma_a0;
    wire [2:0] i_mul65_3_cnn883_im5_cma_c0;
    wire [29:0] i_mul65_3_cnn883_im5_cma_s0;
    wire [29:0] i_mul65_3_cnn883_im5_cma_qq;
    reg [29:0] i_mul65_3_cnn883_im5_cma_q;
    wire i_mul65_3_cnn883_im5_cma_ena0;
    wire i_mul65_3_cnn883_im5_cma_ena1;
    wire i_mul65_3_cnn883_im5_cma_ena2;
    wire i_mul65_3_cnn883_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_3_cnn883_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_3_cnn883_im10_cma_ch [0:0];
    wire [18:0] i_mul65_3_cnn883_im10_cma_a0;
    wire [2:0] i_mul65_3_cnn883_im10_cma_c0;
    wire [29:0] i_mul65_3_cnn883_im10_cma_s0;
    wire [29:0] i_mul65_3_cnn883_im10_cma_qq;
    reg [29:0] i_mul65_3_cnn883_im10_cma_q;
    wire i_mul65_3_cnn883_im10_cma_ena0;
    wire i_mul65_3_cnn883_im10_cma_ena1;
    wire i_mul65_3_cnn883_im10_cma_ena2;
    wire i_mul65_3_cnn883_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_3_cnn883_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_3_cnn883_im15_cma_ch [0:0];
    wire [18:0] i_mul65_3_cnn883_im15_cma_a0;
    wire [2:0] i_mul65_3_cnn883_im15_cma_c0;
    wire [29:0] i_mul65_3_cnn883_im15_cma_s0;
    wire [29:0] i_mul65_3_cnn883_im15_cma_qq;
    reg [29:0] i_mul65_3_cnn883_im15_cma_q;
    wire i_mul65_3_cnn883_im15_cma_ena0;
    wire i_mul65_3_cnn883_im15_cma_ena1;
    wire i_mul65_3_cnn883_im15_cma_ena2;
    wire i_mul65_4_cnn922_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_4_cnn922_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_4_cnn922_im0_cma_ch [0:0];
    wire [10:0] i_mul65_4_cnn922_im0_cma_a0;
    wire [2:0] i_mul65_4_cnn922_im0_cma_c0;
    wire [21:0] i_mul65_4_cnn922_im0_cma_s0;
    wire [21:0] i_mul65_4_cnn922_im0_cma_qq;
    reg [21:0] i_mul65_4_cnn922_im0_cma_q;
    wire i_mul65_4_cnn922_im0_cma_ena0;
    wire i_mul65_4_cnn922_im0_cma_ena1;
    wire i_mul65_4_cnn922_im0_cma_ena2;
    wire i_mul65_4_cnn922_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_4_cnn922_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_4_cnn922_im5_cma_ch [0:0];
    wire [18:0] i_mul65_4_cnn922_im5_cma_a0;
    wire [2:0] i_mul65_4_cnn922_im5_cma_c0;
    wire [29:0] i_mul65_4_cnn922_im5_cma_s0;
    wire [29:0] i_mul65_4_cnn922_im5_cma_qq;
    reg [29:0] i_mul65_4_cnn922_im5_cma_q;
    wire i_mul65_4_cnn922_im5_cma_ena0;
    wire i_mul65_4_cnn922_im5_cma_ena1;
    wire i_mul65_4_cnn922_im5_cma_ena2;
    wire i_mul65_4_cnn922_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_4_cnn922_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_4_cnn922_im10_cma_ch [0:0];
    wire [18:0] i_mul65_4_cnn922_im10_cma_a0;
    wire [2:0] i_mul65_4_cnn922_im10_cma_c0;
    wire [29:0] i_mul65_4_cnn922_im10_cma_s0;
    wire [29:0] i_mul65_4_cnn922_im10_cma_qq;
    reg [29:0] i_mul65_4_cnn922_im10_cma_q;
    wire i_mul65_4_cnn922_im10_cma_ena0;
    wire i_mul65_4_cnn922_im10_cma_ena1;
    wire i_mul65_4_cnn922_im10_cma_ena2;
    wire i_mul65_4_cnn922_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_4_cnn922_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_4_cnn922_im15_cma_ch [0:0];
    wire [18:0] i_mul65_4_cnn922_im15_cma_a0;
    wire [2:0] i_mul65_4_cnn922_im15_cma_c0;
    wire [29:0] i_mul65_4_cnn922_im15_cma_s0;
    wire [29:0] i_mul65_4_cnn922_im15_cma_qq;
    reg [29:0] i_mul65_4_cnn922_im15_cma_q;
    wire i_mul65_4_cnn922_im15_cma_ena0;
    wire i_mul65_4_cnn922_im15_cma_ena1;
    wire i_mul65_4_cnn922_im15_cma_ena2;
    wire i_mul65_5_cnn961_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_5_cnn961_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_5_cnn961_im0_cma_ch [0:0];
    wire [10:0] i_mul65_5_cnn961_im0_cma_a0;
    wire [2:0] i_mul65_5_cnn961_im0_cma_c0;
    wire [21:0] i_mul65_5_cnn961_im0_cma_s0;
    wire [21:0] i_mul65_5_cnn961_im0_cma_qq;
    reg [21:0] i_mul65_5_cnn961_im0_cma_q;
    wire i_mul65_5_cnn961_im0_cma_ena0;
    wire i_mul65_5_cnn961_im0_cma_ena1;
    wire i_mul65_5_cnn961_im0_cma_ena2;
    wire i_mul65_5_cnn961_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_5_cnn961_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_5_cnn961_im5_cma_ch [0:0];
    wire [18:0] i_mul65_5_cnn961_im5_cma_a0;
    wire [2:0] i_mul65_5_cnn961_im5_cma_c0;
    wire [29:0] i_mul65_5_cnn961_im5_cma_s0;
    wire [29:0] i_mul65_5_cnn961_im5_cma_qq;
    reg [29:0] i_mul65_5_cnn961_im5_cma_q;
    wire i_mul65_5_cnn961_im5_cma_ena0;
    wire i_mul65_5_cnn961_im5_cma_ena1;
    wire i_mul65_5_cnn961_im5_cma_ena2;
    wire i_mul65_5_cnn961_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_5_cnn961_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_5_cnn961_im10_cma_ch [0:0];
    wire [18:0] i_mul65_5_cnn961_im10_cma_a0;
    wire [2:0] i_mul65_5_cnn961_im10_cma_c0;
    wire [29:0] i_mul65_5_cnn961_im10_cma_s0;
    wire [29:0] i_mul65_5_cnn961_im10_cma_qq;
    reg [29:0] i_mul65_5_cnn961_im10_cma_q;
    wire i_mul65_5_cnn961_im10_cma_ena0;
    wire i_mul65_5_cnn961_im10_cma_ena1;
    wire i_mul65_5_cnn961_im10_cma_ena2;
    wire i_mul65_5_cnn961_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_5_cnn961_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_5_cnn961_im15_cma_ch [0:0];
    wire [18:0] i_mul65_5_cnn961_im15_cma_a0;
    wire [2:0] i_mul65_5_cnn961_im15_cma_c0;
    wire [29:0] i_mul65_5_cnn961_im15_cma_s0;
    wire [29:0] i_mul65_5_cnn961_im15_cma_qq;
    reg [29:0] i_mul65_5_cnn961_im15_cma_q;
    wire i_mul65_5_cnn961_im15_cma_ena0;
    wire i_mul65_5_cnn961_im15_cma_ena1;
    wire i_mul65_5_cnn961_im15_cma_ena2;
    wire i_mul65_6_cnn1000_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_6_cnn1000_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_6_cnn1000_im0_cma_ch [0:0];
    wire [10:0] i_mul65_6_cnn1000_im0_cma_a0;
    wire [2:0] i_mul65_6_cnn1000_im0_cma_c0;
    wire [21:0] i_mul65_6_cnn1000_im0_cma_s0;
    wire [21:0] i_mul65_6_cnn1000_im0_cma_qq;
    reg [21:0] i_mul65_6_cnn1000_im0_cma_q;
    wire i_mul65_6_cnn1000_im0_cma_ena0;
    wire i_mul65_6_cnn1000_im0_cma_ena1;
    wire i_mul65_6_cnn1000_im0_cma_ena2;
    wire i_mul65_6_cnn1000_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_6_cnn1000_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_6_cnn1000_im5_cma_ch [0:0];
    wire [18:0] i_mul65_6_cnn1000_im5_cma_a0;
    wire [2:0] i_mul65_6_cnn1000_im5_cma_c0;
    wire [29:0] i_mul65_6_cnn1000_im5_cma_s0;
    wire [29:0] i_mul65_6_cnn1000_im5_cma_qq;
    reg [29:0] i_mul65_6_cnn1000_im5_cma_q;
    wire i_mul65_6_cnn1000_im5_cma_ena0;
    wire i_mul65_6_cnn1000_im5_cma_ena1;
    wire i_mul65_6_cnn1000_im5_cma_ena2;
    wire i_mul65_6_cnn1000_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_6_cnn1000_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_6_cnn1000_im10_cma_ch [0:0];
    wire [18:0] i_mul65_6_cnn1000_im10_cma_a0;
    wire [2:0] i_mul65_6_cnn1000_im10_cma_c0;
    wire [29:0] i_mul65_6_cnn1000_im10_cma_s0;
    wire [29:0] i_mul65_6_cnn1000_im10_cma_qq;
    reg [29:0] i_mul65_6_cnn1000_im10_cma_q;
    wire i_mul65_6_cnn1000_im10_cma_ena0;
    wire i_mul65_6_cnn1000_im10_cma_ena1;
    wire i_mul65_6_cnn1000_im10_cma_ena2;
    wire i_mul65_6_cnn1000_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_6_cnn1000_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_6_cnn1000_im15_cma_ch [0:0];
    wire [18:0] i_mul65_6_cnn1000_im15_cma_a0;
    wire [2:0] i_mul65_6_cnn1000_im15_cma_c0;
    wire [29:0] i_mul65_6_cnn1000_im15_cma_s0;
    wire [29:0] i_mul65_6_cnn1000_im15_cma_qq;
    reg [29:0] i_mul65_6_cnn1000_im15_cma_q;
    wire i_mul65_6_cnn1000_im15_cma_ena0;
    wire i_mul65_6_cnn1000_im15_cma_ena1;
    wire i_mul65_6_cnn1000_im15_cma_ena2;
    wire i_mul65_7_cnn1039_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_7_cnn1039_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_7_cnn1039_im0_cma_ch [0:0];
    wire [10:0] i_mul65_7_cnn1039_im0_cma_a0;
    wire [2:0] i_mul65_7_cnn1039_im0_cma_c0;
    wire [21:0] i_mul65_7_cnn1039_im0_cma_s0;
    wire [21:0] i_mul65_7_cnn1039_im0_cma_qq;
    reg [21:0] i_mul65_7_cnn1039_im0_cma_q;
    wire i_mul65_7_cnn1039_im0_cma_ena0;
    wire i_mul65_7_cnn1039_im0_cma_ena1;
    wire i_mul65_7_cnn1039_im0_cma_ena2;
    wire i_mul65_7_cnn1039_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_7_cnn1039_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_7_cnn1039_im5_cma_ch [0:0];
    wire [18:0] i_mul65_7_cnn1039_im5_cma_a0;
    wire [2:0] i_mul65_7_cnn1039_im5_cma_c0;
    wire [29:0] i_mul65_7_cnn1039_im5_cma_s0;
    wire [29:0] i_mul65_7_cnn1039_im5_cma_qq;
    reg [29:0] i_mul65_7_cnn1039_im5_cma_q;
    wire i_mul65_7_cnn1039_im5_cma_ena0;
    wire i_mul65_7_cnn1039_im5_cma_ena1;
    wire i_mul65_7_cnn1039_im5_cma_ena2;
    wire i_mul65_7_cnn1039_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_7_cnn1039_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_7_cnn1039_im10_cma_ch [0:0];
    wire [18:0] i_mul65_7_cnn1039_im10_cma_a0;
    wire [2:0] i_mul65_7_cnn1039_im10_cma_c0;
    wire [29:0] i_mul65_7_cnn1039_im10_cma_s0;
    wire [29:0] i_mul65_7_cnn1039_im10_cma_qq;
    reg [29:0] i_mul65_7_cnn1039_im10_cma_q;
    wire i_mul65_7_cnn1039_im10_cma_ena0;
    wire i_mul65_7_cnn1039_im10_cma_ena1;
    wire i_mul65_7_cnn1039_im10_cma_ena2;
    wire i_mul65_7_cnn1039_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_7_cnn1039_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_7_cnn1039_im15_cma_ch [0:0];
    wire [18:0] i_mul65_7_cnn1039_im15_cma_a0;
    wire [2:0] i_mul65_7_cnn1039_im15_cma_c0;
    wire [29:0] i_mul65_7_cnn1039_im15_cma_s0;
    wire [29:0] i_mul65_7_cnn1039_im15_cma_qq;
    reg [29:0] i_mul65_7_cnn1039_im15_cma_q;
    wire i_mul65_7_cnn1039_im15_cma_ena0;
    wire i_mul65_7_cnn1039_im15_cma_ena1;
    wire i_mul65_7_cnn1039_im15_cma_ena2;
    wire i_mul65_8_cnn1078_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_8_cnn1078_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_8_cnn1078_im0_cma_ch [0:0];
    wire [10:0] i_mul65_8_cnn1078_im0_cma_a0;
    wire [2:0] i_mul65_8_cnn1078_im0_cma_c0;
    wire [21:0] i_mul65_8_cnn1078_im0_cma_s0;
    wire [21:0] i_mul65_8_cnn1078_im0_cma_qq;
    reg [21:0] i_mul65_8_cnn1078_im0_cma_q;
    wire i_mul65_8_cnn1078_im0_cma_ena0;
    wire i_mul65_8_cnn1078_im0_cma_ena1;
    wire i_mul65_8_cnn1078_im0_cma_ena2;
    wire i_mul65_8_cnn1078_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_8_cnn1078_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_8_cnn1078_im5_cma_ch [0:0];
    wire [18:0] i_mul65_8_cnn1078_im5_cma_a0;
    wire [2:0] i_mul65_8_cnn1078_im5_cma_c0;
    wire [29:0] i_mul65_8_cnn1078_im5_cma_s0;
    wire [29:0] i_mul65_8_cnn1078_im5_cma_qq;
    reg [29:0] i_mul65_8_cnn1078_im5_cma_q;
    wire i_mul65_8_cnn1078_im5_cma_ena0;
    wire i_mul65_8_cnn1078_im5_cma_ena1;
    wire i_mul65_8_cnn1078_im5_cma_ena2;
    wire i_mul65_8_cnn1078_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_8_cnn1078_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_8_cnn1078_im10_cma_ch [0:0];
    wire [18:0] i_mul65_8_cnn1078_im10_cma_a0;
    wire [2:0] i_mul65_8_cnn1078_im10_cma_c0;
    wire [29:0] i_mul65_8_cnn1078_im10_cma_s0;
    wire [29:0] i_mul65_8_cnn1078_im10_cma_qq;
    reg [29:0] i_mul65_8_cnn1078_im10_cma_q;
    wire i_mul65_8_cnn1078_im10_cma_ena0;
    wire i_mul65_8_cnn1078_im10_cma_ena1;
    wire i_mul65_8_cnn1078_im10_cma_ena2;
    wire i_mul65_8_cnn1078_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_8_cnn1078_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_8_cnn1078_im15_cma_ch [0:0];
    wire [18:0] i_mul65_8_cnn1078_im15_cma_a0;
    wire [2:0] i_mul65_8_cnn1078_im15_cma_c0;
    wire [29:0] i_mul65_8_cnn1078_im15_cma_s0;
    wire [29:0] i_mul65_8_cnn1078_im15_cma_qq;
    reg [29:0] i_mul65_8_cnn1078_im15_cma_q;
    wire i_mul65_8_cnn1078_im15_cma_ena0;
    wire i_mul65_8_cnn1078_im15_cma_ena1;
    wire i_mul65_8_cnn1078_im15_cma_ena2;
    wire i_mul65_9_cnn1117_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_9_cnn1117_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_9_cnn1117_im0_cma_ch [0:0];
    wire [10:0] i_mul65_9_cnn1117_im0_cma_a0;
    wire [2:0] i_mul65_9_cnn1117_im0_cma_c0;
    wire [21:0] i_mul65_9_cnn1117_im0_cma_s0;
    wire [21:0] i_mul65_9_cnn1117_im0_cma_qq;
    reg [21:0] i_mul65_9_cnn1117_im0_cma_q;
    wire i_mul65_9_cnn1117_im0_cma_ena0;
    wire i_mul65_9_cnn1117_im0_cma_ena1;
    wire i_mul65_9_cnn1117_im0_cma_ena2;
    wire i_mul65_9_cnn1117_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_9_cnn1117_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_9_cnn1117_im5_cma_ch [0:0];
    wire [18:0] i_mul65_9_cnn1117_im5_cma_a0;
    wire [2:0] i_mul65_9_cnn1117_im5_cma_c0;
    wire [29:0] i_mul65_9_cnn1117_im5_cma_s0;
    wire [29:0] i_mul65_9_cnn1117_im5_cma_qq;
    reg [29:0] i_mul65_9_cnn1117_im5_cma_q;
    wire i_mul65_9_cnn1117_im5_cma_ena0;
    wire i_mul65_9_cnn1117_im5_cma_ena1;
    wire i_mul65_9_cnn1117_im5_cma_ena2;
    wire i_mul65_9_cnn1117_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_9_cnn1117_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_9_cnn1117_im10_cma_ch [0:0];
    wire [18:0] i_mul65_9_cnn1117_im10_cma_a0;
    wire [2:0] i_mul65_9_cnn1117_im10_cma_c0;
    wire [29:0] i_mul65_9_cnn1117_im10_cma_s0;
    wire [29:0] i_mul65_9_cnn1117_im10_cma_qq;
    reg [29:0] i_mul65_9_cnn1117_im10_cma_q;
    wire i_mul65_9_cnn1117_im10_cma_ena0;
    wire i_mul65_9_cnn1117_im10_cma_ena1;
    wire i_mul65_9_cnn1117_im10_cma_ena2;
    wire i_mul65_9_cnn1117_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_9_cnn1117_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_9_cnn1117_im15_cma_ch [0:0];
    wire [18:0] i_mul65_9_cnn1117_im15_cma_a0;
    wire [2:0] i_mul65_9_cnn1117_im15_cma_c0;
    wire [29:0] i_mul65_9_cnn1117_im15_cma_s0;
    wire [29:0] i_mul65_9_cnn1117_im15_cma_qq;
    reg [29:0] i_mul65_9_cnn1117_im15_cma_q;
    wire i_mul65_9_cnn1117_im15_cma_ena0;
    wire i_mul65_9_cnn1117_im15_cma_ena1;
    wire i_mul65_9_cnn1117_im15_cma_ena2;
    wire i_mul65_cnn759_im0_cma_reset;
    (* preserve_syn_only *) reg signed [10:0] i_mul65_cnn759_im0_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_cnn759_im0_cma_ch [0:0];
    wire [10:0] i_mul65_cnn759_im0_cma_a0;
    wire [2:0] i_mul65_cnn759_im0_cma_c0;
    wire [21:0] i_mul65_cnn759_im0_cma_s0;
    wire [21:0] i_mul65_cnn759_im0_cma_qq;
    reg [21:0] i_mul65_cnn759_im0_cma_q;
    wire i_mul65_cnn759_im0_cma_ena0;
    wire i_mul65_cnn759_im0_cma_ena1;
    wire i_mul65_cnn759_im0_cma_ena2;
    wire i_mul65_cnn759_im5_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_cnn759_im5_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_cnn759_im5_cma_ch [0:0];
    wire [18:0] i_mul65_cnn759_im5_cma_a0;
    wire [2:0] i_mul65_cnn759_im5_cma_c0;
    wire [29:0] i_mul65_cnn759_im5_cma_s0;
    wire [29:0] i_mul65_cnn759_im5_cma_qq;
    reg [29:0] i_mul65_cnn759_im5_cma_q;
    wire i_mul65_cnn759_im5_cma_ena0;
    wire i_mul65_cnn759_im5_cma_ena1;
    wire i_mul65_cnn759_im5_cma_ena2;
    wire i_mul65_cnn759_im10_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_cnn759_im10_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_cnn759_im10_cma_ch [0:0];
    wire [18:0] i_mul65_cnn759_im10_cma_a0;
    wire [2:0] i_mul65_cnn759_im10_cma_c0;
    wire [29:0] i_mul65_cnn759_im10_cma_s0;
    wire [29:0] i_mul65_cnn759_im10_cma_qq;
    reg [29:0] i_mul65_cnn759_im10_cma_q;
    wire i_mul65_cnn759_im10_cma_ena0;
    wire i_mul65_cnn759_im10_cma_ena1;
    wire i_mul65_cnn759_im10_cma_ena2;
    wire i_mul65_cnn759_im15_cma_reset;
    (* preserve_syn_only *) reg signed [18:0] i_mul65_cnn759_im15_cma_ah [0:0];
    (* preserve_syn_only *) reg [2:0] i_mul65_cnn759_im15_cma_ch [0:0];
    wire [18:0] i_mul65_cnn759_im15_cma_a0;
    wire [2:0] i_mul65_cnn759_im15_cma_c0;
    wire [29:0] i_mul65_cnn759_im15_cma_s0;
    wire [29:0] i_mul65_cnn759_im15_cma_qq;
    reg [29:0] i_mul65_cnn759_im15_cma_q;
    wire i_mul65_cnn759_im15_cma_ena0;
    wire i_mul65_cnn759_im15_cma_ena1;
    wire i_mul65_cnn759_im15_cma_ena2;
    wire [0:0] i_inc79_10_cnn1194_vt_select_2_merged_bit_select_b;
    wire [59:0] i_inc79_10_cnn1194_vt_select_2_merged_bit_select_c;
    wire [9:0] i_mul65_11_cnn1195_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_11_cnn1195_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_11_cnn1195_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_11_cnn1195_bs1_merged_bit_select_e;
    wire [1:0] i_inc79_11_cnn1233_vt_select_1_merged_bit_select_b;
    wire [59:0] i_inc79_11_cnn1233_vt_select_1_merged_bit_select_c;
    wire [9:0] i_mul65_12_cnn1234_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_12_cnn1234_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_12_cnn1234_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_12_cnn1234_bs1_merged_bit_select_e;
    wire [0:0] i_inc79_12_cnn1272_vt_select_1_merged_bit_select_b;
    wire [59:0] i_inc79_12_cnn1272_vt_select_1_merged_bit_select_c;
    wire [9:0] i_mul65_13_cnn1273_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_13_cnn1273_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_13_cnn1273_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_13_cnn1273_bs1_merged_bit_select_e;
    wire [0:0] i_inc79_13_cnn1311_vt_select_0_merged_bit_select_b;
    wire [59:0] i_inc79_13_cnn1311_vt_select_0_merged_bit_select_c;
    wire [9:0] i_mul65_14_cnn1312_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_14_cnn1312_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_14_cnn1312_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_14_cnn1312_bs1_merged_bit_select_e;
    wire [9:0] i_mul65_15_cnn1351_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_15_cnn1351_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_15_cnn1351_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_15_cnn1351_bs1_merged_bit_select_e;
    wire [0:0] i_inc79_1_cnn843_vt_select_0_merged_bit_select_b;
    wire [61:0] i_inc79_1_cnn843_vt_select_0_merged_bit_select_c;
    wire [9:0] i_mul65_2_cnn844_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_2_cnn844_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_2_cnn844_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_2_cnn844_bs1_merged_bit_select_e;
    wire [9:0] i_mul65_3_cnn883_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_3_cnn883_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_3_cnn883_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_3_cnn883_bs1_merged_bit_select_e;
    wire [1:0] i_inc79_3_cnn921_vt_select_1_merged_bit_select_b;
    wire [60:0] i_inc79_3_cnn921_vt_select_1_merged_bit_select_c;
    wire [9:0] i_mul65_4_cnn922_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_4_cnn922_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_4_cnn922_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_4_cnn922_bs1_merged_bit_select_e;
    wire [0:0] i_inc79_4_cnn960_vt_select_1_merged_bit_select_b;
    wire [60:0] i_inc79_4_cnn960_vt_select_1_merged_bit_select_c;
    wire [9:0] i_mul65_5_cnn961_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_5_cnn961_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_5_cnn961_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_5_cnn961_bs1_merged_bit_select_e;
    wire [0:0] i_inc79_5_cnn999_vt_select_0_merged_bit_select_b;
    wire [60:0] i_inc79_5_cnn999_vt_select_0_merged_bit_select_c;
    wire [9:0] i_mul65_6_cnn1000_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_6_cnn1000_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_6_cnn1000_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_6_cnn1000_bs1_merged_bit_select_e;
    wire [9:0] i_mul65_7_cnn1039_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_7_cnn1039_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_7_cnn1039_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_7_cnn1039_bs1_merged_bit_select_e;
    wire [2:0] i_inc79_7_cnn1077_vt_select_2_merged_bit_select_b;
    wire [59:0] i_inc79_7_cnn1077_vt_select_2_merged_bit_select_c;
    wire [9:0] i_mul65_8_cnn1078_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_8_cnn1078_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_8_cnn1078_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_8_cnn1078_bs1_merged_bit_select_e;
    wire [1:0] i_inc79_8_cnn1116_vt_select_2_merged_bit_select_b;
    wire [59:0] i_inc79_8_cnn1116_vt_select_2_merged_bit_select_c;
    wire [9:0] i_mul65_9_cnn1117_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_9_cnn1117_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_9_cnn1117_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_9_cnn1117_bs1_merged_bit_select_e;
    wire [0:0] i_inc79_9_cnn1155_vt_select_0_merged_bit_select_b;
    wire [0:0] i_inc79_9_cnn1155_vt_select_0_merged_bit_select_c;
    wire [59:0] i_inc79_9_cnn1155_vt_select_0_merged_bit_select_d;
    wire [9:0] i_mul65_10_cnn1156_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_10_cnn1156_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_10_cnn1156_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_10_cnn1156_bs1_merged_bit_select_e;
    wire [9:0] i_mul65_1_cnn805_bs1_merged_bit_select_b;
    wire [17:0] i_mul65_1_cnn805_bs1_merged_bit_select_c;
    wire [17:0] i_mul65_1_cnn805_bs1_merged_bit_select_d;
    wire [17:0] i_mul65_1_cnn805_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_e;
    wire [9:0] i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_b;
    wire [17:0] i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_c;
    wire [17:0] i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_d;
    wire [17:0] i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_e;
    reg [29:0] redist0_i_mul65_cnn759_im15_cma_q_1_q;
    reg [29:0] redist1_i_mul65_cnn759_im10_cma_q_1_q;
    reg [29:0] redist2_i_mul65_cnn759_im5_cma_q_1_q;
    reg [21:0] redist3_i_mul65_cnn759_im0_cma_q_1_q;
    reg [29:0] redist4_i_mul65_9_cnn1117_im15_cma_q_1_q;
    reg [29:0] redist5_i_mul65_9_cnn1117_im10_cma_q_1_q;
    reg [29:0] redist6_i_mul65_9_cnn1117_im5_cma_q_1_q;
    reg [21:0] redist7_i_mul65_9_cnn1117_im0_cma_q_1_q;
    reg [29:0] redist8_i_mul65_8_cnn1078_im15_cma_q_1_q;
    reg [29:0] redist9_i_mul65_8_cnn1078_im10_cma_q_1_q;
    reg [29:0] redist10_i_mul65_8_cnn1078_im5_cma_q_1_q;
    reg [21:0] redist11_i_mul65_8_cnn1078_im0_cma_q_1_q;
    reg [29:0] redist12_i_mul65_7_cnn1039_im15_cma_q_1_q;
    reg [29:0] redist13_i_mul65_7_cnn1039_im10_cma_q_1_q;
    reg [29:0] redist14_i_mul65_7_cnn1039_im5_cma_q_1_q;
    reg [21:0] redist15_i_mul65_7_cnn1039_im0_cma_q_1_q;
    reg [29:0] redist16_i_mul65_6_cnn1000_im15_cma_q_1_q;
    reg [29:0] redist17_i_mul65_6_cnn1000_im10_cma_q_1_q;
    reg [29:0] redist18_i_mul65_6_cnn1000_im5_cma_q_1_q;
    reg [21:0] redist19_i_mul65_6_cnn1000_im0_cma_q_1_q;
    reg [29:0] redist20_i_mul65_5_cnn961_im15_cma_q_1_q;
    reg [29:0] redist21_i_mul65_5_cnn961_im10_cma_q_1_q;
    reg [29:0] redist22_i_mul65_5_cnn961_im5_cma_q_1_q;
    reg [21:0] redist23_i_mul65_5_cnn961_im0_cma_q_1_q;
    reg [29:0] redist24_i_mul65_4_cnn922_im15_cma_q_1_q;
    reg [29:0] redist25_i_mul65_4_cnn922_im10_cma_q_1_q;
    reg [29:0] redist26_i_mul65_4_cnn922_im5_cma_q_1_q;
    reg [21:0] redist27_i_mul65_4_cnn922_im0_cma_q_1_q;
    reg [29:0] redist28_i_mul65_3_cnn883_im15_cma_q_1_q;
    reg [29:0] redist29_i_mul65_3_cnn883_im10_cma_q_1_q;
    reg [29:0] redist30_i_mul65_3_cnn883_im5_cma_q_1_q;
    reg [21:0] redist31_i_mul65_3_cnn883_im0_cma_q_1_q;
    reg [29:0] redist32_i_mul65_2_cnn844_im15_cma_q_1_q;
    reg [29:0] redist33_i_mul65_2_cnn844_im10_cma_q_1_q;
    reg [29:0] redist34_i_mul65_2_cnn844_im5_cma_q_1_q;
    reg [21:0] redist35_i_mul65_2_cnn844_im0_cma_q_1_q;
    reg [29:0] redist36_i_mul65_1_cnn805_im15_cma_q_1_q;
    reg [29:0] redist37_i_mul65_1_cnn805_im10_cma_q_1_q;
    reg [29:0] redist38_i_mul65_1_cnn805_im5_cma_q_1_q;
    reg [21:0] redist39_i_mul65_1_cnn805_im0_cma_q_1_q;
    reg [29:0] redist40_i_mul65_15_cnn1351_im15_cma_q_1_q;
    reg [29:0] redist41_i_mul65_15_cnn1351_im10_cma_q_1_q;
    reg [29:0] redist42_i_mul65_15_cnn1351_im5_cma_q_1_q;
    reg [21:0] redist43_i_mul65_15_cnn1351_im0_cma_q_1_q;
    reg [29:0] redist44_i_mul65_14_cnn1312_im15_cma_q_1_q;
    reg [29:0] redist45_i_mul65_14_cnn1312_im10_cma_q_1_q;
    reg [29:0] redist46_i_mul65_14_cnn1312_im5_cma_q_1_q;
    reg [21:0] redist47_i_mul65_14_cnn1312_im0_cma_q_1_q;
    reg [29:0] redist48_i_mul65_13_cnn1273_im15_cma_q_1_q;
    reg [29:0] redist49_i_mul65_13_cnn1273_im10_cma_q_1_q;
    reg [29:0] redist50_i_mul65_13_cnn1273_im5_cma_q_1_q;
    reg [21:0] redist51_i_mul65_13_cnn1273_im0_cma_q_1_q;
    reg [29:0] redist52_i_mul65_12_cnn1234_im15_cma_q_1_q;
    reg [29:0] redist53_i_mul65_12_cnn1234_im10_cma_q_1_q;
    reg [29:0] redist54_i_mul65_12_cnn1234_im5_cma_q_1_q;
    reg [21:0] redist55_i_mul65_12_cnn1234_im0_cma_q_1_q;
    reg [29:0] redist56_i_mul65_11_cnn1195_im15_cma_q_1_q;
    reg [29:0] redist57_i_mul65_11_cnn1195_im10_cma_q_1_q;
    reg [29:0] redist58_i_mul65_11_cnn1195_im5_cma_q_1_q;
    reg [21:0] redist59_i_mul65_11_cnn1195_im0_cma_q_1_q;
    reg [29:0] redist60_i_mul65_10_cnn1156_im15_cma_q_1_q;
    reg [29:0] redist61_i_mul65_10_cnn1156_im10_cma_q_1_q;
    reg [29:0] redist62_i_mul65_10_cnn1156_im5_cma_q_1_q;
    reg [21:0] redist63_i_mul65_10_cnn1156_im0_cma_q_1_q;
    reg [0:0] redist64_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist65_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist66_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist67_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist68_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist69_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist70_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist71_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist72_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist73_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist74_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist75_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist76_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist77_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist78_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist79_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist80_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist81_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist82_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist83_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist84_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist85_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist86_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist87_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist88_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist89_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist90_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist91_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist92_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist93_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist94_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist95_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist96_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist97_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist98_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist99_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist100_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist101_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist102_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist103_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist104_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist105_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist106_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist107_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist108_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist109_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist110_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist111_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist112_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist113_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist114_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist115_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist116_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist117_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist118_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist119_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist120_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist121_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist122_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist123_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist124_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist125_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist126_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist127_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist128_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist129_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist130_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist131_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist132_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist133_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist134_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist135_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist136_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist137_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist138_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist139_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist140_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist141_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist142_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist143_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist144_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist145_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist146_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist147_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist148_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist149_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist150_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist151_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist152_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist153_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist154_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist155_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist156_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist157_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist158_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist159_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist160_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist161_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist162_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist163_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist164_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist165_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist166_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist167_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist168_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist169_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist170_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist171_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist172_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist173_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist174_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist175_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist176_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist177_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist178_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist179_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist180_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist181_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist182_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist183_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist184_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist185_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist186_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist187_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist188_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist189_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist190_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist191_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist192_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist193_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist194_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist195_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist196_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist197_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist198_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist199_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist200_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist201_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist202_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist203_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist204_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist205_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist206_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist207_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist208_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist209_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist210_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist211_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist212_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist213_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist214_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist215_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist216_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist217_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist218_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist219_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist220_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist221_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist222_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist223_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist224_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist225_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist226_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist227_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist228_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist229_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist230_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist231_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist232_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist233_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist234_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist235_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist236_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist237_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist238_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist239_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist240_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist241_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist242_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist243_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist244_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist245_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist246_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist247_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist248_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist249_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist250_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist251_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist252_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist253_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist254_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist255_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist256_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist257_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist258_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist259_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist260_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist261_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist262_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist263_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist264_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist265_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist266_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist267_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist268_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist269_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist270_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist271_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist272_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist273_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist274_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist275_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist276_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist277_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist278_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist279_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist280_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist281_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist282_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist283_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist284_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist285_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist286_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist287_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist288_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist289_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist290_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist291_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist292_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist293_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist294_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist295_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist296_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist297_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist298_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist299_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist300_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist301_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist302_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist303_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist304_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist305_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist306_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist307_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist308_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist309_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist310_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist311_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist312_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist313_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist314_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist315_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist316_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist317_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist318_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist319_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist320_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist321_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist322_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist323_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist324_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist325_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist326_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist327_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist328_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist329_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist330_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist331_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist332_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist333_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist334_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist335_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist336_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist337_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist338_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist339_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist340_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist341_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist342_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist343_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist344_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist345_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist346_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist347_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist348_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist349_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist350_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist351_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist352_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist353_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q;
    reg [0:0] redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist361_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist362_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist376_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist377_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist391_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist392_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist406_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist407_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist421_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist422_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist436_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist437_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist451_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist452_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist466_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist467_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist481_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist482_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist496_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist497_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist511_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist512_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist526_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist527_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist541_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist542_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist556_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist557_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist571_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist572_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [0:0] redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q;
    reg [0:0] redist586_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q;
    reg [4:0] redist587_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q;
    reg [0:0] redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q;
    reg [69:0] redist594_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist595_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist596_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist597_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist598_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist599_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist600_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist601_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist602_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist603_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist604_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist605_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist606_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist607_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist608_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist609_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist610_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist611_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist612_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist613_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist614_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist615_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist616_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist617_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist618_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist619_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist620_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist621_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist622_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist623_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist624_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist625_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist626_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist627_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist628_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist629_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist630_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist631_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist632_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist633_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist634_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist635_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist636_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist637_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist638_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist639_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist640_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist641_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist642_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist643_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist644_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist645_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist646_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist647_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist648_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist649_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist650_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist651_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist652_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist653_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist654_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist655_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist656_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist657_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist658_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist659_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist660_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist661_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist662_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist663_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist664_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist665_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist666_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist667_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist668_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist669_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist670_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist671_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist672_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist673_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist674_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist675_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist676_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist677_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist678_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist679_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist680_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist681_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist682_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist683_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist684_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist685_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist686_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist687_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist688_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist689_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist690_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist691_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist692_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist693_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist694_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist695_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist696_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist697_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist698_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist699_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist700_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist701_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist702_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist703_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist704_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist705_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist706_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist707_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist708_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist709_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist710_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist711_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist712_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist713_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist714_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist715_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist716_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist717_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist718_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist719_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist720_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist721_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist722_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist723_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist724_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist725_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist726_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist727_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist728_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist729_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist730_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist731_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist732_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist733_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist734_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist735_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist736_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist737_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist738_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist739_i_mul65_cnn759_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist740_i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist741_i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist742_i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist743_i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist744_i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist745_i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist746_i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist747_i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist748_i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist749_i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist750_i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist751_i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist752_i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist753_i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [69:0] redist754_i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_q_1_q;
    reg [0:0] redist756_sync_in_aunroll_x_in_c0_eni12_2_752_q;
    reg [0:0] redist757_sync_in_aunroll_x_in_c0_eni12_2_753_q;
    reg [0:0] redist758_sync_in_aunroll_x_in_c0_eni12_2_768_q;
    reg [0:0] redist765_sync_in_aunroll_x_in_c0_eni12_9_753_q;
    reg [0:0] redist766_sync_in_aunroll_x_in_c0_eni12_10_754_q;
    reg [0:0] redist768_sync_in_aunroll_x_in_c0_eni12_12_754_q;
    reg [0:0] redist769_sync_in_aunroll_x_in_i_valid_753_q;
    reg [0:0] redist770_sync_in_aunroll_x_in_i_valid_754_q;
    reg [0:0] redist771_sync_in_aunroll_x_in_i_valid_759_q;
    reg [0:0] redist771_sync_in_aunroll_x_in_i_valid_759_delay_0;
    reg [0:0] redist771_sync_in_aunroll_x_in_i_valid_759_delay_1;
    reg [0:0] redist771_sync_in_aunroll_x_in_i_valid_759_delay_2;
    reg [0:0] redist771_sync_in_aunroll_x_in_i_valid_759_delay_3;
    reg [0:0] redist772_sync_in_aunroll_x_in_i_valid_766_q;
    reg [0:0] redist773_sync_in_aunroll_x_in_i_valid_768_q;
    reg [0:0] redist773_sync_in_aunroll_x_in_i_valid_768_delay_0;
    reg [63:0] redist775_bgTrunc_i_mul69_add4_cnn741_sel_x_b_1_q;
    reg [63:0] redist776_bgTrunc_i_mul69_add2_cnn737_sel_x_b_1_q;
    reg [63:0] redist777_bgTrunc_i_mul69_3_cnn747_sel_x_b_1_q;
    reg [63:0] redist778_bgTrunc_i_mul69_2_cnn745_sel_x_b_1_q;
    reg [63:0] redist779_bgTrunc_i_mul69_1_cnn743_sel_x_b_1_q;
    reg [0:0] redist780_i_unnamed_cnn1399_q_15_q;
    reg [63:0] redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_q;
    reg [63:0] redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_delay_0;
    reg [63:0] redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_delay_1;
    reg [63:0] redist784_i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out_1_q;
    reg [63:0] redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_q;
    reg [63:0] redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_delay_0;
    reg [63:0] redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_delay_1;
    reg [63:0] redist790_i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_data_out_1_q;
    reg [0:0] redist793_i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out_15_q;
    reg [0:0] redist794_i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out_14_q;
    reg [0:0] redist795_i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out_14_q;
    reg [63:0] redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_q;
    reg [63:0] redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_delay_0;
    reg [0:0] redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_q;
    reg [0:0] redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_0;
    reg [0:0] redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_1;
    reg [0:0] redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_2;
    reg [0:0] redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_3;
    reg [0:0] redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q;
    reg [61:0] redist799_i_add_ptr70_cnn765_vt_select_63_b_1_q;
    reg [61:0] redist800_i_add_ptr70_9_cnn1123_vt_select_63_b_1_q;
    reg [61:0] redist801_i_add_ptr70_8_cnn1084_vt_select_63_b_1_q;
    reg [61:0] redist802_i_add_ptr70_7_cnn1045_vt_select_63_b_1_q;
    reg [61:0] redist803_i_add_ptr70_6_cnn1006_vt_select_63_b_1_q;
    reg [61:0] redist804_i_add_ptr70_5_cnn967_vt_select_63_b_1_q;
    reg [61:0] redist805_i_add_ptr70_4_cnn928_vt_select_63_b_1_q;
    reg [61:0] redist806_i_add_ptr70_3_cnn796_vt_select_63_b_1_q;
    reg [61:0] redist807_i_add_ptr70_3_9_cnn1147_vt_select_63_b_1_q;
    reg [61:0] redist808_i_add_ptr70_3_8_cnn1108_vt_select_63_b_1_q;
    reg [61:0] redist809_i_add_ptr70_3_7_cnn1069_vt_select_63_b_1_q;
    reg [61:0] redist810_i_add_ptr70_3_6_cnn1030_vt_select_63_b_1_q;
    reg [61:0] redist811_i_add_ptr70_3_5_cnn991_vt_select_63_b_1_q;
    reg [61:0] redist812_i_add_ptr70_3_4_cnn952_vt_select_63_b_1_q;
    reg [61:0] redist813_i_add_ptr70_3_3_cnn913_vt_select_63_b_1_q;
    reg [61:0] redist814_i_add_ptr70_3_2_cnn874_vt_select_63_b_1_q;
    reg [61:0] redist815_i_add_ptr70_3_1_cnn835_vt_select_63_b_1_q;
    reg [61:0] redist816_i_add_ptr70_3_15_cnn1381_vt_select_63_b_1_q;
    reg [61:0] redist817_i_add_ptr70_3_14_cnn1342_vt_select_63_b_1_q;
    reg [61:0] redist818_i_add_ptr70_3_13_cnn1303_vt_select_63_b_1_q;
    reg [61:0] redist819_i_add_ptr70_3_12_cnn1264_vt_select_63_b_1_q;
    reg [61:0] redist820_i_add_ptr70_3_11_cnn1225_vt_select_63_b_1_q;
    reg [61:0] redist821_i_add_ptr70_3_10_cnn1186_vt_select_63_b_1_q;
    reg [61:0] redist822_i_add_ptr70_399_cnn889_vt_select_63_b_1_q;
    reg [61:0] redist823_i_add_ptr70_2_cnn788_vt_select_63_b_1_q;
    reg [61:0] redist824_i_add_ptr70_2_9_cnn1139_vt_select_63_b_1_q;
    reg [61:0] redist825_i_add_ptr70_2_8_cnn1100_vt_select_63_b_1_q;
    reg [61:0] redist826_i_add_ptr70_2_7_cnn1061_vt_select_63_b_1_q;
    reg [61:0] redist827_i_add_ptr70_2_6_cnn1022_vt_select_63_b_1_q;
    reg [61:0] redist828_i_add_ptr70_2_5_cnn983_vt_select_63_b_1_q;
    reg [61:0] redist829_i_add_ptr70_2_4_cnn944_vt_select_63_b_1_q;
    reg [61:0] redist830_i_add_ptr70_2_3_cnn905_vt_select_63_b_1_q;
    reg [61:0] redist831_i_add_ptr70_2_2_cnn866_vt_select_63_b_1_q;
    reg [61:0] redist832_i_add_ptr70_2_1_cnn827_vt_select_63_b_1_q;
    reg [61:0] redist833_i_add_ptr70_2_15_cnn1373_vt_select_63_b_1_q;
    reg [61:0] redist834_i_add_ptr70_2_14_cnn1334_vt_select_63_b_1_q;
    reg [61:0] redist835_i_add_ptr70_2_13_cnn1295_vt_select_63_b_1_q;
    reg [61:0] redist836_i_add_ptr70_2_12_cnn1256_vt_select_63_b_1_q;
    reg [61:0] redist837_i_add_ptr70_2_11_cnn1217_vt_select_63_b_1_q;
    reg [61:0] redist838_i_add_ptr70_2_10_cnn1178_vt_select_63_b_1_q;
    reg [61:0] redist839_i_add_ptr70_286_cnn850_vt_select_63_b_1_q;
    reg [61:0] redist840_i_add_ptr70_1_cnn780_vt_select_63_b_1_q;
    reg [61:0] redist841_i_add_ptr70_1_9_cnn1131_vt_select_63_b_1_q;
    reg [61:0] redist842_i_add_ptr70_1_8_cnn1092_vt_select_63_b_1_q;
    reg [61:0] redist843_i_add_ptr70_1_7_cnn1053_vt_select_63_b_1_q;
    reg [61:0] redist844_i_add_ptr70_1_6_cnn1014_vt_select_63_b_1_q;
    reg [61:0] redist845_i_add_ptr70_1_5_cnn975_vt_select_63_b_1_q;
    reg [61:0] redist846_i_add_ptr70_1_4_cnn936_vt_select_63_b_1_q;
    reg [61:0] redist847_i_add_ptr70_1_3_cnn897_vt_select_63_b_1_q;
    reg [61:0] redist848_i_add_ptr70_1_2_cnn858_vt_select_63_b_1_q;
    reg [61:0] redist849_i_add_ptr70_1_1_cnn819_vt_select_63_b_1_q;
    reg [61:0] redist850_i_add_ptr70_1_15_cnn1365_vt_select_63_b_1_q;
    reg [61:0] redist851_i_add_ptr70_1_14_cnn1326_vt_select_63_b_1_q;
    reg [61:0] redist852_i_add_ptr70_1_13_cnn1287_vt_select_63_b_1_q;
    reg [61:0] redist853_i_add_ptr70_1_12_cnn1248_vt_select_63_b_1_q;
    reg [61:0] redist854_i_add_ptr70_1_11_cnn1209_vt_select_63_b_1_q;
    reg [61:0] redist855_i_add_ptr70_1_10_cnn1170_vt_select_63_b_1_q;
    reg [61:0] redist856_i_add_ptr70_173_cnn811_vt_select_63_b_1_q;
    reg [61:0] redist857_i_add_ptr70_15_cnn1357_vt_select_63_b_1_q;
    reg [61:0] redist858_i_add_ptr70_14_cnn1318_vt_select_63_b_1_q;
    reg [61:0] redist859_i_add_ptr70_13_cnn1279_vt_select_63_b_1_q;
    reg [61:0] redist860_i_add_ptr70_12_cnn1240_vt_select_63_b_1_q;
    reg [61:0] redist861_i_add_ptr70_11_cnn1201_vt_select_63_b_1_q;
    reg [61:0] redist862_i_add_ptr70_10_cnn1162_vt_select_63_b_1_q;
    reg [61:0] redist863_i_add_ptr66_cnn763_vt_select_63_b_1_q;
    reg [60:0] redist864_i_add_ptr66_9_cnn1121_vt_select_63_b_1_q;
    reg [61:0] redist865_i_add_ptr66_8_cnn1082_vt_select_63_b_1_q;
    reg [58:0] redist866_i_add_ptr66_7_cnn1043_vt_select_63_b_1_q;
    reg [61:0] redist867_i_add_ptr66_6_cnn1004_vt_select_63_b_1_q;
    reg [60:0] redist868_i_add_ptr66_5_cnn965_vt_select_63_b_1_q;
    reg [61:0] redist869_i_add_ptr66_4_cnn926_vt_select_63_b_1_q;
    reg [59:0] redist870_i_add_ptr66_3_cnn887_vt_select_63_b_1_q;
    reg [61:0] redist871_i_add_ptr66_2_cnn848_vt_select_63_b_1_q;
    reg [60:0] redist872_i_add_ptr66_1_cnn809_vt_select_63_b_1_q;
    reg [57:0] redist873_i_add_ptr66_15_cnn1355_vt_select_63_b_1_q;
    reg [61:0] redist874_i_add_ptr66_14_cnn1316_vt_select_63_b_1_q;
    reg [60:0] redist875_i_add_ptr66_13_cnn1277_vt_select_63_b_1_q;
    reg [61:0] redist876_i_add_ptr66_12_cnn1238_vt_select_63_b_1_q;
    reg [59:0] redist877_i_add_ptr66_11_cnn1199_vt_select_63_b_1_q;
    reg [61:0] redist878_i_add_ptr66_10_cnn1160_vt_select_63_b_1_q;
    reg [63:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_inputreg0_q;
    reg [63:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_outputreg0_q;
    wire redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_reset0;
    wire [63:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_ia;
    wire [9:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_aa;
    wire [9:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_ab;
    wire [63:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_iq;
    wire [63:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_q;
    wire [9:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_i = 10'b1111111111;
    wire [9:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q;
    wire [10:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_a;
    wire [10:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_b;
    logic [10:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_o;
    wire [10:0] redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_q;
    reg [63:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_inputreg0_q;
    reg [63:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_outputreg0_q;
    wire redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_reset0;
    wire [63:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_ia;
    wire [9:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_aa;
    wire [9:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_ab;
    wire [63:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_iq;
    wire [63:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_q;
    wire [9:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_i = 10'b1111111111;
    wire [10:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_a;
    wire [10:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_b;
    logic [10:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_o;
    wire [10:0] redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_q;
    reg [63:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_inputreg0_q;
    reg [63:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_outputreg0_q;
    wire redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_reset0;
    wire [63:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_ia;
    wire [9:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_aa;
    wire [9:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_ab;
    wire [63:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_iq;
    wire [63:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_q;
    wire [9:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_i = 10'b1111111111;
    wire [9:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_offset_q;
    wire [10:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_a;
    wire [10:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_b;
    logic [10:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_o;
    wire [10:0] redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_q;
    reg [63:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_inputreg0_q;
    reg [63:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_outputreg0_q;
    wire redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_reset0;
    wire [63:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_ia;
    wire [9:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_aa;
    wire [9:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_ab;
    wire [63:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_iq;
    wire [63:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_q;
    wire [9:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_i = 10'b1111111111;
    wire [10:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_a;
    wire [10:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_b;
    logic [10:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_o;
    wire [10:0] redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_q;
    reg [63:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_inputreg0_q;
    reg [63:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_outputreg0_q;
    wire redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_reset0;
    wire [63:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_ia;
    wire [9:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_aa;
    wire [9:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_ab;
    wire [63:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_iq;
    wire [63:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_q;
    wire [9:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_i = 10'b1111111111;
    wire [10:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_a;
    wire [10:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_b;
    logic [10:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_o;
    wire [10:0] redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_q;
    reg [63:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_inputreg0_q;
    reg [63:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_outputreg0_q;
    wire redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_reset0;
    wire [63:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_ia;
    wire [9:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_aa;
    wire [9:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_ab;
    wire [63:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_iq;
    wire [63:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_q;
    wire [9:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_i = 10'b1111111111;
    wire [10:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_a;
    wire [10:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_b;
    logic [10:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_o;
    wire [10:0] redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_q;
    reg [63:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_inputreg0_q;
    reg [63:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_outputreg0_q;
    wire redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_reset0;
    wire [63:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_ia;
    wire [9:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_aa;
    wire [9:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_ab;
    wire [63:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_iq;
    wire [63:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_q;
    wire [9:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_i = 10'b1111111111;
    wire [10:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_a;
    wire [10:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_b;
    logic [10:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_o;
    wire [10:0] redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_q;
    reg [63:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_inputreg0_q;
    reg [63:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_outputreg0_q;
    wire redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_reset0;
    wire [63:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_ia;
    wire [9:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_aa;
    wire [9:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_ab;
    wire [63:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_iq;
    wire [63:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_q;
    wire [9:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [9:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_i = 10'b1111111111;
    wire [10:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_a;
    wire [10:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_b;
    logic [10:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_o;
    wire [10:0] redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_q;
    reg [63:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_inputreg0_q;
    reg [63:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_outputreg0_q;
    wire redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_reset0;
    wire [63:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_ia;
    wire [2:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_aa;
    wire [2:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_ab;
    wire [63:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_iq;
    wire [63:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_q;
    wire [2:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [2:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_i = 3'b111;
    wire [2:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_offset_q;
    wire [3:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_a;
    wire [3:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_b;
    logic [3:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_o;
    wire [3:0] redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_q;
    reg [63:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_inputreg0_q;
    reg [63:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_outputreg0_q;
    wire redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_reset0;
    wire [63:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_ia;
    wire [3:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_aa;
    wire [3:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_ab;
    wire [63:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_iq;
    wire [63:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_q;
    wire [3:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [3:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_i = 4'b1111;
    wire [4:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_a;
    wire [4:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_b;
    logic [4:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_o;
    wire [4:0] redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_q;
    reg [63:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_inputreg0_q;
    reg [63:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_outputreg0_q;
    wire redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_reset0;
    wire [63:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_ia;
    wire [3:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_aa;
    wire [3:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_ab;
    wire [63:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_iq;
    wire [63:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_q;
    wire [3:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [3:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_i = 4'b1111;
    wire [4:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_a;
    wire [4:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_b;
    logic [4:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_o;
    wire [4:0] redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_q;
    reg [63:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_inputreg0_q;
    reg [63:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0_q;
    wire redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_reset0;
    wire [63:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_ia;
    wire [1:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_aa;
    wire [1:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_ab;
    wire [63:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_iq;
    wire [63:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_q;
    wire [1:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [1:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_i = 2'b11;
    wire [2:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_a;
    wire [2:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_b;
    logic [2:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_o;
    wire [2:0] redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_q;
    reg [63:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_inputreg0_q;
    reg [63:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_outputreg0_q;
    wire redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_reset0;
    wire [63:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_ia;
    wire [1:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_aa;
    wire [1:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_ab;
    wire [63:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_iq;
    wire [63:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_q;
    wire [1:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [1:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_i = 2'b11;
    wire [1:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_offset_q;
    wire [2:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_a;
    wire [2:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_b;
    logic [2:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_o;
    wire [2:0] redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_q;
    reg [63:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_inputreg0_q;
    reg [63:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_outputreg0_q;
    wire redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_reset0;
    wire [63:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_ia;
    wire [2:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_aa;
    wire [2:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_ab;
    wire [63:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_iq;
    wire [63:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_q;
    wire [2:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [2:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_i = 3'b111;
    wire [2:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_offset_q;
    wire [3:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_a;
    wire [3:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_b;
    logic [3:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_o;
    wire [3:0] redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_q;
    reg [63:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_inputreg0_q;
    wire redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_reset0;
    wire [63:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_ia;
    wire [3:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_aa;
    wire [3:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_ab;
    wire [63:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_iq;
    wire [63:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_q;
    wire [3:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [3:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_i = 4'b1111;
    wire [3:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_offset_q;
    wire [4:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_a;
    wire [4:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_b;
    logic [4:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_o;
    wire [4:0] redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_q;
    reg [63:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_inputreg0_q;
    reg [63:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_outputreg0_q;
    wire redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_reset0;
    wire [63:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_ia;
    wire [3:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_aa;
    wire [3:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_ab;
    wire [63:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_iq;
    wire [63:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_q;
    wire [3:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [3:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_i = 4'b1111;
    wire [4:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_a;
    wire [4:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_b;
    logic [4:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_o;
    wire [4:0] redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_q;
    reg [63:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_inputreg0_q;
    reg [63:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_outputreg0_q;
    wire redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_reset0;
    wire [63:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_ia;
    wire [3:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_aa;
    wire [3:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_ab;
    wire [63:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_iq;
    wire [63:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_q;
    wire [3:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_q;
    // Initial-value here is arbitrary, but a resolved value is necessary for simulation.
    (* preserve_syn_only *) reg [3:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_i = 4'b1111;
    wire [4:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_a;
    wire [4:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_b;
    logic [4:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_o;
    wire [4:0] redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_q;


    // redist769_sync_in_aunroll_x_in_i_valid_753(DELAY,18686)
    dspba_delay_ver #( .width(1), .depth(753), .reset_kind("SYNC"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist769_sync_in_aunroll_x_in_i_valid_753 ( .xin(in_i_valid), .xout(redist769_sync_in_aunroll_x_in_i_valid_753_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // redist770_sync_in_aunroll_x_in_i_valid_754(DELAY,18687)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist770_sync_in_aunroll_x_in_i_valid_754_q <= redist769_sync_in_aunroll_x_in_i_valid_753_q;
        end
    end

    // redist771_sync_in_aunroll_x_in_i_valid_759(DELAY,18688)
    always @ (posedge clock)
    begin
        if (!resetn)
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_delay_0 <= '0;
        end
        else
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_delay_0 <= redist770_sync_in_aunroll_x_in_i_valid_754_q;
        end
    end
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_delay_1 <= redist771_sync_in_aunroll_x_in_i_valid_759_delay_0;
        end
    end
    always @ (posedge clock)
    begin
        if (!resetn)
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_delay_2 <= '0;
        end
        else
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_delay_2 <= redist771_sync_in_aunroll_x_in_i_valid_759_delay_1;
        end
    end
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_delay_3 <= redist771_sync_in_aunroll_x_in_i_valid_759_delay_2;
        end
    end
    always @ (posedge clock)
    begin
        if (!resetn)
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_q <= '0;
        end
        else
        begin
            redist771_sync_in_aunroll_x_in_i_valid_759_q <= redist771_sync_in_aunroll_x_in_i_valid_759_delay_3;
        end
    end

    // redist772_sync_in_aunroll_x_in_i_valid_766(DELAY,18689)
    dspba_delay_ver #( .width(1), .depth(7), .reset_kind("SYNC"), .phase(759), .modulus(2), .reset_high(1'b0) )
    redist772_sync_in_aunroll_x_in_i_valid_766 ( .xin(redist771_sync_in_aunroll_x_in_i_valid_759_q), .xout(redist772_sync_in_aunroll_x_in_i_valid_766_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // redist773_sync_in_aunroll_x_in_i_valid_768(DELAY,18690)
    always @ (posedge clock)
    begin
        if (!resetn)
        begin
            redist773_sync_in_aunroll_x_in_i_valid_768_delay_0 <= '0;
        end
        else
        begin
            redist773_sync_in_aunroll_x_in_i_valid_768_delay_0 <= redist772_sync_in_aunroll_x_in_i_valid_766_q;
        end
    end
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist773_sync_in_aunroll_x_in_i_valid_768_q <= redist773_sync_in_aunroll_x_in_i_valid_768_delay_0;
        end
    end

    // c_i4_1gr(CONSTANT,28)
    assign c_i4_1gr_q = 4'b1111;

    // i_fpgaindvars_iv_next_cnn1395(ADD,485)@754
    assign i_fpgaindvars_iv_next_cnn1395_a = {1'b0, i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390_out_data_out};
    assign i_fpgaindvars_iv_next_cnn1395_b = {1'b0, c_i4_1gr_q};
    assign i_fpgaindvars_iv_next_cnn1395_o = $unsigned(i_fpgaindvars_iv_next_cnn1395_a) + $unsigned(i_fpgaindvars_iv_next_cnn1395_b);
    assign i_fpgaindvars_iv_next_cnn1395_q = i_fpgaindvars_iv_next_cnn1395_o[4:0];

    // bgTrunc_i_fpgaindvars_iv_next_cnn1395_sel_x(BITSELECT,1045)@754
    assign bgTrunc_i_fpgaindvars_iv_next_cnn1395_sel_x_b = i_fpgaindvars_iv_next_cnn1395_q[3:0];

    // i_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417(BLACKBOX,656)@754
    // out out_feedback_out_32@20000000
    // out out_feedback_valid_out_32@20000000
    cnn_i_llvm_fpga_push_i4_fpgaindvars_iv_push32_1418 thei_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417 (
        .in_data_in(bgTrunc_i_fpgaindvars_iv_next_cnn1395_sel_x_b),
        .in_feedback_stall_in_32(i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390_out_feedback_stall_out_32),
        .in_stall_in(GND_q),
        .in_unnamed_cnn188(i_unnamed_cnn1399_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(),
        .out_feedback_out_32(i_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417_out_feedback_out_32),
        .out_feedback_valid_out_32(i_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417_out_feedback_valid_out_32),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist756_sync_in_aunroll_x_in_c0_eni12_2_752(DELAY,18673)
    dspba_delay_ver #( .width(1), .depth(752), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist756_sync_in_aunroll_x_in_c0_eni12_2_752 ( .xin(in_c0_eni12_2), .xout(redist756_sync_in_aunroll_x_in_c0_eni12_2_752_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // redist757_sync_in_aunroll_x_in_c0_eni12_2_753(DELAY,18674)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist757_sync_in_aunroll_x_in_c0_eni12_2_753_q <= redist756_sync_in_aunroll_x_in_c0_eni12_2_752_q;
        end
    end

    // c_i4_6gr(CONSTANT,29)
    assign c_i4_6gr_q = 4'b0110;

    // i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390(BLACKBOX,642)@754
    // out out_feedback_stall_out_32@20000000
    cnn_i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_1391 thei_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390 (
        .in_data_in(c_i4_6gr_q),
        .in_dir(redist757_sync_in_aunroll_x_in_c0_eni12_2_753_q),
        .in_feedback_in_32(i_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417_out_feedback_out_32),
        .in_feedback_valid_in_32(i_llvm_fpga_push_i4_fpgaindvars_iv_push32_cnn1417_out_feedback_valid_out_32),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390_out_data_out),
        .out_feedback_stall_out_32(i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390_out_feedback_stall_out_32),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_exitcond_cnn1393_cmp_nsign(LOGICAL,8717)@754
    assign i_exitcond_cnn1393_cmp_nsign_q = ~ (i_llvm_fpga_pop_i4_fpgaindvars_iv_pop32_cnn1390_out_data_out[3:3]);

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn173_cnn1396(BLACKBOX,637)@754
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_173_cnn1397 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn173_cnn1396 (
        .in_intel_reserved_ffwd_26_0(in_intel_reserved_ffwd_26_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_dest_data_out_26_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn173_cnn1396_out_dest_data_out_26_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_unnamed_cnn1399(LOGICAL,1036)@754
    assign i_unnamed_cnn1399_q = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn173_cnn1396_out_dest_data_out_26_0 & i_exitcond_cnn1393_cmp_nsign_q;

    // redist780_i_unnamed_cnn1399_q_15(DELAY,18697)
    dspba_delay_ver #( .width(1), .depth(15), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist780_i_unnamed_cnn1399_q_15 ( .xin(i_unnamed_cnn1399_q), .xout(redist780_i_unnamed_cnn1399_q_15_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_llvm_fpga_push_i1_notexitcond_cnn1421(BLACKBOX,655)@769
    // out out_feedback_out_2@20000000
    // out out_feedback_valid_out_2@20000000
    cnn_i_llvm_fpga_push_i1_notexitcond_1422 thei_llvm_fpga_push_i1_notexitcond_cnn1421 (
        .in_data_in(redist780_i_unnamed_cnn1399_q_15_q),
        .in_feedback_stall_in_2(i_llvm_fpga_pipeline_keep_going_cnn729_out_not_exitcond_stall_out),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_data_out(),
        .out_feedback_out_2(i_llvm_fpga_push_i1_notexitcond_cnn1421_out_feedback_out_2),
        .out_feedback_valid_out_2(i_llvm_fpga_push_i1_notexitcond_cnn1421_out_feedback_valid_out_2),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // GND(CONSTANT,0)
    assign GND_q = 1'b0;

    // VCC(CONSTANT,1)
    assign VCC_q = 1'b1;

    // i_llvm_fpga_pipeline_keep_going_cnn729(BLACKBOX,638)@769
    // out out_exiting_stall_out@20000000
    // out out_exiting_valid_out@20000000
    // out out_initeration_stall_out@20000000
    // out out_not_exitcond_stall_out@20000000
    // out out_pipeline_valid_out@20000000
    cnn_i_llvm_fpga_pipeline_keep_going_730 thei_llvm_fpga_pipeline_keep_going_cnn729 (
        .in_data_in(VCC_q),
        .in_initeration_in(GND_q),
        .in_initeration_valid_in(GND_q),
        .in_not_exitcond_in(i_llvm_fpga_push_i1_notexitcond_cnn1421_out_feedback_out_2),
        .in_not_exitcond_valid_in(i_llvm_fpga_push_i1_notexitcond_cnn1421_out_feedback_valid_out_2),
        .in_pipeline_stall_in(in_pipeline_stall_in),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_data_out(),
        .out_exiting_stall_out(i_llvm_fpga_pipeline_keep_going_cnn729_out_exiting_stall_out),
        .out_exiting_valid_out(i_llvm_fpga_pipeline_keep_going_cnn729_out_exiting_valid_out),
        .out_initeration_stall_out(),
        .out_not_exitcond_stall_out(i_llvm_fpga_pipeline_keep_going_cnn729_out_not_exitcond_stall_out),
        .out_pipeline_valid_out(i_llvm_fpga_pipeline_keep_going_cnn729_out_pipeline_valid_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // ext_sig_sync_out(GPOUT,51)
    assign out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going_cnn729_exiting_valid_out = i_llvm_fpga_pipeline_keep_going_cnn729_out_exiting_valid_out;
    assign out_aclp_to_limiter_i_llvm_fpga_pipeline_keep_going_cnn729_exiting_stall_out = i_llvm_fpga_pipeline_keep_going_cnn729_out_exiting_stall_out;

    // pipeline_valid_out_sync(GPOUT,1042)
    assign out_pipeline_valid_out = i_llvm_fpga_pipeline_keep_going_cnn729_out_pipeline_valid_out;

    // redist758_sync_in_aunroll_x_in_c0_eni12_2_768(DELAY,18675)
    dspba_delay_ver #( .width(1), .depth(15), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist758_sync_in_aunroll_x_in_c0_eni12_2_768 ( .xin(redist757_sync_in_aunroll_x_in_c0_eni12_2_753_q), .xout(redist758_sync_in_aunroll_x_in_c0_eni12_2_768_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_llvm_fpga_fanout_i1_fanout_adaptor943_cnn1400(REG,567)@754 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i1_fanout_adaptor943_cnn1400_q <= i_unnamed_cnn1399_q;
        end
    end

    // i_llvm_fpga_push_i1_notcmp67110_push45_cnn1463(BLACKBOX,652)@755
    // out out_feedback_out_45@20000000
    // out out_feedback_valid_out_45@20000000
    cnn_i_llvm_fpga_push_i1_notcmp67110_push45_1464 thei_llvm_fpga_push_i1_notcmp67110_push45_cnn1463 (
        .in_data_in(i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out),
        .in_fanout_adaptor943(i_llvm_fpga_fanout_i1_fanout_adaptor943_cnn1400_q),
        .in_feedback_stall_in_45(i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_feedback_stall_out_45),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(),
        .out_feedback_out_45(i_llvm_fpga_push_i1_notcmp67110_push45_cnn1463_out_feedback_out_45),
        .out_feedback_valid_out_45(i_llvm_fpga_push_i1_notcmp67110_push45_cnn1463_out_feedback_valid_out_45),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor941_cnn727(REG,564)@754 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor941_cnn727_q <= redist757_sync_in_aunroll_x_in_c0_eni12_2_753_q;
        end
    end

    // redist768_sync_in_aunroll_x_in_c0_eni12_12_754(DELAY,18685)
    dspba_delay_ver #( .width(1), .depth(754), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist768_sync_in_aunroll_x_in_c0_eni12_12_754 ( .xin(in_c0_eni12_12), .xout(redist768_sync_in_aunroll_x_in_c0_eni12_12_754_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460(BLACKBOX,639)@755
    // out out_feedback_stall_out_45@20000000
    cnn_i_llvm_fpga_pop_i1_notcmp67110_pop45_1461 thei_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460 (
        .in_data_in(redist768_sync_in_aunroll_x_in_c0_eni12_12_754_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor941_cnn727_q),
        .in_feedback_in_45(i_llvm_fpga_push_i1_notcmp67110_push45_cnn1463_out_feedback_out_45),
        .in_feedback_valid_in_45(i_llvm_fpga_push_i1_notcmp67110_push45_cnn1463_out_feedback_valid_out_45),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out),
        .out_feedback_stall_out_45(i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_feedback_stall_out_45),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist795_i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out_14(DELAY,18712)
    dspba_delay_ver #( .width(1), .depth(14), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist795_i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out_14 ( .xin(i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out), .xout(redist795_i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out_14_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_mul65_15_cnn1351_vt_const_3(CONSTANT,1002)
    assign i_mul65_15_cnn1351_vt_const_3_q = 4'b0111;

    // redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt(ADD,18861)
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_a = {1'b0, redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_q};
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_b = {1'b0, i_mul65_15_cnn1351_vt_const_3_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_o <= $unsigned(redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_a) + $unsigned(redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_b);
        end
    end
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_q = redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_o[4:0];

    // i_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457(BLACKBOX,664)@755
    // out out_feedback_out_43@20000000
    // out out_feedback_valid_out_43@20000000
    cnn_i_llvm_fpga_push_i64_to_058_replace_phi108_push43_1458 thei_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457 (
        .in_data_in(i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out),
        .in_fanout_adaptor943(i_llvm_fpga_fanout_i1_fanout_adaptor943_cnn1400_q),
        .in_feedback_stall_in_43(i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_feedback_stall_out_43),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(),
        .out_feedback_out_43(i_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457_out_feedback_out_43),
        .out_feedback_valid_out_43(i_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457_out_feedback_valid_out_43),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist760_sync_in_aunroll_x_in_c0_eni12_4_754_offset(CONSTANT,18812)
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_offset_q = 10'b0100010011;

    // redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt(ADD,18843)
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_a = {1'b0, redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_q};
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_b = {1'b0, redist760_sync_in_aunroll_x_in_c0_eni12_4_754_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_o <= $unsigned(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_a) + $unsigned(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_b);
        end
    end
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_q = redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_o[10:0];

    // redist767_sync_in_aunroll_x_in_c0_eni12_11_754_inputreg0(DELAY,18838)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist767_sync_in_aunroll_x_in_c0_eni12_11_754_inputreg0_q <= in_c0_eni12_11;
        end
    end

    // redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr(COUNTER,18841)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_i <= $unsigned(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_q = redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_i[9:0];

    // redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem(DUALMEM,18840)
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_ia = redist767_sync_in_aunroll_x_in_c0_eni12_11_754_inputreg0_q;
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_aa = redist767_sync_in_aunroll_x_in_c0_eni12_11_754_wraddr_q;
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_ab = redist767_sync_in_aunroll_x_in_c0_eni12_11_754_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_aa),
        .data_a(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_ab),
        .q_b(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_q = redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_iq[63:0];

    // redist767_sync_in_aunroll_x_in_c0_eni12_11_754_outputreg0(DELAY,18839)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist767_sync_in_aunroll_x_in_c0_eni12_11_754_outputreg0_q <= redist767_sync_in_aunroll_x_in_c0_eni12_11_754_mem_q;
        end
    end

    // i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454(BLACKBOX,650)@755
    // out out_feedback_stall_out_43@20000000
    cnn_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_1455 thei_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454 (
        .in_data_in(redist767_sync_in_aunroll_x_in_c0_eni12_11_754_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor941_cnn727_q),
        .in_feedback_in_43(i_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457_out_feedback_out_43),
        .in_feedback_valid_in_43(i_llvm_fpga_push_i64_to_058_replace_phi108_push43_cnn1457_out_feedback_valid_out_43),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out),
        .out_feedback_stall_out_43(i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_feedback_stall_out_43),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_inputreg0(DELAY,18856)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_inputreg0_q <= i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out;
        end
    end

    // redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr(COUNTER,18859)
    // low=0, high=15, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_i <= $unsigned(redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_i) + $unsigned(4'd1);
        end
    end
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_q = redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_i[3:0];

    // redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem(DUALMEM,18858)
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_ia = redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_inputreg0_q;
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_aa = redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_wraddr_q;
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_ab = redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_rdcnt_q[3:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(4),
        .numwords_a(16),
        .width_b(64),
        .widthad_b(4),
        .numwords_b(16),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_aa),
        .data_a(redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_ab),
        .q_b(redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_q = redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_iq[63:0];

    // redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_outputreg0(DELAY,18857)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_outputreg0_q <= redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_mem_q;
        end
    end

    // i_llvm_fpga_push_i1_notcmp71106_push42_cnn1451(BLACKBOX,653)@755
    // out out_feedback_out_42@20000000
    // out out_feedback_valid_out_42@20000000
    cnn_i_llvm_fpga_push_i1_notcmp71106_push42_1452 thei_llvm_fpga_push_i1_notcmp71106_push42_cnn1451 (
        .in_data_in(i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out),
        .in_fanout_adaptor943(i_llvm_fpga_fanout_i1_fanout_adaptor943_cnn1400_q),
        .in_feedback_stall_in_42(i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_feedback_stall_out_42),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(),
        .out_feedback_out_42(i_llvm_fpga_push_i1_notcmp71106_push42_cnn1451_out_feedback_out_42),
        .out_feedback_valid_out_42(i_llvm_fpga_push_i1_notcmp71106_push42_cnn1451_out_feedback_valid_out_42),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist766_sync_in_aunroll_x_in_c0_eni12_10_754(DELAY,18683)
    dspba_delay_ver #( .width(1), .depth(754), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist766_sync_in_aunroll_x_in_c0_eni12_10_754 ( .xin(in_c0_eni12_10), .xout(redist766_sync_in_aunroll_x_in_c0_eni12_10_754_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448(BLACKBOX,640)@755
    // out out_feedback_stall_out_42@20000000
    cnn_i_llvm_fpga_pop_i1_notcmp71106_pop42_1449 thei_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448 (
        .in_data_in(redist766_sync_in_aunroll_x_in_c0_eni12_10_754_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor941_cnn727_q),
        .in_feedback_in_42(i_llvm_fpga_push_i1_notcmp71106_push42_cnn1451_out_feedback_out_42),
        .in_feedback_valid_in_42(i_llvm_fpga_push_i1_notcmp71106_push42_cnn1451_out_feedback_valid_out_42),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out),
        .out_feedback_stall_out_42(i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_feedback_stall_out_42),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist794_i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out_14(DELAY,18711)
    dspba_delay_ver #( .width(1), .depth(14), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist794_i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out_14 ( .xin(i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out), .xout(redist794_i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out_14_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401(REG,566)@754 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q <= i_unnamed_cnn1399_q;
        end
    end

    // redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5(DELAY,18714)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_0 <= i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q;
            redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_1 <= redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_0;
            redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_2 <= redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_1;
            redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_3 <= redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_2;
            redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_q <= redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_delay_3;
        end
    end

    // redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14(DELAY,18715)
    dspba_delay_ver #( .width(1), .depth(9), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14 ( .xin(redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_q), .xout(redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_llvm_fpga_push_i1_notcmp75102_push40_cnn1445(BLACKBOX,654)@769
    // out out_feedback_out_40@20000000
    // out out_feedback_valid_out_40@20000000
    cnn_i_llvm_fpga_push_i1_notcmp75102_push40_1446 thei_llvm_fpga_push_i1_notcmp75102_push40_cnn1445 (
        .in_data_in(redist793_i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out_15_q),
        .in_fanout_adaptor942(redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q),
        .in_feedback_stall_in_40(i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_feedback_stall_out_40),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_data_out(),
        .out_feedback_out_40(i_llvm_fpga_push_i1_notcmp75102_push40_cnn1445_out_feedback_out_40),
        .out_feedback_valid_out_40(i_llvm_fpga_push_i1_notcmp75102_push40_cnn1445_out_feedback_valid_out_40),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728(REG,565)@753 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q <= redist756_sync_in_aunroll_x_in_c0_eni12_2_752_q;
        end
    end

    // redist765_sync_in_aunroll_x_in_c0_eni12_9_753(DELAY,18682)
    dspba_delay_ver #( .width(1), .depth(753), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist765_sync_in_aunroll_x_in_c0_eni12_9_753 ( .xin(in_c0_eni12_9), .xout(redist765_sync_in_aunroll_x_in_c0_eni12_9_753_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442(BLACKBOX,641)@754
    // out out_feedback_stall_out_40@20000000
    cnn_i_llvm_fpga_pop_i1_notcmp75102_pop40_1443 thei_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442 (
        .in_data_in(redist765_sync_in_aunroll_x_in_c0_eni12_9_753_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_40(i_llvm_fpga_push_i1_notcmp75102_push40_cnn1445_out_feedback_out_40),
        .in_feedback_valid_in_40(i_llvm_fpga_push_i1_notcmp75102_push40_cnn1445_out_feedback_valid_out_40),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out),
        .out_feedback_stall_out_40(i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_feedback_stall_out_40),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist793_i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out_15(DELAY,18710)
    dspba_delay_ver #( .width(1), .depth(15), .reset_kind("NONE"), .phase(0), .modulus(2), .reset_high(1'b0) )
    redist793_i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out_15 ( .xin(i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out), .xout(redist793_i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out_15_q), .clk(clock), .aclr(resetn), .ena(1'b1) );

    // redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset(CONSTANT,18800)
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q = 10'b0100010100;

    // redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt(ADD,18837)
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_a = {1'b0, redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_q};
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_b = {1'b0, redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_o <= $unsigned(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_a) + $unsigned(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_b);
        end
    end
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_q = redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_o[10:0];

    // redist764_sync_in_aunroll_x_in_c0_eni12_8_753_inputreg0(DELAY,18832)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist764_sync_in_aunroll_x_in_c0_eni12_8_753_inputreg0_q <= in_c0_eni12_8;
        end
    end

    // redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr(COUNTER,18835)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_i <= $unsigned(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_q = redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_i[9:0];

    // redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem(DUALMEM,18834)
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_ia = redist764_sync_in_aunroll_x_in_c0_eni12_8_753_inputreg0_q;
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_aa = redist764_sync_in_aunroll_x_in_c0_eni12_8_753_wraddr_q;
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_ab = redist764_sync_in_aunroll_x_in_c0_eni12_8_753_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_aa),
        .data_a(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_ab),
        .q_b(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_q = redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_iq[63:0];

    // redist764_sync_in_aunroll_x_in_c0_eni12_8_753_outputreg0(DELAY,18833)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist764_sync_in_aunroll_x_in_c0_eni12_8_753_outputreg0_q <= redist764_sync_in_aunroll_x_in_c0_eni12_8_753_mem_q;
        end
    end

    // i_llvm_fpga_pop_i64_add3193_pop37_cnn1436(BLACKBOX,644)@754
    // out out_feedback_stall_out_37@20000000
    cnn_i_llvm_fpga_pop_i64_add3193_pop37_1437 thei_llvm_fpga_pop_i64_add3193_pop37_cnn1436 (
        .in_data_in(redist764_sync_in_aunroll_x_in_c0_eni12_8_753_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_37(i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_feedback_out_37),
        .in_feedback_valid_in_37(i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_feedback_valid_out_37),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out),
        .out_feedback_stall_out_37(i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_feedback_stall_out_37),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt(ADD,18890)
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_a = {1'b0, redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_q};
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_b = {1'b0, c_i4_6gr_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_o <= $unsigned(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_a) + $unsigned(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_b);
        end
    end
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_q = redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_o[4:0];

    // redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_inputreg0(DELAY,18885)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_inputreg0_q <= i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out;
        end
    end

    // redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr(COUNTER,18888)
    // low=0, high=15, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_i <= $unsigned(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_i) + $unsigned(4'd1);
        end
    end
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_q = redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_i[3:0];

    // redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem(DUALMEM,18887)
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_ia = redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_inputreg0_q;
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_aa = redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_wraddr_q;
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_ab = redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_rdcnt_q[3:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(4),
        .numwords_a(16),
        .width_b(64),
        .widthad_b(4),
        .numwords_b(16),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_aa),
        .data_a(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_ab),
        .q_b(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_q = redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_iq[63:0];

    // redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_outputreg0(DELAY,18886)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_outputreg0_q <= redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_mem_q;
        end
    end

    // i_llvm_fpga_push_i64_add3193_push37_cnn1439(BLACKBOX,658)@769
    // out out_feedback_out_37@20000000
    // out out_feedback_valid_out_37@20000000
    cnn_i_llvm_fpga_push_i64_add3193_push37_1440 thei_llvm_fpga_push_i64_add3193_push37_cnn1439 (
        .in_data_in(redist791_i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_data_out_15_outputreg0_q),
        .in_fanout_adaptor942(redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q),
        .in_feedback_stall_in_37(i_llvm_fpga_pop_i64_add3193_pop37_cnn1436_out_feedback_stall_out_37),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_data_out(i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_data_out),
        .out_feedback_out_37(i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_feedback_out_37),
        .out_feedback_valid_out_37(i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_feedback_valid_out_37),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt(ADD,18831)
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_a = {1'b0, redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_q};
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_b = {1'b0, redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_o <= $unsigned(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_a) + $unsigned(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_b);
        end
    end
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_q = redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_o[10:0];

    // redist763_sync_in_aunroll_x_in_c0_eni12_7_753_inputreg0(DELAY,18826)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist763_sync_in_aunroll_x_in_c0_eni12_7_753_inputreg0_q <= in_c0_eni12_7;
        end
    end

    // redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr(COUNTER,18829)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_i <= $unsigned(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_q = redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_i[9:0];

    // redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem(DUALMEM,18828)
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_ia = redist763_sync_in_aunroll_x_in_c0_eni12_7_753_inputreg0_q;
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_aa = redist763_sync_in_aunroll_x_in_c0_eni12_7_753_wraddr_q;
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_ab = redist763_sync_in_aunroll_x_in_c0_eni12_7_753_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_aa),
        .data_a(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_ab),
        .q_b(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_q = redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_iq[63:0];

    // redist763_sync_in_aunroll_x_in_c0_eni12_7_753_outputreg0(DELAY,18827)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist763_sync_in_aunroll_x_in_c0_eni12_7_753_outputreg0_q <= redist763_sync_in_aunroll_x_in_c0_eni12_7_753_mem_q;
        end
    end

    // i_llvm_fpga_pop_i64_add1788_pop36_cnn1430(BLACKBOX,643)@754
    // out out_feedback_stall_out_36@20000000
    cnn_i_llvm_fpga_pop_i64_add1788_pop36_1431 thei_llvm_fpga_pop_i64_add1788_pop36_cnn1430 (
        .in_data_in(redist763_sync_in_aunroll_x_in_c0_eni12_7_753_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_36(i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_feedback_out_36),
        .in_feedback_valid_in_36(i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_feedback_valid_out_36),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out),
        .out_feedback_stall_out_36(i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_feedback_stall_out_36),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt(ADD,18896)
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_a = {1'b0, redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_q};
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_b = {1'b0, c_i4_6gr_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_o <= $unsigned(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_a) + $unsigned(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_b);
        end
    end
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_q = redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_o[4:0];

    // redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_inputreg0(DELAY,18891)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_inputreg0_q <= i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out;
        end
    end

    // redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr(COUNTER,18894)
    // low=0, high=15, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_i <= $unsigned(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_i) + $unsigned(4'd1);
        end
    end
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_q = redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_i[3:0];

    // redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem(DUALMEM,18893)
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_ia = redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_inputreg0_q;
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_aa = redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_wraddr_q;
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_ab = redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_rdcnt_q[3:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(4),
        .numwords_a(16),
        .width_b(64),
        .widthad_b(4),
        .numwords_b(16),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_aa),
        .data_a(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_ab),
        .q_b(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_q = redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_iq[63:0];

    // redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_outputreg0(DELAY,18892)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_outputreg0_q <= redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_mem_q;
        end
    end

    // i_llvm_fpga_push_i64_add1788_push36_cnn1433(BLACKBOX,657)@769
    // out out_feedback_out_36@20000000
    // out out_feedback_valid_out_36@20000000
    cnn_i_llvm_fpga_push_i64_add1788_push36_1434 thei_llvm_fpga_push_i64_add1788_push36_cnn1433 (
        .in_data_in(redist792_i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_data_out_15_outputreg0_q),
        .in_fanout_adaptor942(redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q),
        .in_feedback_stall_in_36(i_llvm_fpga_pop_i64_add1788_pop36_cnn1430_out_feedback_stall_out_36),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_data_out(i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_data_out),
        .out_feedback_out_36(i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_feedback_out_36),
        .out_feedback_valid_out_36(i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_feedback_valid_out_36),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt(ADD,18855)
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_a = {1'b0, redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_q};
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_b = {1'b0, i_mul65_15_cnn1351_vt_const_3_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_o <= $unsigned(redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_a) + $unsigned(redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_b);
        end
    end
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_q = redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_o[4:0];

    // redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt(ADD,18825)
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_a = {1'b0, redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_q};
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_b = {1'b0, redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_o <= $unsigned(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_a) + $unsigned(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_b);
        end
    end
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_q = redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_o[10:0];

    // redist762_sync_in_aunroll_x_in_c0_eni12_6_753_inputreg0(DELAY,18820)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist762_sync_in_aunroll_x_in_c0_eni12_6_753_inputreg0_q <= in_c0_eni12_6;
        end
    end

    // redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr(COUNTER,18823)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_i <= $unsigned(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_q = redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_i[9:0];

    // redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem(DUALMEM,18822)
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_ia = redist762_sync_in_aunroll_x_in_c0_eni12_6_753_inputreg0_q;
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_aa = redist762_sync_in_aunroll_x_in_c0_eni12_6_753_wraddr_q;
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_ab = redist762_sync_in_aunroll_x_in_c0_eni12_6_753_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_aa),
        .data_a(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_ab),
        .q_b(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_q = redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_iq[63:0];

    // redist762_sync_in_aunroll_x_in_c0_eni12_6_753_outputreg0(DELAY,18821)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist762_sync_in_aunroll_x_in_c0_eni12_6_753_outputreg0_q <= redist762_sync_in_aunroll_x_in_c0_eni12_6_753_mem_q;
        end
    end

    // i_llvm_fpga_pop_i64_add82_pop35_cnn1424(BLACKBOX,645)@754
    // out out_feedback_stall_out_35@20000000
    cnn_i_llvm_fpga_pop_i64_add82_pop35_1425 thei_llvm_fpga_pop_i64_add82_pop35_cnn1424 (
        .in_data_in(redist762_sync_in_aunroll_x_in_c0_eni12_6_753_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_35(i_llvm_fpga_push_i64_add82_push35_cnn1427_out_feedback_out_35),
        .in_feedback_valid_in_35(i_llvm_fpga_push_i64_add82_push35_cnn1427_out_feedback_valid_out_35),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_data_out),
        .out_feedback_stall_out_35(i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_feedback_stall_out_35),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist790_i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_data_out_1(DELAY,18707)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist790_i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_data_out_1_q <= i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_data_out;
        end
    end

    // i_llvm_fpga_push_i64_add82_push35_cnn1427(BLACKBOX,659)@755
    // out out_feedback_out_35@20000000
    // out out_feedback_valid_out_35@20000000
    cnn_i_llvm_fpga_push_i64_add82_push35_1428 thei_llvm_fpga_push_i64_add82_push35_cnn1427 (
        .in_data_in(redist790_i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_data_out_1_q),
        .in_fanout_adaptor942(i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q),
        .in_feedback_stall_in_35(i_llvm_fpga_pop_i64_add82_pop35_cnn1424_out_feedback_stall_out_35),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out),
        .out_feedback_out_35(i_llvm_fpga_push_i64_add82_push35_cnn1427_out_feedback_out_35),
        .out_feedback_valid_out_35(i_llvm_fpga_push_i64_add82_push35_cnn1427_out_feedback_valid_out_35),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_inputreg0(DELAY,18850)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_inputreg0_q <= i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out;
        end
    end

    // redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr(COUNTER,18853)
    // low=0, high=15, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_i <= $unsigned(redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_i) + $unsigned(4'd1);
        end
    end
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_q = redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_i[3:0];

    // redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem(DUALMEM,18852)
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_ia = redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_inputreg0_q;
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_aa = redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_wraddr_q;
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_ab = redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_rdcnt_q[3:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(4),
        .numwords_a(16),
        .width_b(64),
        .widthad_b(4),
        .numwords_b(16),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_aa),
        .data_a(redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_ab),
        .q_b(redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_q = redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_iq[63:0];

    // redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_outputreg0(DELAY,18851)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_outputreg0_q <= redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_mem_q;
        end
    end

    // i_notcmp_cnn1420(LOGICAL,1035)@769
    assign i_notcmp_cnn1420_q = redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q ^ VCC_q;

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn172_cnn1386(BLACKBOX,636)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_172_cnn1387 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn172_cnn1386 (
        .in_intel_reserved_ffwd_91_0(in_intel_reserved_ffwd_91_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_91_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn172_cnn1386_out_dest_data_out_91_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr59_cnn758_mult_multconst_x(CONSTANT,1268)
    assign i_add_ptr59_cnn758_mult_multconst_x_q = 61'b0000000000000000000000000000000000000000000000000000000000000;

    // redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_offset(CONSTANT,18883)
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_offset_q = 4'b1000;

    // redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt(ADD,18884)
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_a = {1'b0, redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_q};
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_b = {1'b0, redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_o <= $unsigned(redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_a) + $unsigned(redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_b);
        end
    end
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_q = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_o[4:0];

    // i_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405(BLACKBOX,660)@769
    // out out_feedback_out_41@20000000
    // out out_feedback_valid_out_41@20000000
    cnn_i_llvm_fpga_push_i64_col_060_replace_phi104_push41_1406 thei_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405 (
        .in_data_in(redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_q),
        .in_fanout_adaptor942(redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q),
        .in_feedback_stall_in_41(i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_feedback_stall_out_41),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_data_out(),
        .out_feedback_out_41(i_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405_out_feedback_out_41),
        .out_feedback_valid_out_41(i_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405_out_feedback_valid_out_41),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt(ADD,18819)
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_a = {1'b0, redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_q};
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_b = {1'b0, redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_o <= $unsigned(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_a) + $unsigned(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_b);
        end
    end
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_q = redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_o[10:0];

    // redist761_sync_in_aunroll_x_in_c0_eni12_5_753_inputreg0(DELAY,18814)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist761_sync_in_aunroll_x_in_c0_eni12_5_753_inputreg0_q <= in_c0_eni12_5;
        end
    end

    // redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr(COUNTER,18817)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_i <= $unsigned(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_q = redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_i[9:0];

    // redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem(DUALMEM,18816)
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_ia = redist761_sync_in_aunroll_x_in_c0_eni12_5_753_inputreg0_q;
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_aa = redist761_sync_in_aunroll_x_in_c0_eni12_5_753_wraddr_q;
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_ab = redist761_sync_in_aunroll_x_in_c0_eni12_5_753_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_aa),
        .data_a(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_ab),
        .q_b(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_q = redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_iq[63:0];

    // redist761_sync_in_aunroll_x_in_c0_eni12_5_753_outputreg0(DELAY,18815)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist761_sync_in_aunroll_x_in_c0_eni12_5_753_outputreg0_q <= redist761_sync_in_aunroll_x_in_c0_eni12_5_753_mem_q;
        end
    end

    // i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771(BLACKBOX,646)@754
    // out out_feedback_stall_out_41@20000000
    cnn_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_772 thei_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771 (
        .in_data_in(redist761_sync_in_aunroll_x_in_c0_eni12_5_753_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_41(i_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405_out_feedback_out_41),
        .in_feedback_valid_in_41(i_llvm_fpga_push_i64_col_060_replace_phi104_push41_cnn1405_out_feedback_valid_out_41),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out),
        .out_feedback_stall_out_41(i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_feedback_stall_out_41),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_inputreg0(DELAY,18880)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_inputreg0_q <= i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out;
        end
    end

    // redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr(COUNTER,18882)
    // low=0, high=15, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_i <= $unsigned(redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_i) + $unsigned(4'd1);
        end
    end
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_q = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_i[3:0];

    // redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem(DUALMEM,18881)
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_ia = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_inputreg0_q;
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_aa = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_wraddr_q;
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_ab = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_rdcnt_q[3:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(4),
        .numwords_a(16),
        .width_b(64),
        .widthad_b(4),
        .numwords_b(16),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_aa),
        .data_a(redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_ab),
        .q_b(redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_q = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_iq[63:0];

    // i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select(BITSELECT,17899)@766
    assign i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_b = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_q[63:54];
    assign i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_c = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_q[53:36];
    assign i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_d = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_q[35:18];
    assign i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_e = redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_q[17:0];

    // i_add_ptr73_10_cnn1165_mult_x_bjA2(BITJOIN,5688)@766
    assign i_add_ptr73_10_cnn1165_mult_x_bjA2_q = {GND_q, i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0(BITSHIFT,8644)@766
    assign i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0_q = i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5(BITSHIFT,7091)@766
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_15_cnn1384_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5_q = i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_10_cnn1165_mult_x_bjA7(BITJOIN,5693)@766
    assign i_add_ptr73_10_cnn1165_mult_x_bjA7_q = {GND_q, i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0(BITSHIFT,8645)@766
    assign i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0_q = i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3(BITSHIFT,7089)@766
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_15_cnn1384_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3_q = i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1(ADD,7094)@766 + 1
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_15_cnn1384_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_15_cnn1384_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16646)@767
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_10_cnn1165_mult_x_bjA12(BITJOIN,5698)@766
    assign i_add_ptr73_10_cnn1165_mult_x_bjA12_q = {GND_q, i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0(BITSHIFT,8646)@766
    assign i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0_q = i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1(BITSHIFT,7087)@766
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_15_cnn1384_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1_q = i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_10_cnn1165_mult_x_bjA17(BITJOIN,5703)@766
    assign i_add_ptr73_10_cnn1165_mult_x_bjA17_q = {GND_q, i_add_ptr73_10_cnn1165_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0(BITSHIFT,8647)@766
    assign i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0_q = i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0(ADD,7093)@766 + 1
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_15_cnn1384_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_15_cnn1384_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16674)@767
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2(ADD,10987)@767 + 1
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16679)@767
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_0_1_q[69:69];

    // redist98_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18015)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist98_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist99_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18016)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist99_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2(ADD,10988)@768 + 1
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist99_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist99_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist98_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist98_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist611_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18528)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist611_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10989)@769
    assign i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p2_of_2_q, redist611_i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_15_cnn1384_mult_extender_x(BITJOIN,2537)@769
    assign i_add_ptr73_371_15_cnn1384_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_15_cnn1384_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_15_cnn1384_trunc_sel_x(BITSELECT,2539)@769
    assign i_add_ptr73_371_15_cnn1384_trunc_sel_x_b = i_add_ptr73_371_15_cnn1384_mult_extender_x_q[63:0];

    // c_i64_57(CONSTANT,45)
    assign c_i64_57_q = 64'b0000000000000000000000000000000000000000000000000000000000111001;

    // redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_offset(CONSTANT,18872)
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_offset_q = 2'b10;

    // redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt(ADD,18873)
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_a = {1'b0, redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_q};
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_b = {1'b0, redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_o <= $unsigned(redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_a) + $unsigned(redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_b);
        end
    end
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_q = redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_o[2:0];

    // i_llvm_fpga_push_i64_mul8599_push39_cnn1408(BLACKBOX,661)@769
    // out out_feedback_out_39@20000000
    // out out_feedback_valid_out_39@20000000
    cnn_i_llvm_fpga_push_i64_mul8599_push39_1409 thei_llvm_fpga_push_i64_mul8599_push39_cnn1408 (
        .in_data_in(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_outputreg0_q),
        .in_fanout_adaptor942(redist798_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_14_q),
        .in_feedback_stall_in_39(i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_feedback_stall_out_39),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_data_out(),
        .out_feedback_out_39(i_llvm_fpga_push_i64_mul8599_push39_cnn1408_out_feedback_out_39),
        .out_feedback_valid_out_39(i_llvm_fpga_push_i64_mul8599_push39_cnn1408_out_feedback_valid_out_39),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt(ADD,18807)
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_a = {1'b0, redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_q};
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_b = {1'b0, redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_o <= $unsigned(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_a) + $unsigned(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_b);
        end
    end
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_q = redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_o[10:0];

    // redist759_sync_in_aunroll_x_in_c0_eni12_3_753_inputreg0(DELAY,18802)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist759_sync_in_aunroll_x_in_c0_eni12_3_753_inputreg0_q <= in_c0_eni12_3;
        end
    end

    // redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr(COUNTER,18805)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_i <= $unsigned(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_q = redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_i[9:0];

    // redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem(DUALMEM,18804)
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_ia = redist759_sync_in_aunroll_x_in_c0_eni12_3_753_inputreg0_q;
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_aa = redist759_sync_in_aunroll_x_in_c0_eni12_3_753_wraddr_q;
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_ab = redist759_sync_in_aunroll_x_in_c0_eni12_3_753_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_aa),
        .data_a(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_ab),
        .q_b(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_q = redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_iq[63:0];

    // redist759_sync_in_aunroll_x_in_c0_eni12_3_753_outputreg0(DELAY,18803)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist759_sync_in_aunroll_x_in_c0_eni12_3_753_outputreg0_q <= redist759_sync_in_aunroll_x_in_c0_eni12_3_753_mem_q;
        end
    end

    // i_llvm_fpga_pop_i64_mul8599_pop39_cnn738(BLACKBOX,647)@754
    // out out_feedback_stall_out_39@20000000
    cnn_i_llvm_fpga_pop_i64_mul8599_pop39_739 thei_llvm_fpga_pop_i64_mul8599_pop39_cnn738 (
        .in_data_in(redist759_sync_in_aunroll_x_in_c0_eni12_3_753_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_39(i_llvm_fpga_push_i64_mul8599_push39_cnn1408_out_feedback_out_39),
        .in_feedback_valid_in_39(i_llvm_fpga_push_i64_mul8599_push39_cnn1408_out_feedback_valid_out_39),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out),
        .out_feedback_stall_out_39(i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_feedback_stall_out_39),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_inputreg0(DELAY,18868)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_inputreg0_q <= i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out;
        end
    end

    // redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr(COUNTER,18871)
    // low=0, high=3, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_i <= $unsigned(redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_i) + $unsigned(2'd1);
        end
    end
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_q = redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_i[1:0];

    // redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem(DUALMEM,18870)
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_ia = redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_inputreg0_q;
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_aa = redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_wraddr_q;
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_ab = redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_rdcnt_q[1:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(2),
        .numwords_a(4),
        .width_b(64),
        .widthad_b(2),
        .numwords_b(4),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_aa),
        .data_a(redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_ab),
        .q_b(redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_q = redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_iq[63:0];

    // redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_outputreg0(DELAY,18869)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_outputreg0_q <= redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_mem_q;
        end
    end

    // leftShiftStage0Idx1Rng1_uid7620_i_unnamed_cnn736_shift_x(BITSELECT,7619)@760
    assign leftShiftStage0Idx1Rng1_uid7620_i_unnamed_cnn736_shift_x_in = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0_q[62:0];
    assign leftShiftStage0Idx1Rng1_uid7620_i_unnamed_cnn736_shift_x_b = leftShiftStage0Idx1Rng1_uid7620_i_unnamed_cnn736_shift_x_in[62:0];

    // leftShiftStage0Idx1_uid7621_i_unnamed_cnn736_shift_x(BITJOIN,7620)@760
    assign leftShiftStage0Idx1_uid7621_i_unnamed_cnn736_shift_x_q = {leftShiftStage0Idx1Rng1_uid7620_i_unnamed_cnn736_shift_x_b, GND_q};

    // leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x(MUX,7622)@760
    assign leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_s = VCC_q;
    always @(leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_s or redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0_q or leftShiftStage0Idx1_uid7621_i_unnamed_cnn736_shift_x_q)
    begin
        unique case (leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_s)
            1'b0 : leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_q = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0_q;
            1'b1 : leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_q = leftShiftStage0Idx1_uid7621_i_unnamed_cnn736_shift_x_q;
            default : leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_q = 64'b0;
        endcase
    end

    // i_unnamed_cnn735_vt_select_63(BITSELECT,1039)@760
    assign i_unnamed_cnn735_vt_select_63_b = leftShiftStage0_uid7623_i_unnamed_cnn736_shift_x_q[63:1];

    // i_unnamed_cnn735_vt_join(BITJOIN,1038)@760
    assign i_unnamed_cnn735_vt_join_q = {i_unnamed_cnn735_vt_select_63_b, GND_q};

    // i_inc79_10_cnn1194_vt_const_1(CONSTANT,487)
    assign i_inc79_10_cnn1194_vt_const_1_q = 2'b11;

    // redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt(ADD,18867)
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_a = {1'b0, redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_q};
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_b = {1'b0, i_inc79_10_cnn1194_vt_const_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_o <= $unsigned(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_a) + $unsigned(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_b);
        end
    end
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_q = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_o[2:0];

    // i_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411(BLACKBOX,662)@760
    // out out_feedback_out_38@20000000
    // out out_feedback_valid_out_38@20000000
    cnn_i_llvm_fpga_push_i64_row_063_replace_phi96_push38_1412 thei_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411 (
        .in_data_in(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0_q),
        .in_fanout_adaptor942(redist797_i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q_5_q),
        .in_feedback_stall_in_38(i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_feedback_stall_out_38),
        .in_stall_in(GND_q),
        .in_valid_in(redist771_sync_in_aunroll_x_in_i_valid_759_q),
        .out_data_out(),
        .out_feedback_out_38(i_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411_out_feedback_out_38),
        .out_feedback_valid_out_38(i_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411_out_feedback_valid_out_38),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt(ADD,18801)
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_a = {1'b0, redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_q};
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_b = {1'b0, redist755_sync_in_aunroll_x_in_c0_eni12_1_753_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_o <= $unsigned(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_a) + $unsigned(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_b);
        end
    end
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_q = redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_o[10:0];

    // redist755_sync_in_aunroll_x_in_c0_eni12_1_753_inputreg0(DELAY,18796)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist755_sync_in_aunroll_x_in_c0_eni12_1_753_inputreg0_q <= in_c0_eni12_1;
        end
    end

    // redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr(COUNTER,18799)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_i <= $unsigned(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_q = redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_i[9:0];

    // redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem(DUALMEM,18798)
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_ia = redist755_sync_in_aunroll_x_in_c0_eni12_1_753_inputreg0_q;
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_aa = redist755_sync_in_aunroll_x_in_c0_eni12_1_753_wraddr_q;
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_ab = redist755_sync_in_aunroll_x_in_c0_eni12_1_753_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_aa),
        .data_a(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_ab),
        .q_b(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_q = redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_iq[63:0];

    // redist755_sync_in_aunroll_x_in_c0_eni12_1_753_outputreg0(DELAY,18797)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist755_sync_in_aunroll_x_in_c0_eni12_1_753_outputreg0_q <= redist755_sync_in_aunroll_x_in_c0_eni12_1_753_mem_q;
        end
    end

    // i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732(BLACKBOX,648)@754
    // out out_feedback_stall_out_38@20000000
    cnn_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_733 thei_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732 (
        .in_data_in(redist755_sync_in_aunroll_x_in_c0_eni12_1_753_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_38(i_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411_out_feedback_out_38),
        .in_feedback_valid_in_38(i_llvm_fpga_push_i64_row_063_replace_phi96_push38_cnn1411_out_feedback_valid_out_38),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out),
        .out_feedback_stall_out_38(i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_feedback_stall_out_38),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_inputreg0(DELAY,18862)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_inputreg0_q <= i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out;
        end
    end

    // redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr(COUNTER,18865)
    // low=0, high=3, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_i <= $unsigned(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_i) + $unsigned(2'd1);
        end
    end
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_q = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_i[1:0];

    // redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem(DUALMEM,18864)
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_ia = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_inputreg0_q;
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_aa = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_wraddr_q;
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_ab = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_rdcnt_q[1:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(2),
        .numwords_a(4),
        .width_b(64),
        .widthad_b(2),
        .numwords_b(4),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_aa),
        .data_a(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_ab),
        .q_b(redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_q = redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_iq[63:0];

    // redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0(DELAY,18863)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0_q <= redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_mem_q;
        end
    end

    // i_mul69_add2_cnn737(ADD,1033)@760
    assign i_mul69_add2_cnn737_a = {1'b0, redist785_i_llvm_fpga_pop_i64_row_063_replace_phi96_pop38_cnn732_out_data_out_6_outputreg0_q};
    assign i_mul69_add2_cnn737_b = {1'b0, i_unnamed_cnn735_vt_join_q};
    assign i_mul69_add2_cnn737_o = $unsigned(i_mul69_add2_cnn737_a) + $unsigned(i_mul69_add2_cnn737_b);
    assign i_mul69_add2_cnn737_q = i_mul69_add2_cnn737_o[64:0];

    // bgTrunc_i_mul69_add2_cnn737_sel_x(BITSELECT,1066)@760
    assign bgTrunc_i_mul69_add2_cnn737_sel_x_b = i_mul69_add2_cnn737_q[63:0];

    // redist776_bgTrunc_i_mul69_add2_cnn737_sel_x_b_1(DELAY,18693)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist776_bgTrunc_i_mul69_add2_cnn737_sel_x_b_1_q <= bgTrunc_i_mul69_add2_cnn737_sel_x_b;
        end
    end

    // i_mul69_add4_cnn741(ADD,1034)@761
    assign i_mul69_add4_cnn741_a = {1'b0, redist776_bgTrunc_i_mul69_add2_cnn737_sel_x_b_1_q};
    assign i_mul69_add4_cnn741_b = {1'b0, redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_outputreg0_q};
    assign i_mul69_add4_cnn741_o = $unsigned(i_mul69_add4_cnn741_a) + $unsigned(i_mul69_add4_cnn741_b);
    assign i_mul69_add4_cnn741_q = i_mul69_add4_cnn741_o[64:0];

    // bgTrunc_i_mul69_add4_cnn741_sel_x(BITSELECT,1067)@761
    assign bgTrunc_i_mul69_add4_cnn741_sel_x_b = i_mul69_add4_cnn741_q[63:0];

    // redist775_bgTrunc_i_mul69_add4_cnn741_sel_x_b_1(DELAY,18692)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist775_bgTrunc_i_mul69_add4_cnn741_sel_x_b_1_q <= bgTrunc_i_mul69_add4_cnn741_sel_x_b;
        end
    end

    // i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742(REG,571)@762 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q <= redist775_bgTrunc_i_mul69_add4_cnn741_sel_x_b_1_q;
        end
    end

    // i_mul69_3_cnn747(ADD,1032)@763
    assign i_mul69_3_cnn747_a = {1'b0, i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q};
    assign i_mul69_3_cnn747_b = {1'b0, c_i64_57_q};
    assign i_mul69_3_cnn747_o = $unsigned(i_mul69_3_cnn747_a) + $unsigned(i_mul69_3_cnn747_b);
    assign i_mul69_3_cnn747_q = i_mul69_3_cnn747_o[64:0];

    // bgTrunc_i_mul69_3_cnn747_sel_x(BITSELECT,1065)@763
    assign bgTrunc_i_mul69_3_cnn747_sel_x_b = i_mul69_3_cnn747_q[63:0];

    // redist777_bgTrunc_i_mul69_3_cnn747_sel_x_b_1(DELAY,18694)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist777_bgTrunc_i_mul69_3_cnn747_sel_x_b_1_q <= bgTrunc_i_mul69_3_cnn747_sel_x_b;
        end
    end

    // i_llvm_fpga_fanout_i64_mul69_3_fanout_adaptor_cnn748(REG,570)@764 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i64_mul69_3_fanout_adaptor_cnn748_q <= redist777_bgTrunc_i_mul69_3_cnn747_sel_x_b_1_q;
        end
    end

    // i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select(BITSELECT,17897)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_b = i_llvm_fpga_fanout_i64_mul69_3_fanout_adaptor_cnn748_q[63:54];
    assign i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_c = i_llvm_fpga_fanout_i64_mul69_3_fanout_adaptor_cnn748_q[53:36];
    assign i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_d = i_llvm_fpga_fanout_i64_mul69_3_fanout_adaptor_cnn748_q[35:18];
    assign i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_e = i_llvm_fpga_fanout_i64_mul69_3_fanout_adaptor_cnn748_q[17:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_bjA2(BITJOIN,4998)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q = {GND_q, i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0(BITSHIFT,8388)@765
    assign i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0_q = i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5(BITSHIFT,5171)@765
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_15_cnn1382_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5_q = i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_bjA7(BITJOIN,5003)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q = {GND_q, i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0(BITSHIFT,8389)@765
    assign i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0_q = i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3(BITSHIFT,5169)@765
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_15_cnn1382_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3_q = i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1(ADD,5174)@765 + 1
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_15_cnn1382_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_15_cnn1382_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14342)@766
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_10_cnn1187_mult_x_bjA12(BITJOIN,5008)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q = {GND_q, i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0(BITSHIFT,8390)@765
    assign i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0_q = i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1(BITSHIFT,5167)@765
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_15_cnn1382_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1_q = i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_bjA17(BITJOIN,5013)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q = {GND_q, i_add_ptr70_3_10_cnn1187_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0(BITSHIFT,8391)@765
    assign i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0_q = i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0(ADD,5173)@765 + 1
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_15_cnn1382_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_15_cnn1382_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14370)@766
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2(ADD,10283)@766 + 1
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14375)@766
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_0_1_q[69:69];

    // redist226_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18143)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist226_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist227_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18144)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist227_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2(ADD,10284)@767 + 1
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist227_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist227_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist226_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist226_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist675_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18592)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist675_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10285)@768
    assign i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p2_of_2_q, redist675_i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_15_cnn1382_mult_extender_x(BITJOIN,1897)@768
    assign i_add_ptr70_3_15_cnn1382_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_15_cnn1382_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_15_cnn1382_trunc_sel_x(BITSELECT,1899)@768
    assign i_add_ptr70_3_15_cnn1382_trunc_sel_x_b = i_add_ptr70_3_15_cnn1382_mult_extender_x_q[63:0];

    // i_mul65_10_cnn1156_multconst_x(CONSTANT,2716)
    assign i_mul65_10_cnn1156_multconst_x_q = 55'b0000000000000000000000000000000000000000000000000000000;

    // c_i64_15(CONSTANT,36)
    assign c_i64_15_q = 64'b0000000000000000000000000000000000000000000000000000000000001111;

    // c_i64_16(CONSTANT,37)
    assign c_i64_16_q = 64'b0000000000000000000000000000000000000000000000000000000000010000;

    // redist784_i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out_1(DELAY,18701)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist784_i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out_1_q <= i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out;
        end
    end

    // i_inc79_15_cnn1389(ADD,512)@755
    assign i_inc79_15_cnn1389_a = {1'b0, redist784_i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out_1_q};
    assign i_inc79_15_cnn1389_b = {1'b0, c_i64_16_q};
    assign i_inc79_15_cnn1389_o = $unsigned(i_inc79_15_cnn1389_a) + $unsigned(i_inc79_15_cnn1389_b);
    assign i_inc79_15_cnn1389_q = i_inc79_15_cnn1389_o[64:0];

    // bgTrunc_i_inc79_15_cnn1389_sel_x(BITSELECT,1046)@755
    assign bgTrunc_i_inc79_15_cnn1389_sel_x_b = i_inc79_15_cnn1389_q[63:0];

    // i_llvm_fpga_push_i64_ti_055_push34_cnn1414(BLACKBOX,663)@755
    // out out_feedback_out_34@20000000
    // out out_feedback_valid_out_34@20000000
    cnn_i_llvm_fpga_push_i64_ti_055_push34_1415 thei_llvm_fpga_push_i64_ti_055_push34_cnn1414 (
        .in_data_in(bgTrunc_i_inc79_15_cnn1389_sel_x_b),
        .in_fanout_adaptor942(i_llvm_fpga_fanout_i1_fanout_adaptor942_cnn1401_q),
        .in_feedback_stall_in_34(i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_feedback_stall_out_34),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(),
        .out_feedback_out_34(i_llvm_fpga_push_i64_ti_055_push34_cnn1414_out_feedback_out_34),
        .out_feedback_valid_out_34(i_llvm_fpga_push_i64_ti_055_push34_cnn1414_out_feedback_valid_out_34),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // c_i64_0gr(CONSTANT,30)
    assign c_i64_0gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000000;

    // i_llvm_fpga_pop_i64_ti_055_pop34_cnn749(BLACKBOX,649)@754
    // out out_feedback_stall_out_34@20000000
    cnn_i_llvm_fpga_pop_i64_ti_055_pop34_750 thei_llvm_fpga_pop_i64_ti_055_pop34_cnn749 (
        .in_data_in(c_i64_0gr_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor_cnn728_q),
        .in_feedback_in_34(i_llvm_fpga_push_i64_ti_055_push34_cnn1414_out_feedback_out_34),
        .in_feedback_valid_in_34(i_llvm_fpga_push_i64_ti_055_push34_cnn1414_out_feedback_valid_out_34),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist769_sync_in_aunroll_x_in_i_valid_753_q),
        .out_data_out(i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out),
        .out_feedback_stall_out_34(i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_feedback_stall_out_34),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_inc79_14_cnn1350(LOGICAL,508)@754
    assign i_inc79_14_cnn1350_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_15_q;

    // i_inc79_14_cnn1350_vt_select_63(BITSELECT,511)@754
    assign i_inc79_14_cnn1350_vt_select_63_b = i_inc79_14_cnn1350_q[63:4];

    // i_inc79_14_cnn1350_vt_join(BITJOIN,510)@754
    assign i_inc79_14_cnn1350_vt_join_q = {i_inc79_14_cnn1350_vt_select_63_b, c_i4_1gr_q};

    // i_mul65_15_cnn1351_bs1_merged_bit_select(BITSELECT,17877)@754
    assign i_mul65_15_cnn1351_bs1_merged_bit_select_b = i_inc79_14_cnn1350_vt_join_q[63:54];
    assign i_mul65_15_cnn1351_bs1_merged_bit_select_c = i_inc79_14_cnn1350_vt_join_q[53:36];
    assign i_mul65_15_cnn1351_bs1_merged_bit_select_d = i_inc79_14_cnn1350_vt_join_q[35:18];
    assign i_mul65_15_cnn1351_bs1_merged_bit_select_e = i_inc79_14_cnn1350_vt_join_q[17:0];

    // i_mul65_15_cnn1351_bjA2(BITJOIN,2928)@754
    assign i_mul65_15_cnn1351_bjA2_q = {GND_q, i_mul65_15_cnn1351_bs1_merged_bit_select_b};

    // i_mul65_15_cnn1351_im0_cma(CHAINMULTADD,17825)@754 + 5
    // out q@760
    assign i_mul65_15_cnn1351_im0_cma_reset = ~ (resetn);
    assign i_mul65_15_cnn1351_im0_cma_ena0 = 1'b1;
    assign i_mul65_15_cnn1351_im0_cma_ena1 = i_mul65_15_cnn1351_im0_cma_ena0;
    assign i_mul65_15_cnn1351_im0_cma_ena2 = i_mul65_15_cnn1351_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_im0_cma_ah[0] <= i_mul65_15_cnn1351_bjA2_q;
        end
    end

    assign i_mul65_15_cnn1351_im0_cma_a0 = i_mul65_15_cnn1351_im0_cma_ah[0];
    assign i_mul65_15_cnn1351_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_15_cnn1351_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_15_cnn1351_im0_cma_ena2, i_mul65_15_cnn1351_im0_cma_ena1, i_mul65_15_cnn1351_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_15_cnn1351_im0_cma_a0),
        .coefsela(i_mul65_15_cnn1351_im0_cma_c0),
        .resulta(i_mul65_15_cnn1351_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_15_cnn1351_im0_cma_delay ( .xin(i_mul65_15_cnn1351_im0_cma_s0), .xout(i_mul65_15_cnn1351_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_15_cnn1351_im0_cma_q = i_mul65_15_cnn1351_im0_cma_qq[21:0];

    // redist43_i_mul65_15_cnn1351_im0_cma_q_1(DELAY,17960)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist43_i_mul65_15_cnn1351_im0_cma_q_1_q <= i_mul65_15_cnn1351_im0_cma_q;
        end
    end

    // i_mul65_15_cnn1351_sums_align_5(BITSHIFT,2951)@761
    assign i_mul65_15_cnn1351_sums_align_5_qint = { redist43_i_mul65_15_cnn1351_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_15_cnn1351_sums_align_5_q = i_mul65_15_cnn1351_sums_align_5_qint[74:0];

    // i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11471)@761
    assign i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_15_cnn1351_sums_align_5_q[69:0];

    // i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11458)@761
    assign i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_15_cnn1351_sums_align_3_q[64:64];

    // i_mul65_15_cnn1351_bjA7(BITJOIN,2933)@754
    assign i_mul65_15_cnn1351_bjA7_q = {GND_q, i_mul65_15_cnn1351_bs1_merged_bit_select_c};

    // i_mul65_15_cnn1351_im5_cma(CHAINMULTADD,17826)@754 + 5
    // out q@760
    assign i_mul65_15_cnn1351_im5_cma_reset = ~ (resetn);
    assign i_mul65_15_cnn1351_im5_cma_ena0 = 1'b1;
    assign i_mul65_15_cnn1351_im5_cma_ena1 = i_mul65_15_cnn1351_im5_cma_ena0;
    assign i_mul65_15_cnn1351_im5_cma_ena2 = i_mul65_15_cnn1351_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_im5_cma_ah[0] <= i_mul65_15_cnn1351_bjA7_q;
        end
    end

    assign i_mul65_15_cnn1351_im5_cma_a0 = i_mul65_15_cnn1351_im5_cma_ah[0];
    assign i_mul65_15_cnn1351_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_15_cnn1351_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_15_cnn1351_im5_cma_ena2, i_mul65_15_cnn1351_im5_cma_ena1, i_mul65_15_cnn1351_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_15_cnn1351_im5_cma_a0),
        .coefsela(i_mul65_15_cnn1351_im5_cma_c0),
        .resulta(i_mul65_15_cnn1351_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_15_cnn1351_im5_cma_delay ( .xin(i_mul65_15_cnn1351_im5_cma_s0), .xout(i_mul65_15_cnn1351_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_15_cnn1351_im5_cma_q = i_mul65_15_cnn1351_im5_cma_qq[29:0];

    // redist42_i_mul65_15_cnn1351_im5_cma_q_1(DELAY,17959)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist42_i_mul65_15_cnn1351_im5_cma_q_1_q <= i_mul65_15_cnn1351_im5_cma_q;
        end
    end

    // i_mul65_15_cnn1351_sums_align_3(BITSHIFT,2949)@761
    assign i_mul65_15_cnn1351_sums_align_3_qint = { redist42_i_mul65_15_cnn1351_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_15_cnn1351_sums_align_3_q = i_mul65_15_cnn1351_sums_align_3_qint[64:0];

    // i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11463)@761
    assign i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_align_3_q};

    // i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2(ADD,9348)@761 + 1
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_q = i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11477)@762
    assign i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_15_cnn1351_sums_result_add_0_0_q[47:47];

    // i_mul65_15_cnn1351_bjA12(BITJOIN,2938)@754
    assign i_mul65_15_cnn1351_bjA12_q = {GND_q, i_mul65_15_cnn1351_bs1_merged_bit_select_d};

    // i_mul65_15_cnn1351_im10_cma(CHAINMULTADD,17827)@754 + 5
    // out q@760
    assign i_mul65_15_cnn1351_im10_cma_reset = ~ (resetn);
    assign i_mul65_15_cnn1351_im10_cma_ena0 = 1'b1;
    assign i_mul65_15_cnn1351_im10_cma_ena1 = i_mul65_15_cnn1351_im10_cma_ena0;
    assign i_mul65_15_cnn1351_im10_cma_ena2 = i_mul65_15_cnn1351_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_im10_cma_ah[0] <= i_mul65_15_cnn1351_bjA12_q;
        end
    end

    assign i_mul65_15_cnn1351_im10_cma_a0 = i_mul65_15_cnn1351_im10_cma_ah[0];
    assign i_mul65_15_cnn1351_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_15_cnn1351_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_15_cnn1351_im10_cma_ena2, i_mul65_15_cnn1351_im10_cma_ena1, i_mul65_15_cnn1351_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_15_cnn1351_im10_cma_a0),
        .coefsela(i_mul65_15_cnn1351_im10_cma_c0),
        .resulta(i_mul65_15_cnn1351_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_15_cnn1351_im10_cma_delay ( .xin(i_mul65_15_cnn1351_im10_cma_s0), .xout(i_mul65_15_cnn1351_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_15_cnn1351_im10_cma_q = i_mul65_15_cnn1351_im10_cma_qq[29:0];

    // redist41_i_mul65_15_cnn1351_im10_cma_q_1(DELAY,17958)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist41_i_mul65_15_cnn1351_im10_cma_q_1_q <= i_mul65_15_cnn1351_im10_cma_q;
        end
    end

    // i_mul65_15_cnn1351_sums_align_1(BITSHIFT,2947)@761
    assign i_mul65_15_cnn1351_sums_align_1_qint = { redist41_i_mul65_15_cnn1351_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_15_cnn1351_sums_align_1_q = i_mul65_15_cnn1351_sums_align_1_qint[46:0];

    // i_mul65_15_cnn1351_bjA17(BITJOIN,2943)@754
    assign i_mul65_15_cnn1351_bjA17_q = {GND_q, i_mul65_15_cnn1351_bs1_merged_bit_select_e};

    // i_mul65_15_cnn1351_im15_cma(CHAINMULTADD,17828)@754 + 5
    // out q@760
    assign i_mul65_15_cnn1351_im15_cma_reset = ~ (resetn);
    assign i_mul65_15_cnn1351_im15_cma_ena0 = 1'b1;
    assign i_mul65_15_cnn1351_im15_cma_ena1 = i_mul65_15_cnn1351_im15_cma_ena0;
    assign i_mul65_15_cnn1351_im15_cma_ena2 = i_mul65_15_cnn1351_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_im15_cma_ah[0] <= i_mul65_15_cnn1351_bjA17_q;
        end
    end

    assign i_mul65_15_cnn1351_im15_cma_a0 = i_mul65_15_cnn1351_im15_cma_ah[0];
    assign i_mul65_15_cnn1351_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_15_cnn1351_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_15_cnn1351_im15_cma_ena2, i_mul65_15_cnn1351_im15_cma_ena1, i_mul65_15_cnn1351_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_15_cnn1351_im15_cma_a0),
        .coefsela(i_mul65_15_cnn1351_im15_cma_c0),
        .resulta(i_mul65_15_cnn1351_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_15_cnn1351_im15_cma_delay ( .xin(i_mul65_15_cnn1351_im15_cma_s0), .xout(i_mul65_15_cnn1351_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_15_cnn1351_im15_cma_q = i_mul65_15_cnn1351_im15_cma_qq[29:0];

    // redist40_i_mul65_15_cnn1351_im15_cma_q_1(DELAY,17957)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist40_i_mul65_15_cnn1351_im15_cma_q_1_q <= i_mul65_15_cnn1351_im15_cma_q;
        end
    end

    // i_mul65_15_cnn1351_sums_result_add_0_0(ADD,2953)@761 + 1
    assign i_mul65_15_cnn1351_sums_result_add_0_0_a = {{18{redist40_i_mul65_15_cnn1351_im15_cma_q_1_q[29]}}, redist40_i_mul65_15_cnn1351_im15_cma_q_1_q};
    assign i_mul65_15_cnn1351_sums_result_add_0_0_b = {{1{i_mul65_15_cnn1351_sums_align_1_q[46]}}, i_mul65_15_cnn1351_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_sums_result_add_0_0_o <= $signed(i_mul65_15_cnn1351_sums_result_add_0_0_a) + $signed(i_mul65_15_cnn1351_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_15_cnn1351_sums_result_add_0_0_q = i_mul65_15_cnn1351_sums_result_add_0_0_o[47:0];

    // i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11499)@762
    assign i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_15_cnn1351_sums_result_add_0_0_q};

    // i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2(ADD,9359)@762 + 1
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_q = i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11511)@763
    assign i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11474)@761
    assign i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_15_cnn1351_sums_align_5_q[74:74];

    // redist511_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18428)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist511_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11473)@761
    assign i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_15_cnn1351_sums_align_5_q[74:70];

    // redist512_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18429)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist512_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11475)@762
    assign i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist511_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist512_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18430)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11470)@762
    assign i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist513_i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2(ADD,9349)@762 + 1
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_cin = i_mul65_15_cnn1351_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_15_cnn1351_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_q = i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11512)@763
    assign i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_15_cnn1351_sums_result_add_0_1_p2_of_2_q};

    // redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18421)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11507)@763
    assign i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist504_i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2(ADD,9360)@763 + 1
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_cin = i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_15_cnn1351_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_q = i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist749_i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_q_1(DELAY,18666)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist749_i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_15_cnn1351_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9361)@764
    assign i_mul65_15_cnn1351_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_15_cnn1351_sums_result_add_1_0_p2_of_2_q, redist749_i_mul65_15_cnn1351_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_15_cnn1351_extender_x(BITJOIN,2725)@764
    assign i_mul65_15_cnn1351_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_15_cnn1351_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_15_cnn1351_sel_x(BITSELECT,1052)@764
    assign bgTrunc_i_mul65_15_cnn1351_sel_x_b = i_mul65_15_cnn1351_extender_x_q[63:0];

    // i_mul65_15_cnn1351_vt_select_63(BITSELECT,1004)@764
    assign i_mul65_15_cnn1351_vt_select_63_b = bgTrunc_i_mul65_15_cnn1351_sel_x_b[63:4];

    // i_mul65_15_cnn1351_vt_join(BITJOIN,1003)@764
    assign i_mul65_15_cnn1351_vt_join_q = {i_mul65_15_cnn1351_vt_select_63_b, i_mul65_15_cnn1351_vt_const_3_q};

    // i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select(BITSELECT,17903)@764
    assign i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_b = i_mul65_15_cnn1351_vt_join_q[63:54];
    assign i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_c = i_mul65_15_cnn1351_vt_join_q[53:36];
    assign i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_d = i_mul65_15_cnn1351_vt_join_q[35:18];
    assign i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_e = i_mul65_15_cnn1351_vt_join_q[17:0];

    // i_add_ptr66_15_cnn1356_mult_x_bjA2(BITJOIN,3438)@764
    assign i_add_ptr66_15_cnn1356_mult_x_bjA2_q = {GND_q, i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_15_cnn1356_mult_x_im0_shift0(BITSHIFT,8160)@764
    assign i_add_ptr66_15_cnn1356_mult_x_im0_shift0_qint = { i_add_ptr66_15_cnn1356_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_15_cnn1356_mult_x_im0_shift0_q = i_add_ptr66_15_cnn1356_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_align_5(BITSHIFT,3461)@764
    assign i_add_ptr66_15_cnn1356_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_15_cnn1356_mult_x_im0_shift0_q[12]}}, i_add_ptr66_15_cnn1356_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_15_cnn1356_mult_x_sums_align_5_q = i_add_ptr66_15_cnn1356_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_15_cnn1356_mult_x_bjA7(BITJOIN,3443)@764
    assign i_add_ptr66_15_cnn1356_mult_x_bjA7_q = {GND_q, i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_15_cnn1356_mult_x_im5_shift0(BITSHIFT,8161)@764
    assign i_add_ptr66_15_cnn1356_mult_x_im5_shift0_qint = { i_add_ptr66_15_cnn1356_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_15_cnn1356_mult_x_im5_shift0_q = i_add_ptr66_15_cnn1356_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_align_3(BITSHIFT,3459)@764
    assign i_add_ptr66_15_cnn1356_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_15_cnn1356_mult_x_im5_shift0_q[20]}}, i_add_ptr66_15_cnn1356_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_15_cnn1356_mult_x_sums_align_3_q = i_add_ptr66_15_cnn1356_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1(ADD,3464)@764 + 1
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_15_cnn1356_mult_x_sums_align_3_q[58]}}, i_add_ptr66_15_cnn1356_mult_x_sums_align_3_q};
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_15_cnn1356_mult_x_sums_align_5_q[68]}}, i_add_ptr66_15_cnn1356_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_q = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12290)@765
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_15_cnn1356_mult_x_bjA12(BITJOIN,3448)@764
    assign i_add_ptr66_15_cnn1356_mult_x_bjA12_q = {GND_q, i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_15_cnn1356_mult_x_im10_shift0(BITSHIFT,8162)@764
    assign i_add_ptr66_15_cnn1356_mult_x_im10_shift0_qint = { i_add_ptr66_15_cnn1356_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_15_cnn1356_mult_x_im10_shift0_q = i_add_ptr66_15_cnn1356_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_align_1(BITSHIFT,3457)@764
    assign i_add_ptr66_15_cnn1356_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_15_cnn1356_mult_x_im10_shift0_q[20]}}, i_add_ptr66_15_cnn1356_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_15_cnn1356_mult_x_sums_align_1_q = i_add_ptr66_15_cnn1356_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_15_cnn1356_mult_x_bjA17(BITJOIN,3453)@764
    assign i_add_ptr66_15_cnn1356_mult_x_bjA17_q = {GND_q, i_add_ptr66_15_cnn1356_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_15_cnn1356_mult_x_im15_shift0(BITSHIFT,8163)@764
    assign i_add_ptr66_15_cnn1356_mult_x_im15_shift0_qint = { i_add_ptr66_15_cnn1356_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_15_cnn1356_mult_x_im15_shift0_q = i_add_ptr66_15_cnn1356_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0(ADD,3463)@764 + 1
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_15_cnn1356_mult_x_im15_shift0_q[20]}}, i_add_ptr66_15_cnn1356_mult_x_im15_shift0_q};
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_15_cnn1356_mult_x_sums_align_1_q[40]}}, i_add_ptr66_15_cnn1356_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_q = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12318)@765
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2(ADD,9656)@765 + 1
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12323)@765
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_0_1_q[69:69];

    // redist340_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18257)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist340_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist341_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18258)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist341_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2(ADD,9657)@766 + 1
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist341_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist341_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist340_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist340_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist732_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18649)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist732_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9658)@767
    assign i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p2_of_2_q, redist732_i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_15_cnn1356_mult_extender_x(BITJOIN,1327)@767
    assign i_add_ptr66_15_cnn1356_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_15_cnn1356_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_15_cnn1356_trunc_sel_x(BITSELECT,1329)@767
    assign i_add_ptr66_15_cnn1356_trunc_sel_x_b = i_add_ptr66_15_cnn1356_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352(BLACKBOX,702)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_1353 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_select_63(BITSELECT,705)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9(CONSTANT,667)
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q = 10'b0000000000;

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_join(BITJOIN,704)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_15_cnn1356_add_x(ADD,1321)@767
    assign i_add_ptr66_15_cnn1356_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer19_cnn1352_vt_join_q};
    assign i_add_ptr66_15_cnn1356_add_x_b = {1'b0, i_add_ptr66_15_cnn1356_trunc_sel_x_b};
    assign i_add_ptr66_15_cnn1356_add_x_o = $unsigned(i_add_ptr66_15_cnn1356_add_x_a) + $unsigned(i_add_ptr66_15_cnn1356_add_x_b);
    assign i_add_ptr66_15_cnn1356_add_x_q = i_add_ptr66_15_cnn1356_add_x_o[64:0];

    // i_add_ptr66_15_cnn1356_dupName_0_trunc_sel_x(BITSELECT,1330)@767
    assign i_add_ptr66_15_cnn1356_dupName_0_trunc_sel_x_b = i_add_ptr66_15_cnn1356_add_x_q[63:0];

    // i_add_ptr66_15_cnn1355_vt_select_63(BITSELECT,69)@767
    assign i_add_ptr66_15_cnn1355_vt_select_63_b = i_add_ptr66_15_cnn1356_dupName_0_trunc_sel_x_b[63:6];

    // redist873_i_add_ptr66_15_cnn1355_vt_select_63_b_1(DELAY,18790)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist873_i_add_ptr66_15_cnn1355_vt_select_63_b_1_q <= i_add_ptr66_15_cnn1355_vt_select_63_b;
        end
    end

    // i_add_ptr66_15_cnn1355_vt_const_5(CONSTANT,67)
    assign i_add_ptr66_15_cnn1355_vt_const_5_q = 6'b011100;

    // i_add_ptr66_15_cnn1355_vt_join(BITJOIN,68)@768
    assign i_add_ptr66_15_cnn1355_vt_join_q = {redist873_i_add_ptr66_15_cnn1355_vt_select_63_b_1_q, i_add_ptr66_15_cnn1355_vt_const_5_q};

    // i_add_ptr70_3_15_cnn1382_add_x(ADD,1891)@768
    assign i_add_ptr70_3_15_cnn1382_add_x_a = {1'b0, i_add_ptr66_15_cnn1355_vt_join_q};
    assign i_add_ptr70_3_15_cnn1382_add_x_b = {1'b0, i_add_ptr70_3_15_cnn1382_trunc_sel_x_b};
    assign i_add_ptr70_3_15_cnn1382_add_x_o = $unsigned(i_add_ptr70_3_15_cnn1382_add_x_a) + $unsigned(i_add_ptr70_3_15_cnn1382_add_x_b);
    assign i_add_ptr70_3_15_cnn1382_add_x_q = i_add_ptr70_3_15_cnn1382_add_x_o[64:0];

    // i_add_ptr70_3_15_cnn1382_dupName_0_trunc_sel_x(BITSELECT,1900)@768
    assign i_add_ptr70_3_15_cnn1382_dupName_0_trunc_sel_x_b = i_add_ptr70_3_15_cnn1382_add_x_q[63:0];

    // i_add_ptr70_3_15_cnn1381_vt_select_63(BITSELECT,240)@768
    assign i_add_ptr70_3_15_cnn1381_vt_select_63_b = i_add_ptr70_3_15_cnn1382_dupName_0_trunc_sel_x_b[63:2];

    // redist816_i_add_ptr70_3_15_cnn1381_vt_select_63_b_1(DELAY,18733)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist816_i_add_ptr70_3_15_cnn1381_vt_select_63_b_1_q <= i_add_ptr70_3_15_cnn1381_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_15_cnn1381_vt_join(BITJOIN,239)@769
    assign i_add_ptr70_3_15_cnn1381_vt_join_q = {redist816_i_add_ptr70_3_15_cnn1381_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_15_cnn1384_add_x(ADD,2531)@769
    assign i_add_ptr73_371_15_cnn1384_add_x_a = {1'b0, i_add_ptr70_3_15_cnn1381_vt_join_q};
    assign i_add_ptr73_371_15_cnn1384_add_x_b = {1'b0, i_add_ptr73_371_15_cnn1384_trunc_sel_x_b};
    assign i_add_ptr73_371_15_cnn1384_add_x_o = $unsigned(i_add_ptr73_371_15_cnn1384_add_x_a) + $unsigned(i_add_ptr73_371_15_cnn1384_add_x_b);
    assign i_add_ptr73_371_15_cnn1384_add_x_q = i_add_ptr73_371_15_cnn1384_add_x_o[64:0];

    // i_add_ptr73_371_15_cnn1384_dupName_0_trunc_sel_x(BITSELECT,2540)@769
    assign i_add_ptr73_371_15_cnn1384_dupName_0_trunc_sel_x_b = i_add_ptr73_371_15_cnn1384_add_x_q[63:0];

    // i_add_ptr73_371_15_cnn1383_vt_select_63(BITSELECT,432)@769
    assign i_add_ptr73_371_15_cnn1383_vt_select_63_b = i_add_ptr73_371_15_cnn1384_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_15_cnn1383_vt_join(BITJOIN,431)@769
    assign i_add_ptr73_371_15_cnn1383_vt_join_q = {i_add_ptr73_371_15_cnn1383_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_select_63(BITSELECT,970)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_select_63_b = i_add_ptr73_371_15_cnn1383_vt_join_q[63:2];

    // i_add_ptr66_10_cnn1160_vt_const_1(CONSTANT,52)
    assign i_add_ptr66_10_cnn1160_vt_const_1_q = 2'b00;

    // i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_join(BITJOIN,969)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn171_cnn1378(BLACKBOX,635)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_171_cnn1379 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn171_cnn1378 (
        .in_intel_reserved_ffwd_90_0(in_intel_reserved_ffwd_90_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_90_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn171_cnn1378_out_dest_data_out_90_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0(BITSHIFT,8572)@766
    assign i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0_q = i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5(BITSHIFT,6551)@766
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_15_cnn1376_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5_q = i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0(BITSHIFT,8573)@766
    assign i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0_q = i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3(BITSHIFT,6549)@766
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_15_cnn1376_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3_q = i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1(ADD,6554)@766 + 1
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_15_cnn1376_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_15_cnn1376_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15998)@767
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0(BITSHIFT,8574)@766
    assign i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0_q = i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1(BITSHIFT,6547)@766
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_15_cnn1376_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1_q = i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0(BITSHIFT,8575)@766
    assign i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0_q = i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0(ADD,6553)@766 + 1
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_15_cnn1376_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_15_cnn1376_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16026)@767
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2(ADD,10789)@767 + 1
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16031)@767
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_0_1_q[69:69];

    // redist134_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18051)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist134_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist135_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18052)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist135_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2(ADD,10790)@768 + 1
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist135_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist135_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist134_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist134_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist629_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18546)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist629_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10791)@769
    assign i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p2_of_2_q, redist629_i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_15_cnn1376_mult_extender_x(BITJOIN,2357)@769
    assign i_add_ptr73_270_15_cnn1376_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_15_cnn1376_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_15_cnn1376_trunc_sel_x(BITSELECT,2359)@769
    assign i_add_ptr73_270_15_cnn1376_trunc_sel_x_b = i_add_ptr73_270_15_cnn1376_mult_extender_x_q[63:0];

    // c_i64_38(CONSTANT,42)
    assign c_i64_38_q = 64'b0000000000000000000000000000000000000000000000000000000000100110;

    // i_mul69_2_cnn745(ADD,1031)@763
    assign i_mul69_2_cnn745_a = {1'b0, i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q};
    assign i_mul69_2_cnn745_b = {1'b0, c_i64_38_q};
    assign i_mul69_2_cnn745_o = $unsigned(i_mul69_2_cnn745_a) + $unsigned(i_mul69_2_cnn745_b);
    assign i_mul69_2_cnn745_q = i_mul69_2_cnn745_o[64:0];

    // bgTrunc_i_mul69_2_cnn745_sel_x(BITSELECT,1064)@763
    assign bgTrunc_i_mul69_2_cnn745_sel_x_b = i_mul69_2_cnn745_q[63:0];

    // redist778_bgTrunc_i_mul69_2_cnn745_sel_x_b_1(DELAY,18695)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist778_bgTrunc_i_mul69_2_cnn745_sel_x_b_1_q <= bgTrunc_i_mul69_2_cnn745_sel_x_b;
        end
    end

    // i_llvm_fpga_fanout_i64_mul69_2_fanout_adaptor_cnn746(REG,569)@764 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i64_mul69_2_fanout_adaptor_cnn746_q <= redist778_bgTrunc_i_mul69_2_cnn745_sel_x_b_1_q;
        end
    end

    // i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select(BITSELECT,17896)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_b = i_llvm_fpga_fanout_i64_mul69_2_fanout_adaptor_cnn746_q[63:54];
    assign i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_c = i_llvm_fpga_fanout_i64_mul69_2_fanout_adaptor_cnn746_q[53:36];
    assign i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_d = i_llvm_fpga_fanout_i64_mul69_2_fanout_adaptor_cnn746_q[35:18];
    assign i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_e = i_llvm_fpga_fanout_i64_mul69_2_fanout_adaptor_cnn746_q[17:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_bjA2(BITJOIN,4488)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q = {GND_q, i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0(BITSHIFT,8320)@765
    assign i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0_q = i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5(BITSHIFT,4661)@765
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_15_cnn1374_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5_q = i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_bjA7(BITJOIN,4493)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q = {GND_q, i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0(BITSHIFT,8321)@765
    assign i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0_q = i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3(BITSHIFT,4659)@765
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_15_cnn1374_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3_q = i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1(ADD,4664)@765 + 1
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_15_cnn1374_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_15_cnn1374_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13730)@766
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_10_cnn1179_mult_x_bjA12(BITJOIN,4498)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q = {GND_q, i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0(BITSHIFT,8322)@765
    assign i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0_q = i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1(BITSHIFT,4657)@765
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_15_cnn1374_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1_q = i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_bjA17(BITJOIN,4503)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q = {GND_q, i_add_ptr70_2_10_cnn1179_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0(BITSHIFT,8323)@765
    assign i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0_q = i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0(ADD,4663)@765 + 1
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_15_cnn1374_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_15_cnn1374_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13758)@766
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2(ADD,10096)@766 + 1
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13763)@766
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_0_1_q[69:69];

    // redist260_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18177)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist260_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist261_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18178)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist261_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2(ADD,10097)@767 + 1
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist261_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist261_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist260_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist260_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist692_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18609)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist692_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10098)@768
    assign i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p2_of_2_q, redist692_i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_15_cnn1374_mult_extender_x(BITJOIN,1727)@768
    assign i_add_ptr70_2_15_cnn1374_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_15_cnn1374_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_15_cnn1374_trunc_sel_x(BITSELECT,1729)@768
    assign i_add_ptr70_2_15_cnn1374_trunc_sel_x_b = i_add_ptr70_2_15_cnn1374_mult_extender_x_q[63:0];

    // i_add_ptr70_2_15_cnn1374_add_x(ADD,1721)@768
    assign i_add_ptr70_2_15_cnn1374_add_x_a = {1'b0, i_add_ptr66_15_cnn1355_vt_join_q};
    assign i_add_ptr70_2_15_cnn1374_add_x_b = {1'b0, i_add_ptr70_2_15_cnn1374_trunc_sel_x_b};
    assign i_add_ptr70_2_15_cnn1374_add_x_o = $unsigned(i_add_ptr70_2_15_cnn1374_add_x_a) + $unsigned(i_add_ptr70_2_15_cnn1374_add_x_b);
    assign i_add_ptr70_2_15_cnn1374_add_x_q = i_add_ptr70_2_15_cnn1374_add_x_o[64:0];

    // i_add_ptr70_2_15_cnn1374_dupName_0_trunc_sel_x(BITSELECT,1730)@768
    assign i_add_ptr70_2_15_cnn1374_dupName_0_trunc_sel_x_b = i_add_ptr70_2_15_cnn1374_add_x_q[63:0];

    // i_add_ptr70_2_15_cnn1373_vt_select_63(BITSELECT,189)@768
    assign i_add_ptr70_2_15_cnn1373_vt_select_63_b = i_add_ptr70_2_15_cnn1374_dupName_0_trunc_sel_x_b[63:2];

    // redist833_i_add_ptr70_2_15_cnn1373_vt_select_63_b_1(DELAY,18750)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist833_i_add_ptr70_2_15_cnn1373_vt_select_63_b_1_q <= i_add_ptr70_2_15_cnn1373_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_15_cnn1373_vt_join(BITJOIN,188)@769
    assign i_add_ptr70_2_15_cnn1373_vt_join_q = {redist833_i_add_ptr70_2_15_cnn1373_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_15_cnn1376_add_x(ADD,2351)@769
    assign i_add_ptr73_270_15_cnn1376_add_x_a = {1'b0, i_add_ptr70_2_15_cnn1373_vt_join_q};
    assign i_add_ptr73_270_15_cnn1376_add_x_b = {1'b0, i_add_ptr73_270_15_cnn1376_trunc_sel_x_b};
    assign i_add_ptr73_270_15_cnn1376_add_x_o = $unsigned(i_add_ptr73_270_15_cnn1376_add_x_a) + $unsigned(i_add_ptr73_270_15_cnn1376_add_x_b);
    assign i_add_ptr73_270_15_cnn1376_add_x_q = i_add_ptr73_270_15_cnn1376_add_x_o[64:0];

    // i_add_ptr73_270_15_cnn1376_dupName_0_trunc_sel_x(BITSELECT,2360)@769
    assign i_add_ptr73_270_15_cnn1376_dupName_0_trunc_sel_x_b = i_add_ptr73_270_15_cnn1376_add_x_q[63:0];

    // i_add_ptr73_270_15_cnn1375_vt_select_63(BITSELECT,378)@769
    assign i_add_ptr73_270_15_cnn1375_vt_select_63_b = i_add_ptr73_270_15_cnn1376_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_15_cnn1375_vt_join(BITJOIN,377)@769
    assign i_add_ptr73_270_15_cnn1375_vt_join_q = {i_add_ptr73_270_15_cnn1375_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_select_63(BITSELECT,966)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_select_63_b = i_add_ptr73_270_15_cnn1375_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_join(BITJOIN,965)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn170_cnn1370(BLACKBOX,634)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_170_cnn1371 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn170_cnn1370 (
        .in_intel_reserved_ffwd_89_0(in_intel_reserved_ffwd_89_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_89_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn170_cnn1370_out_dest_data_out_89_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0(BITSHIFT,8504)@766
    assign i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0_q = i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5(BITSHIFT,6041)@766
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_15_cnn1368_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5_q = i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0(BITSHIFT,8505)@766
    assign i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0_q = i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3(BITSHIFT,6039)@766
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_15_cnn1368_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3_q = i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1(ADD,6044)@766 + 1
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_15_cnn1368_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_15_cnn1368_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15386)@767
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0(BITSHIFT,8506)@766
    assign i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0_q = i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1(BITSHIFT,6037)@766
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_15_cnn1368_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1_q = i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0(BITSHIFT,8507)@766
    assign i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0_q = i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0(ADD,6043)@766 + 1
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_15_cnn1368_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_15_cnn1368_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15414)@767
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2(ADD,10602)@767 + 1
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15419)@767
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_0_1_q[69:69];

    // redist168_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18085)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist168_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist169_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18086)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist169_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2(ADD,10603)@768 + 1
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist169_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist169_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist168_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist168_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist646_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18563)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist646_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10604)@769
    assign i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p2_of_2_q, redist646_i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_15_cnn1368_mult_extender_x(BITJOIN,2187)@769
    assign i_add_ptr73_169_15_cnn1368_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_15_cnn1368_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_15_cnn1368_trunc_sel_x(BITSELECT,2189)@769
    assign i_add_ptr73_169_15_cnn1368_trunc_sel_x_b = i_add_ptr73_169_15_cnn1368_mult_extender_x_q[63:0];

    // c_i64_19(CONSTANT,38)
    assign c_i64_19_q = 64'b0000000000000000000000000000000000000000000000000000000000010011;

    // i_mul69_1_cnn743(ADD,1030)@763
    assign i_mul69_1_cnn743_a = {1'b0, i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q};
    assign i_mul69_1_cnn743_b = {1'b0, c_i64_19_q};
    assign i_mul69_1_cnn743_o = $unsigned(i_mul69_1_cnn743_a) + $unsigned(i_mul69_1_cnn743_b);
    assign i_mul69_1_cnn743_q = i_mul69_1_cnn743_o[64:0];

    // bgTrunc_i_mul69_1_cnn743_sel_x(BITSELECT,1063)@763
    assign bgTrunc_i_mul69_1_cnn743_sel_x_b = i_mul69_1_cnn743_q[63:0];

    // redist779_bgTrunc_i_mul69_1_cnn743_sel_x_b_1(DELAY,18696)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist779_bgTrunc_i_mul69_1_cnn743_sel_x_b_1_q <= bgTrunc_i_mul69_1_cnn743_sel_x_b;
        end
    end

    // i_llvm_fpga_fanout_i64_mul69_1_fanout_adaptor_cnn744(REG,568)@764 + 1
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_llvm_fpga_fanout_i64_mul69_1_fanout_adaptor_cnn744_q <= redist779_bgTrunc_i_mul69_1_cnn743_sel_x_b_1_q;
        end
    end

    // i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select(BITSELECT,17895)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_b = i_llvm_fpga_fanout_i64_mul69_1_fanout_adaptor_cnn744_q[63:54];
    assign i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_c = i_llvm_fpga_fanout_i64_mul69_1_fanout_adaptor_cnn744_q[53:36];
    assign i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_d = i_llvm_fpga_fanout_i64_mul69_1_fanout_adaptor_cnn744_q[35:18];
    assign i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_e = i_llvm_fpga_fanout_i64_mul69_1_fanout_adaptor_cnn744_q[17:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_bjA2(BITJOIN,3978)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q = {GND_q, i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0(BITSHIFT,8252)@765
    assign i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0_q = i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5(BITSHIFT,4151)@765
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_15_cnn1366_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5_q = i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_bjA7(BITJOIN,3983)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q = {GND_q, i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0(BITSHIFT,8253)@765
    assign i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0_q = i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3(BITSHIFT,4149)@765
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_15_cnn1366_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3_q = i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1(ADD,4154)@765 + 1
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_15_cnn1366_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_15_cnn1366_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13118)@766
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_10_cnn1171_mult_x_bjA12(BITJOIN,3988)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q = {GND_q, i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0(BITSHIFT,8254)@765
    assign i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0_q = i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1(BITSHIFT,4147)@765
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_15_cnn1366_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1_q = i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_bjA17(BITJOIN,3993)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q = {GND_q, i_add_ptr70_1_10_cnn1171_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0(BITSHIFT,8255)@765
    assign i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0_q = i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0(ADD,4153)@765 + 1
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_15_cnn1366_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_15_cnn1366_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13146)@766
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2(ADD,9909)@766 + 1
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13151)@766
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_0_1_q[69:69];

    // redist294_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18211)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist294_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist295_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18212)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist295_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2(ADD,9910)@767 + 1
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist295_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist295_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist294_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist294_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist709_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18626)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist709_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9911)@768
    assign i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p2_of_2_q, redist709_i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_15_cnn1366_mult_extender_x(BITJOIN,1557)@768
    assign i_add_ptr70_1_15_cnn1366_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_15_cnn1366_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_15_cnn1366_trunc_sel_x(BITSELECT,1559)@768
    assign i_add_ptr70_1_15_cnn1366_trunc_sel_x_b = i_add_ptr70_1_15_cnn1366_mult_extender_x_q[63:0];

    // i_add_ptr70_1_15_cnn1366_add_x(ADD,1551)@768
    assign i_add_ptr70_1_15_cnn1366_add_x_a = {1'b0, i_add_ptr66_15_cnn1355_vt_join_q};
    assign i_add_ptr70_1_15_cnn1366_add_x_b = {1'b0, i_add_ptr70_1_15_cnn1366_trunc_sel_x_b};
    assign i_add_ptr70_1_15_cnn1366_add_x_o = $unsigned(i_add_ptr70_1_15_cnn1366_add_x_a) + $unsigned(i_add_ptr70_1_15_cnn1366_add_x_b);
    assign i_add_ptr70_1_15_cnn1366_add_x_q = i_add_ptr70_1_15_cnn1366_add_x_o[64:0];

    // i_add_ptr70_1_15_cnn1366_dupName_0_trunc_sel_x(BITSELECT,1560)@768
    assign i_add_ptr70_1_15_cnn1366_dupName_0_trunc_sel_x_b = i_add_ptr70_1_15_cnn1366_add_x_q[63:0];

    // i_add_ptr70_1_15_cnn1365_vt_select_63(BITSELECT,138)@768
    assign i_add_ptr70_1_15_cnn1365_vt_select_63_b = i_add_ptr70_1_15_cnn1366_dupName_0_trunc_sel_x_b[63:2];

    // redist850_i_add_ptr70_1_15_cnn1365_vt_select_63_b_1(DELAY,18767)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist850_i_add_ptr70_1_15_cnn1365_vt_select_63_b_1_q <= i_add_ptr70_1_15_cnn1365_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_15_cnn1365_vt_join(BITJOIN,137)@769
    assign i_add_ptr70_1_15_cnn1365_vt_join_q = {redist850_i_add_ptr70_1_15_cnn1365_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_15_cnn1368_add_x(ADD,2181)@769
    assign i_add_ptr73_169_15_cnn1368_add_x_a = {1'b0, i_add_ptr70_1_15_cnn1365_vt_join_q};
    assign i_add_ptr73_169_15_cnn1368_add_x_b = {1'b0, i_add_ptr73_169_15_cnn1368_trunc_sel_x_b};
    assign i_add_ptr73_169_15_cnn1368_add_x_o = $unsigned(i_add_ptr73_169_15_cnn1368_add_x_a) + $unsigned(i_add_ptr73_169_15_cnn1368_add_x_b);
    assign i_add_ptr73_169_15_cnn1368_add_x_q = i_add_ptr73_169_15_cnn1368_add_x_o[64:0];

    // i_add_ptr73_169_15_cnn1368_dupName_0_trunc_sel_x(BITSELECT,2190)@769
    assign i_add_ptr73_169_15_cnn1368_dupName_0_trunc_sel_x_b = i_add_ptr73_169_15_cnn1368_add_x_q[63:0];

    // i_add_ptr73_169_15_cnn1367_vt_select_63(BITSELECT,327)@769
    assign i_add_ptr73_169_15_cnn1367_vt_select_63_b = i_add_ptr73_169_15_cnn1368_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_15_cnn1367_vt_join(BITJOIN,326)@769
    assign i_add_ptr73_169_15_cnn1367_vt_join_q = {i_add_ptr73_169_15_cnn1367_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_select_63(BITSELECT,962)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_select_63_b = i_add_ptr73_169_15_cnn1367_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_join(BITJOIN,961)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn169_cnn1362(BLACKBOX,633)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_169_cnn1363 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn169_cnn1362 (
        .in_intel_reserved_ffwd_88_0(in_intel_reserved_ffwd_88_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_88_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn169_cnn1362_out_dest_data_out_88_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_15_cnn1360_mult_x_im0_shift0(BITSHIFT,8480)@766
    assign i_add_ptr73_15_cnn1360_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_15_cnn1360_mult_x_im0_shift0_q = i_add_ptr73_15_cnn1360_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_align_5(BITSHIFT,5861)@766
    assign i_add_ptr73_15_cnn1360_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_15_cnn1360_mult_x_im0_shift0_q[12]}}, i_add_ptr73_15_cnn1360_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_15_cnn1360_mult_x_sums_align_5_q = i_add_ptr73_15_cnn1360_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_15_cnn1360_mult_x_im5_shift0(BITSHIFT,8481)@766
    assign i_add_ptr73_15_cnn1360_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_15_cnn1360_mult_x_im5_shift0_q = i_add_ptr73_15_cnn1360_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_align_3(BITSHIFT,5859)@766
    assign i_add_ptr73_15_cnn1360_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_15_cnn1360_mult_x_im5_shift0_q[20]}}, i_add_ptr73_15_cnn1360_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_15_cnn1360_mult_x_sums_align_3_q = i_add_ptr73_15_cnn1360_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1(ADD,5864)@766 + 1
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_15_cnn1360_mult_x_sums_align_3_q[58]}}, i_add_ptr73_15_cnn1360_mult_x_sums_align_3_q};
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_15_cnn1360_mult_x_sums_align_5_q[68]}}, i_add_ptr73_15_cnn1360_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_q = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15170)@767
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_15_cnn1360_mult_x_im10_shift0(BITSHIFT,8482)@766
    assign i_add_ptr73_15_cnn1360_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_15_cnn1360_mult_x_im10_shift0_q = i_add_ptr73_15_cnn1360_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_align_1(BITSHIFT,5857)@766
    assign i_add_ptr73_15_cnn1360_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_15_cnn1360_mult_x_im10_shift0_q[20]}}, i_add_ptr73_15_cnn1360_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_15_cnn1360_mult_x_sums_align_1_q = i_add_ptr73_15_cnn1360_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_15_cnn1360_mult_x_im15_shift0(BITSHIFT,8483)@766
    assign i_add_ptr73_15_cnn1360_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_15_cnn1360_mult_x_im15_shift0_q = i_add_ptr73_15_cnn1360_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0(ADD,5863)@766 + 1
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_15_cnn1360_mult_x_im15_shift0_q[20]}}, i_add_ptr73_15_cnn1360_mult_x_im15_shift0_q};
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_15_cnn1360_mult_x_sums_align_1_q[40]}}, i_add_ptr73_15_cnn1360_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_q = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15198)@767
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2(ADD,10536)@767 + 1
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15203)@767
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_0_1_q[69:69];

    // redist180_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18097)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist180_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist181_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18098)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist181_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2(ADD,10537)@768 + 1
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist181_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist181_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist180_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist180_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist652_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18569)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist652_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10538)@769
    assign i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p2_of_2_q, redist652_i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_15_cnn1360_mult_extender_x(BITJOIN,2127)@769
    assign i_add_ptr73_15_cnn1360_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_15_cnn1360_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_15_cnn1360_trunc_sel_x(BITSELECT,2129)@769
    assign i_add_ptr73_15_cnn1360_trunc_sel_x_b = i_add_ptr73_15_cnn1360_mult_extender_x_q[63:0];

    // redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2(DELAY,18713)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_delay_0 <= i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q;
            redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_q <= redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_delay_0;
        end
    end

    // i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select(BITSELECT,17898)@765
    assign i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_b = redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_q[63:54];
    assign i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_c = redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_q[53:36];
    assign i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_d = redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_q[35:18];
    assign i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_e = redist796_i_llvm_fpga_fanout_i64_mul69_add4_fanout_adaptor_cnn742_q_2_q[17:0];

    // i_add_ptr70_10_cnn1163_mult_x_bjA2(BITJOIN,3768)@765
    assign i_add_ptr70_10_cnn1163_mult_x_bjA2_q = {GND_q, i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr70_15_cnn1358_mult_x_im0_shift0(BITSHIFT,8224)@765
    assign i_add_ptr70_15_cnn1358_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_15_cnn1358_mult_x_im0_shift0_q = i_add_ptr70_15_cnn1358_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_align_5(BITSHIFT,3941)@765
    assign i_add_ptr70_15_cnn1358_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_15_cnn1358_mult_x_im0_shift0_q[12]}}, i_add_ptr70_15_cnn1358_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_15_cnn1358_mult_x_sums_align_5_q = i_add_ptr70_15_cnn1358_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_10_cnn1163_mult_x_bjA7(BITJOIN,3773)@765
    assign i_add_ptr70_10_cnn1163_mult_x_bjA7_q = {GND_q, i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr70_15_cnn1358_mult_x_im5_shift0(BITSHIFT,8225)@765
    assign i_add_ptr70_15_cnn1358_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_15_cnn1358_mult_x_im5_shift0_q = i_add_ptr70_15_cnn1358_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_align_3(BITSHIFT,3939)@765
    assign i_add_ptr70_15_cnn1358_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_15_cnn1358_mult_x_im5_shift0_q[20]}}, i_add_ptr70_15_cnn1358_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_15_cnn1358_mult_x_sums_align_3_q = i_add_ptr70_15_cnn1358_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1(ADD,3944)@765 + 1
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_15_cnn1358_mult_x_sums_align_3_q[58]}}, i_add_ptr70_15_cnn1358_mult_x_sums_align_3_q};
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_15_cnn1358_mult_x_sums_align_5_q[68]}}, i_add_ptr70_15_cnn1358_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_q = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12866)@766
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_10_cnn1163_mult_x_bjA12(BITJOIN,3778)@765
    assign i_add_ptr70_10_cnn1163_mult_x_bjA12_q = {GND_q, i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr70_15_cnn1358_mult_x_im10_shift0(BITSHIFT,8226)@765
    assign i_add_ptr70_15_cnn1358_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_15_cnn1358_mult_x_im10_shift0_q = i_add_ptr70_15_cnn1358_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_align_1(BITSHIFT,3937)@765
    assign i_add_ptr70_15_cnn1358_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_15_cnn1358_mult_x_im10_shift0_q[20]}}, i_add_ptr70_15_cnn1358_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_15_cnn1358_mult_x_sums_align_1_q = i_add_ptr70_15_cnn1358_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_10_cnn1163_mult_x_bjA17(BITJOIN,3783)@765
    assign i_add_ptr70_10_cnn1163_mult_x_bjA17_q = {GND_q, i_add_ptr70_10_cnn1163_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr70_15_cnn1358_mult_x_im15_shift0(BITSHIFT,8227)@765
    assign i_add_ptr70_15_cnn1358_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_15_cnn1358_mult_x_im15_shift0_q = i_add_ptr70_15_cnn1358_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0(ADD,3943)@765 + 1
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_15_cnn1358_mult_x_im15_shift0_q[20]}}, i_add_ptr70_15_cnn1358_mult_x_im15_shift0_q};
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_15_cnn1358_mult_x_sums_align_1_q[40]}}, i_add_ptr70_15_cnn1358_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_q = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12894)@766
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2(ADD,9832)@766 + 1
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12899)@766
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_0_1_q[69:69];

    // redist308_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18225)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist308_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist309_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18226)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist309_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2(ADD,9833)@767 + 1
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist309_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist309_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist308_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist308_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist716_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18633)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist716_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9834)@768
    assign i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p2_of_2_q, redist716_i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_15_cnn1358_mult_extender_x(BITJOIN,1487)@768
    assign i_add_ptr70_15_cnn1358_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_15_cnn1358_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_15_cnn1358_trunc_sel_x(BITSELECT,1489)@768
    assign i_add_ptr70_15_cnn1358_trunc_sel_x_b = i_add_ptr70_15_cnn1358_mult_extender_x_q[63:0];

    // i_add_ptr70_15_cnn1358_add_x(ADD,1481)@768
    assign i_add_ptr70_15_cnn1358_add_x_a = {1'b0, i_add_ptr66_15_cnn1355_vt_join_q};
    assign i_add_ptr70_15_cnn1358_add_x_b = {1'b0, i_add_ptr70_15_cnn1358_trunc_sel_x_b};
    assign i_add_ptr70_15_cnn1358_add_x_o = $unsigned(i_add_ptr70_15_cnn1358_add_x_a) + $unsigned(i_add_ptr70_15_cnn1358_add_x_b);
    assign i_add_ptr70_15_cnn1358_add_x_q = i_add_ptr70_15_cnn1358_add_x_o[64:0];

    // i_add_ptr70_15_cnn1358_dupName_0_trunc_sel_x(BITSELECT,1490)@768
    assign i_add_ptr70_15_cnn1358_dupName_0_trunc_sel_x_b = i_add_ptr70_15_cnn1358_add_x_q[63:0];

    // i_add_ptr70_15_cnn1357_vt_select_63(BITSELECT,117)@768
    assign i_add_ptr70_15_cnn1357_vt_select_63_b = i_add_ptr70_15_cnn1358_dupName_0_trunc_sel_x_b[63:2];

    // redist857_i_add_ptr70_15_cnn1357_vt_select_63_b_1(DELAY,18774)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist857_i_add_ptr70_15_cnn1357_vt_select_63_b_1_q <= i_add_ptr70_15_cnn1357_vt_select_63_b;
        end
    end

    // i_add_ptr70_15_cnn1357_vt_join(BITJOIN,116)@769
    assign i_add_ptr70_15_cnn1357_vt_join_q = {redist857_i_add_ptr70_15_cnn1357_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_15_cnn1360_add_x(ADD,2121)@769
    assign i_add_ptr73_15_cnn1360_add_x_a = {1'b0, i_add_ptr70_15_cnn1357_vt_join_q};
    assign i_add_ptr73_15_cnn1360_add_x_b = {1'b0, i_add_ptr73_15_cnn1360_trunc_sel_x_b};
    assign i_add_ptr73_15_cnn1360_add_x_o = $unsigned(i_add_ptr73_15_cnn1360_add_x_a) + $unsigned(i_add_ptr73_15_cnn1360_add_x_b);
    assign i_add_ptr73_15_cnn1360_add_x_q = i_add_ptr73_15_cnn1360_add_x_o[64:0];

    // i_add_ptr73_15_cnn1360_dupName_0_trunc_sel_x(BITSELECT,2130)@769
    assign i_add_ptr73_15_cnn1360_dupName_0_trunc_sel_x_b = i_add_ptr73_15_cnn1360_add_x_q[63:0];

    // i_add_ptr73_15_cnn1359_vt_select_63(BITSELECT,309)@769
    assign i_add_ptr73_15_cnn1359_vt_select_63_b = i_add_ptr73_15_cnn1360_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_15_cnn1359_vt_join(BITJOIN,308)@769
    assign i_add_ptr73_15_cnn1359_vt_join_q = {i_add_ptr73_15_cnn1359_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_select_63(BITSELECT,958)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_select_63_b = i_add_ptr73_15_cnn1359_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_join(BITJOIN,957)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn168_cnn1347(BLACKBOX,632)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_168_cnn1348 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn168_cnn1347 (
        .in_intel_reserved_ffwd_87_0(in_intel_reserved_ffwd_87_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_87_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn168_cnn1347_out_dest_data_out_87_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0(BITSHIFT,8640)@766
    assign i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0_q = i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5(BITSHIFT,7061)@766
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_14_cnn1345_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5_q = i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0(BITSHIFT,8641)@766
    assign i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0_q = i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3(BITSHIFT,7059)@766
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_14_cnn1345_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3_q = i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1(ADD,7064)@766 + 1
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_14_cnn1345_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_14_cnn1345_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16610)@767
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0(BITSHIFT,8642)@766
    assign i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0_q = i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1(BITSHIFT,7057)@766
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_14_cnn1345_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1_q = i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0(BITSHIFT,8643)@766
    assign i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0_q = i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0(ADD,7063)@766 + 1
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_14_cnn1345_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_14_cnn1345_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16638)@767
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2(ADD,10976)@767 + 1
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16643)@767
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_0_1_q[69:69];

    // redist100_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18017)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist100_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist101_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18018)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist101_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2(ADD,10977)@768 + 1
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist101_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist101_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist100_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist100_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist612_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18529)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist612_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10978)@769
    assign i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p2_of_2_q, redist612_i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_14_cnn1345_mult_extender_x(BITJOIN,2527)@769
    assign i_add_ptr73_371_14_cnn1345_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_14_cnn1345_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_14_cnn1345_trunc_sel_x(BITSELECT,2529)@769
    assign i_add_ptr73_371_14_cnn1345_trunc_sel_x_b = i_add_ptr73_371_14_cnn1345_mult_extender_x_q[63:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0(BITSHIFT,8384)@765
    assign i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0_q = i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5(BITSHIFT,5141)@765
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_14_cnn1343_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5_q = i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0(BITSHIFT,8385)@765
    assign i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0_q = i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3(BITSHIFT,5139)@765
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_14_cnn1343_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3_q = i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1(ADD,5144)@765 + 1
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_14_cnn1343_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_14_cnn1343_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14306)@766
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0(BITSHIFT,8386)@765
    assign i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0_q = i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1(BITSHIFT,5137)@765
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_14_cnn1343_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1_q = i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0(BITSHIFT,8387)@765
    assign i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0_q = i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0(ADD,5143)@765 + 1
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_14_cnn1343_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_14_cnn1343_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14334)@766
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2(ADD,10272)@766 + 1
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14339)@766
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_0_1_q[69:69];

    // redist228_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18145)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist228_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist229_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18146)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist229_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2(ADD,10273)@767 + 1
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist229_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist229_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist228_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist228_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist676_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18593)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist676_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10274)@768
    assign i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p2_of_2_q, redist676_i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_14_cnn1343_mult_extender_x(BITJOIN,1887)@768
    assign i_add_ptr70_3_14_cnn1343_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_14_cnn1343_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_14_cnn1343_trunc_sel_x(BITSELECT,1889)@768
    assign i_add_ptr70_3_14_cnn1343_trunc_sel_x_b = i_add_ptr70_3_14_cnn1343_mult_extender_x_q[63:0];

    // i_inc79_13_cnn1311_vt_const_3(CONSTANT,504)
    assign i_inc79_13_cnn1311_vt_const_3_q = 3'b111;

    // c_i64_14(CONSTANT,35)
    assign c_i64_14_q = 64'b0000000000000000000000000000000000000000000000000000000000001110;

    // i_inc79_13_cnn1311(LOGICAL,503)@754
    assign i_inc79_13_cnn1311_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_14_q;

    // i_inc79_13_cnn1311_vt_select_0_merged_bit_select(BITSELECT,17875)@754
    assign i_inc79_13_cnn1311_vt_select_0_merged_bit_select_b = i_inc79_13_cnn1311_q[0:0];
    assign i_inc79_13_cnn1311_vt_select_0_merged_bit_select_c = i_inc79_13_cnn1311_q[63:4];

    // i_inc79_13_cnn1311_vt_join(BITJOIN,505)@754
    assign i_inc79_13_cnn1311_vt_join_q = {i_inc79_13_cnn1311_vt_select_0_merged_bit_select_c, i_inc79_13_cnn1311_vt_const_3_q, i_inc79_13_cnn1311_vt_select_0_merged_bit_select_b};

    // i_mul65_14_cnn1312_bs1_merged_bit_select(BITSELECT,17876)@754
    assign i_mul65_14_cnn1312_bs1_merged_bit_select_b = i_inc79_13_cnn1311_vt_join_q[63:54];
    assign i_mul65_14_cnn1312_bs1_merged_bit_select_c = i_inc79_13_cnn1311_vt_join_q[53:36];
    assign i_mul65_14_cnn1312_bs1_merged_bit_select_d = i_inc79_13_cnn1311_vt_join_q[35:18];
    assign i_mul65_14_cnn1312_bs1_merged_bit_select_e = i_inc79_13_cnn1311_vt_join_q[17:0];

    // i_mul65_14_cnn1312_bjA2(BITJOIN,2898)@754
    assign i_mul65_14_cnn1312_bjA2_q = {GND_q, i_mul65_14_cnn1312_bs1_merged_bit_select_b};

    // i_mul65_14_cnn1312_im0_cma(CHAINMULTADD,17821)@754 + 5
    // out q@760
    assign i_mul65_14_cnn1312_im0_cma_reset = ~ (resetn);
    assign i_mul65_14_cnn1312_im0_cma_ena0 = 1'b1;
    assign i_mul65_14_cnn1312_im0_cma_ena1 = i_mul65_14_cnn1312_im0_cma_ena0;
    assign i_mul65_14_cnn1312_im0_cma_ena2 = i_mul65_14_cnn1312_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_im0_cma_ah[0] <= i_mul65_14_cnn1312_bjA2_q;
        end
    end

    assign i_mul65_14_cnn1312_im0_cma_a0 = i_mul65_14_cnn1312_im0_cma_ah[0];
    assign i_mul65_14_cnn1312_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_14_cnn1312_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_14_cnn1312_im0_cma_ena2, i_mul65_14_cnn1312_im0_cma_ena1, i_mul65_14_cnn1312_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_14_cnn1312_im0_cma_a0),
        .coefsela(i_mul65_14_cnn1312_im0_cma_c0),
        .resulta(i_mul65_14_cnn1312_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_14_cnn1312_im0_cma_delay ( .xin(i_mul65_14_cnn1312_im0_cma_s0), .xout(i_mul65_14_cnn1312_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_14_cnn1312_im0_cma_q = i_mul65_14_cnn1312_im0_cma_qq[21:0];

    // redist47_i_mul65_14_cnn1312_im0_cma_q_1(DELAY,17964)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist47_i_mul65_14_cnn1312_im0_cma_q_1_q <= i_mul65_14_cnn1312_im0_cma_q;
        end
    end

    // i_mul65_14_cnn1312_sums_align_5(BITSHIFT,2921)@761
    assign i_mul65_14_cnn1312_sums_align_5_qint = { redist47_i_mul65_14_cnn1312_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_14_cnn1312_sums_align_5_q = i_mul65_14_cnn1312_sums_align_5_qint[74:0];

    // i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11415)@761
    assign i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_14_cnn1312_sums_align_5_q[69:0];

    // i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11402)@761
    assign i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_14_cnn1312_sums_align_3_q[64:64];

    // i_mul65_14_cnn1312_bjA7(BITJOIN,2903)@754
    assign i_mul65_14_cnn1312_bjA7_q = {GND_q, i_mul65_14_cnn1312_bs1_merged_bit_select_c};

    // i_mul65_14_cnn1312_im5_cma(CHAINMULTADD,17822)@754 + 5
    // out q@760
    assign i_mul65_14_cnn1312_im5_cma_reset = ~ (resetn);
    assign i_mul65_14_cnn1312_im5_cma_ena0 = 1'b1;
    assign i_mul65_14_cnn1312_im5_cma_ena1 = i_mul65_14_cnn1312_im5_cma_ena0;
    assign i_mul65_14_cnn1312_im5_cma_ena2 = i_mul65_14_cnn1312_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_im5_cma_ah[0] <= i_mul65_14_cnn1312_bjA7_q;
        end
    end

    assign i_mul65_14_cnn1312_im5_cma_a0 = i_mul65_14_cnn1312_im5_cma_ah[0];
    assign i_mul65_14_cnn1312_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_14_cnn1312_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_14_cnn1312_im5_cma_ena2, i_mul65_14_cnn1312_im5_cma_ena1, i_mul65_14_cnn1312_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_14_cnn1312_im5_cma_a0),
        .coefsela(i_mul65_14_cnn1312_im5_cma_c0),
        .resulta(i_mul65_14_cnn1312_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_14_cnn1312_im5_cma_delay ( .xin(i_mul65_14_cnn1312_im5_cma_s0), .xout(i_mul65_14_cnn1312_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_14_cnn1312_im5_cma_q = i_mul65_14_cnn1312_im5_cma_qq[29:0];

    // redist46_i_mul65_14_cnn1312_im5_cma_q_1(DELAY,17963)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist46_i_mul65_14_cnn1312_im5_cma_q_1_q <= i_mul65_14_cnn1312_im5_cma_q;
        end
    end

    // i_mul65_14_cnn1312_sums_align_3(BITSHIFT,2919)@761
    assign i_mul65_14_cnn1312_sums_align_3_qint = { redist46_i_mul65_14_cnn1312_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_14_cnn1312_sums_align_3_q = i_mul65_14_cnn1312_sums_align_3_qint[64:0];

    // i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11407)@761
    assign i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_align_3_q};

    // i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2(ADD,9326)@761 + 1
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_q = i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11421)@762
    assign i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_14_cnn1312_sums_result_add_0_0_q[47:47];

    // i_mul65_14_cnn1312_bjA12(BITJOIN,2908)@754
    assign i_mul65_14_cnn1312_bjA12_q = {GND_q, i_mul65_14_cnn1312_bs1_merged_bit_select_d};

    // i_mul65_14_cnn1312_im10_cma(CHAINMULTADD,17823)@754 + 5
    // out q@760
    assign i_mul65_14_cnn1312_im10_cma_reset = ~ (resetn);
    assign i_mul65_14_cnn1312_im10_cma_ena0 = 1'b1;
    assign i_mul65_14_cnn1312_im10_cma_ena1 = i_mul65_14_cnn1312_im10_cma_ena0;
    assign i_mul65_14_cnn1312_im10_cma_ena2 = i_mul65_14_cnn1312_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_im10_cma_ah[0] <= i_mul65_14_cnn1312_bjA12_q;
        end
    end

    assign i_mul65_14_cnn1312_im10_cma_a0 = i_mul65_14_cnn1312_im10_cma_ah[0];
    assign i_mul65_14_cnn1312_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_14_cnn1312_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_14_cnn1312_im10_cma_ena2, i_mul65_14_cnn1312_im10_cma_ena1, i_mul65_14_cnn1312_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_14_cnn1312_im10_cma_a0),
        .coefsela(i_mul65_14_cnn1312_im10_cma_c0),
        .resulta(i_mul65_14_cnn1312_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_14_cnn1312_im10_cma_delay ( .xin(i_mul65_14_cnn1312_im10_cma_s0), .xout(i_mul65_14_cnn1312_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_14_cnn1312_im10_cma_q = i_mul65_14_cnn1312_im10_cma_qq[29:0];

    // redist45_i_mul65_14_cnn1312_im10_cma_q_1(DELAY,17962)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist45_i_mul65_14_cnn1312_im10_cma_q_1_q <= i_mul65_14_cnn1312_im10_cma_q;
        end
    end

    // i_mul65_14_cnn1312_sums_align_1(BITSHIFT,2917)@761
    assign i_mul65_14_cnn1312_sums_align_1_qint = { redist45_i_mul65_14_cnn1312_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_14_cnn1312_sums_align_1_q = i_mul65_14_cnn1312_sums_align_1_qint[46:0];

    // i_mul65_14_cnn1312_bjA17(BITJOIN,2913)@754
    assign i_mul65_14_cnn1312_bjA17_q = {GND_q, i_mul65_14_cnn1312_bs1_merged_bit_select_e};

    // i_mul65_14_cnn1312_im15_cma(CHAINMULTADD,17824)@754 + 5
    // out q@760
    assign i_mul65_14_cnn1312_im15_cma_reset = ~ (resetn);
    assign i_mul65_14_cnn1312_im15_cma_ena0 = 1'b1;
    assign i_mul65_14_cnn1312_im15_cma_ena1 = i_mul65_14_cnn1312_im15_cma_ena0;
    assign i_mul65_14_cnn1312_im15_cma_ena2 = i_mul65_14_cnn1312_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_im15_cma_ah[0] <= i_mul65_14_cnn1312_bjA17_q;
        end
    end

    assign i_mul65_14_cnn1312_im15_cma_a0 = i_mul65_14_cnn1312_im15_cma_ah[0];
    assign i_mul65_14_cnn1312_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_14_cnn1312_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_14_cnn1312_im15_cma_ena2, i_mul65_14_cnn1312_im15_cma_ena1, i_mul65_14_cnn1312_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_14_cnn1312_im15_cma_a0),
        .coefsela(i_mul65_14_cnn1312_im15_cma_c0),
        .resulta(i_mul65_14_cnn1312_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_14_cnn1312_im15_cma_delay ( .xin(i_mul65_14_cnn1312_im15_cma_s0), .xout(i_mul65_14_cnn1312_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_14_cnn1312_im15_cma_q = i_mul65_14_cnn1312_im15_cma_qq[29:0];

    // redist44_i_mul65_14_cnn1312_im15_cma_q_1(DELAY,17961)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist44_i_mul65_14_cnn1312_im15_cma_q_1_q <= i_mul65_14_cnn1312_im15_cma_q;
        end
    end

    // i_mul65_14_cnn1312_sums_result_add_0_0(ADD,2923)@761 + 1
    assign i_mul65_14_cnn1312_sums_result_add_0_0_a = {{18{redist44_i_mul65_14_cnn1312_im15_cma_q_1_q[29]}}, redist44_i_mul65_14_cnn1312_im15_cma_q_1_q};
    assign i_mul65_14_cnn1312_sums_result_add_0_0_b = {{1{i_mul65_14_cnn1312_sums_align_1_q[46]}}, i_mul65_14_cnn1312_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_sums_result_add_0_0_o <= $signed(i_mul65_14_cnn1312_sums_result_add_0_0_a) + $signed(i_mul65_14_cnn1312_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_14_cnn1312_sums_result_add_0_0_q = i_mul65_14_cnn1312_sums_result_add_0_0_o[47:0];

    // i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11443)@762
    assign i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_14_cnn1312_sums_result_add_0_0_q};

    // i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2(ADD,9337)@762 + 1
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_q = i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11455)@763
    assign i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11418)@761
    assign i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_14_cnn1312_sums_align_5_q[74:74];

    // redist526_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18443)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist526_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11417)@761
    assign i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_14_cnn1312_sums_align_5_q[74:70];

    // redist527_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18444)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist527_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11419)@762
    assign i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist526_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist527_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18445)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11414)@762
    assign i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist528_i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2(ADD,9327)@762 + 1
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_cin = i_mul65_14_cnn1312_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_14_cnn1312_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_q = i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11456)@763
    assign i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_14_cnn1312_sums_result_add_0_1_p2_of_2_q};

    // redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18436)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11451)@763
    assign i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist519_i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2(ADD,9338)@763 + 1
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_cin = i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_14_cnn1312_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_q = i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist750_i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_q_1(DELAY,18667)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist750_i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_14_cnn1312_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9339)@764
    assign i_mul65_14_cnn1312_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_14_cnn1312_sums_result_add_1_0_p2_of_2_q, redist750_i_mul65_14_cnn1312_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_14_cnn1312_extender_x(BITJOIN,2723)@764
    assign i_mul65_14_cnn1312_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_14_cnn1312_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_14_cnn1312_sel_x(BITSELECT,1051)@764
    assign bgTrunc_i_mul65_14_cnn1312_sel_x_b = i_mul65_14_cnn1312_extender_x_q[63:0];

    // i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select(BITSELECT,17911)@764
    assign i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_14_cnn1312_sel_x_b[63:54];
    assign i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_14_cnn1312_sel_x_b[53:36];
    assign i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_14_cnn1312_sel_x_b[35:18];
    assign i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_14_cnn1312_sel_x_b[17:0];

    // i_add_ptr66_14_cnn1317_mult_x_bjA2(BITJOIN,3408)@764
    assign i_add_ptr66_14_cnn1317_mult_x_bjA2_q = {GND_q, i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_14_cnn1317_mult_x_im0_shift0(BITSHIFT,8156)@764
    assign i_add_ptr66_14_cnn1317_mult_x_im0_shift0_qint = { i_add_ptr66_14_cnn1317_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_14_cnn1317_mult_x_im0_shift0_q = i_add_ptr66_14_cnn1317_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_align_5(BITSHIFT,3431)@764
    assign i_add_ptr66_14_cnn1317_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_14_cnn1317_mult_x_im0_shift0_q[12]}}, i_add_ptr66_14_cnn1317_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_14_cnn1317_mult_x_sums_align_5_q = i_add_ptr66_14_cnn1317_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_14_cnn1317_mult_x_bjA7(BITJOIN,3413)@764
    assign i_add_ptr66_14_cnn1317_mult_x_bjA7_q = {GND_q, i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_14_cnn1317_mult_x_im5_shift0(BITSHIFT,8157)@764
    assign i_add_ptr66_14_cnn1317_mult_x_im5_shift0_qint = { i_add_ptr66_14_cnn1317_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_14_cnn1317_mult_x_im5_shift0_q = i_add_ptr66_14_cnn1317_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_align_3(BITSHIFT,3429)@764
    assign i_add_ptr66_14_cnn1317_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_14_cnn1317_mult_x_im5_shift0_q[20]}}, i_add_ptr66_14_cnn1317_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_14_cnn1317_mult_x_sums_align_3_q = i_add_ptr66_14_cnn1317_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1(ADD,3434)@764 + 1
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_14_cnn1317_mult_x_sums_align_3_q[58]}}, i_add_ptr66_14_cnn1317_mult_x_sums_align_3_q};
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_14_cnn1317_mult_x_sums_align_5_q[68]}}, i_add_ptr66_14_cnn1317_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_q = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12254)@765
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_14_cnn1317_mult_x_bjA12(BITJOIN,3418)@764
    assign i_add_ptr66_14_cnn1317_mult_x_bjA12_q = {GND_q, i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_14_cnn1317_mult_x_im10_shift0(BITSHIFT,8158)@764
    assign i_add_ptr66_14_cnn1317_mult_x_im10_shift0_qint = { i_add_ptr66_14_cnn1317_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_14_cnn1317_mult_x_im10_shift0_q = i_add_ptr66_14_cnn1317_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_align_1(BITSHIFT,3427)@764
    assign i_add_ptr66_14_cnn1317_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_14_cnn1317_mult_x_im10_shift0_q[20]}}, i_add_ptr66_14_cnn1317_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_14_cnn1317_mult_x_sums_align_1_q = i_add_ptr66_14_cnn1317_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_14_cnn1317_mult_x_bjA17(BITJOIN,3423)@764
    assign i_add_ptr66_14_cnn1317_mult_x_bjA17_q = {GND_q, i_add_ptr66_14_cnn1317_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_14_cnn1317_mult_x_im15_shift0(BITSHIFT,8159)@764
    assign i_add_ptr66_14_cnn1317_mult_x_im15_shift0_qint = { i_add_ptr66_14_cnn1317_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_14_cnn1317_mult_x_im15_shift0_q = i_add_ptr66_14_cnn1317_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0(ADD,3433)@764 + 1
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_14_cnn1317_mult_x_im15_shift0_q[20]}}, i_add_ptr66_14_cnn1317_mult_x_im15_shift0_q};
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_14_cnn1317_mult_x_sums_align_1_q[40]}}, i_add_ptr66_14_cnn1317_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_q = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12282)@765
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2(ADD,9645)@765 + 1
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12287)@765
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_0_1_q[69:69];

    // redist342_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18259)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist342_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist343_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18260)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist343_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2(ADD,9646)@766 + 1
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist343_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist343_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist342_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist342_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist733_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18650)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist733_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9647)@767
    assign i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p2_of_2_q, redist733_i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_14_cnn1317_mult_extender_x(BITJOIN,1317)@767
    assign i_add_ptr66_14_cnn1317_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_14_cnn1317_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_14_cnn1317_trunc_sel_x(BITSELECT,1319)@767
    assign i_add_ptr66_14_cnn1317_trunc_sel_x_b = i_add_ptr66_14_cnn1317_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313(BLACKBOX,698)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_1314 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_select_63(BITSELECT,701)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_join(BITJOIN,700)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_14_cnn1317_add_x(ADD,1311)@767
    assign i_add_ptr66_14_cnn1317_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer18_cnn1313_vt_join_q};
    assign i_add_ptr66_14_cnn1317_add_x_b = {1'b0, i_add_ptr66_14_cnn1317_trunc_sel_x_b};
    assign i_add_ptr66_14_cnn1317_add_x_o = $unsigned(i_add_ptr66_14_cnn1317_add_x_a) + $unsigned(i_add_ptr66_14_cnn1317_add_x_b);
    assign i_add_ptr66_14_cnn1317_add_x_q = i_add_ptr66_14_cnn1317_add_x_o[64:0];

    // i_add_ptr66_14_cnn1317_dupName_0_trunc_sel_x(BITSELECT,1320)@767
    assign i_add_ptr66_14_cnn1317_dupName_0_trunc_sel_x_b = i_add_ptr66_14_cnn1317_add_x_q[63:0];

    // i_add_ptr66_14_cnn1316_vt_select_63(BITSELECT,66)@767
    assign i_add_ptr66_14_cnn1316_vt_select_63_b = i_add_ptr66_14_cnn1317_dupName_0_trunc_sel_x_b[63:2];

    // redist874_i_add_ptr66_14_cnn1316_vt_select_63_b_1(DELAY,18791)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist874_i_add_ptr66_14_cnn1316_vt_select_63_b_1_q <= i_add_ptr66_14_cnn1316_vt_select_63_b;
        end
    end

    // i_add_ptr66_14_cnn1316_vt_join(BITJOIN,65)@768
    assign i_add_ptr66_14_cnn1316_vt_join_q = {redist874_i_add_ptr66_14_cnn1316_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_14_cnn1343_add_x(ADD,1881)@768
    assign i_add_ptr70_3_14_cnn1343_add_x_a = {1'b0, i_add_ptr66_14_cnn1316_vt_join_q};
    assign i_add_ptr70_3_14_cnn1343_add_x_b = {1'b0, i_add_ptr70_3_14_cnn1343_trunc_sel_x_b};
    assign i_add_ptr70_3_14_cnn1343_add_x_o = $unsigned(i_add_ptr70_3_14_cnn1343_add_x_a) + $unsigned(i_add_ptr70_3_14_cnn1343_add_x_b);
    assign i_add_ptr70_3_14_cnn1343_add_x_q = i_add_ptr70_3_14_cnn1343_add_x_o[64:0];

    // i_add_ptr70_3_14_cnn1343_dupName_0_trunc_sel_x(BITSELECT,1890)@768
    assign i_add_ptr70_3_14_cnn1343_dupName_0_trunc_sel_x_b = i_add_ptr70_3_14_cnn1343_add_x_q[63:0];

    // i_add_ptr70_3_14_cnn1342_vt_select_63(BITSELECT,237)@768
    assign i_add_ptr70_3_14_cnn1342_vt_select_63_b = i_add_ptr70_3_14_cnn1343_dupName_0_trunc_sel_x_b[63:2];

    // redist817_i_add_ptr70_3_14_cnn1342_vt_select_63_b_1(DELAY,18734)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist817_i_add_ptr70_3_14_cnn1342_vt_select_63_b_1_q <= i_add_ptr70_3_14_cnn1342_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_14_cnn1342_vt_join(BITJOIN,236)@769
    assign i_add_ptr70_3_14_cnn1342_vt_join_q = {redist817_i_add_ptr70_3_14_cnn1342_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_14_cnn1345_add_x(ADD,2521)@769
    assign i_add_ptr73_371_14_cnn1345_add_x_a = {1'b0, i_add_ptr70_3_14_cnn1342_vt_join_q};
    assign i_add_ptr73_371_14_cnn1345_add_x_b = {1'b0, i_add_ptr73_371_14_cnn1345_trunc_sel_x_b};
    assign i_add_ptr73_371_14_cnn1345_add_x_o = $unsigned(i_add_ptr73_371_14_cnn1345_add_x_a) + $unsigned(i_add_ptr73_371_14_cnn1345_add_x_b);
    assign i_add_ptr73_371_14_cnn1345_add_x_q = i_add_ptr73_371_14_cnn1345_add_x_o[64:0];

    // i_add_ptr73_371_14_cnn1345_dupName_0_trunc_sel_x(BITSELECT,2530)@769
    assign i_add_ptr73_371_14_cnn1345_dupName_0_trunc_sel_x_b = i_add_ptr73_371_14_cnn1345_add_x_q[63:0];

    // i_add_ptr73_371_14_cnn1344_vt_select_63(BITSELECT,429)@769
    assign i_add_ptr73_371_14_cnn1344_vt_select_63_b = i_add_ptr73_371_14_cnn1345_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_14_cnn1344_vt_join(BITJOIN,428)@769
    assign i_add_ptr73_371_14_cnn1344_vt_join_q = {i_add_ptr73_371_14_cnn1344_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_select_63(BITSELECT,954)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_select_63_b = i_add_ptr73_371_14_cnn1344_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_join(BITJOIN,953)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn167_cnn1339(BLACKBOX,631)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_167_cnn1340 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn167_cnn1339 (
        .in_intel_reserved_ffwd_86_0(in_intel_reserved_ffwd_86_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_86_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn167_cnn1339_out_dest_data_out_86_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0(BITSHIFT,8568)@766
    assign i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0_q = i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5(BITSHIFT,6521)@766
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_14_cnn1337_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5_q = i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0(BITSHIFT,8569)@766
    assign i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0_q = i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3(BITSHIFT,6519)@766
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_14_cnn1337_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3_q = i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1(ADD,6524)@766 + 1
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_14_cnn1337_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_14_cnn1337_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15962)@767
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0(BITSHIFT,8570)@766
    assign i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0_q = i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1(BITSHIFT,6517)@766
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_14_cnn1337_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1_q = i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0(BITSHIFT,8571)@766
    assign i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0_q = i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0(ADD,6523)@766 + 1
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_14_cnn1337_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_14_cnn1337_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15990)@767
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2(ADD,10778)@767 + 1
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15995)@767
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_0_1_q[69:69];

    // redist136_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18053)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist136_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist137_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18054)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist137_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2(ADD,10779)@768 + 1
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist137_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist137_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist136_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist136_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist630_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18547)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist630_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10780)@769
    assign i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p2_of_2_q, redist630_i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_14_cnn1337_mult_extender_x(BITJOIN,2347)@769
    assign i_add_ptr73_270_14_cnn1337_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_14_cnn1337_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_14_cnn1337_trunc_sel_x(BITSELECT,2349)@769
    assign i_add_ptr73_270_14_cnn1337_trunc_sel_x_b = i_add_ptr73_270_14_cnn1337_mult_extender_x_q[63:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0(BITSHIFT,8316)@765
    assign i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0_q = i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5(BITSHIFT,4631)@765
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_14_cnn1335_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5_q = i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0(BITSHIFT,8317)@765
    assign i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0_q = i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3(BITSHIFT,4629)@765
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_14_cnn1335_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3_q = i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1(ADD,4634)@765 + 1
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_14_cnn1335_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_14_cnn1335_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13694)@766
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0(BITSHIFT,8318)@765
    assign i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0_q = i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1(BITSHIFT,4627)@765
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_14_cnn1335_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1_q = i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0(BITSHIFT,8319)@765
    assign i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0_q = i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0(ADD,4633)@765 + 1
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_14_cnn1335_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_14_cnn1335_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13722)@766
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2(ADD,10085)@766 + 1
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13727)@766
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_0_1_q[69:69];

    // redist262_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18179)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist262_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist263_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18180)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist263_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2(ADD,10086)@767 + 1
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist263_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist263_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist262_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist262_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist693_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18610)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist693_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10087)@768
    assign i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p2_of_2_q, redist693_i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_14_cnn1335_mult_extender_x(BITJOIN,1717)@768
    assign i_add_ptr70_2_14_cnn1335_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_14_cnn1335_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_14_cnn1335_trunc_sel_x(BITSELECT,1719)@768
    assign i_add_ptr70_2_14_cnn1335_trunc_sel_x_b = i_add_ptr70_2_14_cnn1335_mult_extender_x_q[63:0];

    // i_add_ptr70_2_14_cnn1335_add_x(ADD,1711)@768
    assign i_add_ptr70_2_14_cnn1335_add_x_a = {1'b0, i_add_ptr66_14_cnn1316_vt_join_q};
    assign i_add_ptr70_2_14_cnn1335_add_x_b = {1'b0, i_add_ptr70_2_14_cnn1335_trunc_sel_x_b};
    assign i_add_ptr70_2_14_cnn1335_add_x_o = $unsigned(i_add_ptr70_2_14_cnn1335_add_x_a) + $unsigned(i_add_ptr70_2_14_cnn1335_add_x_b);
    assign i_add_ptr70_2_14_cnn1335_add_x_q = i_add_ptr70_2_14_cnn1335_add_x_o[64:0];

    // i_add_ptr70_2_14_cnn1335_dupName_0_trunc_sel_x(BITSELECT,1720)@768
    assign i_add_ptr70_2_14_cnn1335_dupName_0_trunc_sel_x_b = i_add_ptr70_2_14_cnn1335_add_x_q[63:0];

    // i_add_ptr70_2_14_cnn1334_vt_select_63(BITSELECT,186)@768
    assign i_add_ptr70_2_14_cnn1334_vt_select_63_b = i_add_ptr70_2_14_cnn1335_dupName_0_trunc_sel_x_b[63:2];

    // redist834_i_add_ptr70_2_14_cnn1334_vt_select_63_b_1(DELAY,18751)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist834_i_add_ptr70_2_14_cnn1334_vt_select_63_b_1_q <= i_add_ptr70_2_14_cnn1334_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_14_cnn1334_vt_join(BITJOIN,185)@769
    assign i_add_ptr70_2_14_cnn1334_vt_join_q = {redist834_i_add_ptr70_2_14_cnn1334_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_14_cnn1337_add_x(ADD,2341)@769
    assign i_add_ptr73_270_14_cnn1337_add_x_a = {1'b0, i_add_ptr70_2_14_cnn1334_vt_join_q};
    assign i_add_ptr73_270_14_cnn1337_add_x_b = {1'b0, i_add_ptr73_270_14_cnn1337_trunc_sel_x_b};
    assign i_add_ptr73_270_14_cnn1337_add_x_o = $unsigned(i_add_ptr73_270_14_cnn1337_add_x_a) + $unsigned(i_add_ptr73_270_14_cnn1337_add_x_b);
    assign i_add_ptr73_270_14_cnn1337_add_x_q = i_add_ptr73_270_14_cnn1337_add_x_o[64:0];

    // i_add_ptr73_270_14_cnn1337_dupName_0_trunc_sel_x(BITSELECT,2350)@769
    assign i_add_ptr73_270_14_cnn1337_dupName_0_trunc_sel_x_b = i_add_ptr73_270_14_cnn1337_add_x_q[63:0];

    // i_add_ptr73_270_14_cnn1336_vt_select_63(BITSELECT,375)@769
    assign i_add_ptr73_270_14_cnn1336_vt_select_63_b = i_add_ptr73_270_14_cnn1337_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_14_cnn1336_vt_join(BITJOIN,374)@769
    assign i_add_ptr73_270_14_cnn1336_vt_join_q = {i_add_ptr73_270_14_cnn1336_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_select_63(BITSELECT,946)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_select_63_b = i_add_ptr73_270_14_cnn1336_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_join(BITJOIN,945)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn166_cnn1331(BLACKBOX,630)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_166_cnn1332 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn166_cnn1331 (
        .in_intel_reserved_ffwd_85_0(in_intel_reserved_ffwd_85_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_85_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn166_cnn1331_out_dest_data_out_85_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0(BITSHIFT,8500)@766
    assign i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0_q = i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5(BITSHIFT,6011)@766
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_14_cnn1329_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5_q = i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0(BITSHIFT,8501)@766
    assign i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0_q = i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3(BITSHIFT,6009)@766
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_14_cnn1329_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3_q = i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1(ADD,6014)@766 + 1
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_14_cnn1329_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_14_cnn1329_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15350)@767
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0(BITSHIFT,8502)@766
    assign i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0_q = i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1(BITSHIFT,6007)@766
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_14_cnn1329_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1_q = i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0(BITSHIFT,8503)@766
    assign i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0_q = i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0(ADD,6013)@766 + 1
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_14_cnn1329_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_14_cnn1329_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15378)@767
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2(ADD,10591)@767 + 1
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15383)@767
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_0_1_q[69:69];

    // redist170_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18087)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist170_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist171_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18088)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist171_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2(ADD,10592)@768 + 1
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist171_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist171_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist170_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist170_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist647_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18564)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist647_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10593)@769
    assign i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p2_of_2_q, redist647_i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_14_cnn1329_mult_extender_x(BITJOIN,2177)@769
    assign i_add_ptr73_169_14_cnn1329_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_14_cnn1329_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_14_cnn1329_trunc_sel_x(BITSELECT,2179)@769
    assign i_add_ptr73_169_14_cnn1329_trunc_sel_x_b = i_add_ptr73_169_14_cnn1329_mult_extender_x_q[63:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0(BITSHIFT,8248)@765
    assign i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0_q = i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5(BITSHIFT,4121)@765
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_14_cnn1327_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5_q = i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0(BITSHIFT,8249)@765
    assign i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0_q = i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3(BITSHIFT,4119)@765
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_14_cnn1327_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3_q = i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1(ADD,4124)@765 + 1
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_14_cnn1327_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_14_cnn1327_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13082)@766
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0(BITSHIFT,8250)@765
    assign i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0_q = i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1(BITSHIFT,4117)@765
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_14_cnn1327_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1_q = i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0(BITSHIFT,8251)@765
    assign i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0_q = i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0(ADD,4123)@765 + 1
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_14_cnn1327_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_14_cnn1327_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13110)@766
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2(ADD,9898)@766 + 1
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13115)@766
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_0_1_q[69:69];

    // redist296_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18213)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist296_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist297_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18214)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist297_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2(ADD,9899)@767 + 1
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist297_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist297_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist296_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist296_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist710_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18627)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist710_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9900)@768
    assign i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p2_of_2_q, redist710_i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_14_cnn1327_mult_extender_x(BITJOIN,1547)@768
    assign i_add_ptr70_1_14_cnn1327_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_14_cnn1327_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_14_cnn1327_trunc_sel_x(BITSELECT,1549)@768
    assign i_add_ptr70_1_14_cnn1327_trunc_sel_x_b = i_add_ptr70_1_14_cnn1327_mult_extender_x_q[63:0];

    // i_add_ptr70_1_14_cnn1327_add_x(ADD,1541)@768
    assign i_add_ptr70_1_14_cnn1327_add_x_a = {1'b0, i_add_ptr66_14_cnn1316_vt_join_q};
    assign i_add_ptr70_1_14_cnn1327_add_x_b = {1'b0, i_add_ptr70_1_14_cnn1327_trunc_sel_x_b};
    assign i_add_ptr70_1_14_cnn1327_add_x_o = $unsigned(i_add_ptr70_1_14_cnn1327_add_x_a) + $unsigned(i_add_ptr70_1_14_cnn1327_add_x_b);
    assign i_add_ptr70_1_14_cnn1327_add_x_q = i_add_ptr70_1_14_cnn1327_add_x_o[64:0];

    // i_add_ptr70_1_14_cnn1327_dupName_0_trunc_sel_x(BITSELECT,1550)@768
    assign i_add_ptr70_1_14_cnn1327_dupName_0_trunc_sel_x_b = i_add_ptr70_1_14_cnn1327_add_x_q[63:0];

    // i_add_ptr70_1_14_cnn1326_vt_select_63(BITSELECT,135)@768
    assign i_add_ptr70_1_14_cnn1326_vt_select_63_b = i_add_ptr70_1_14_cnn1327_dupName_0_trunc_sel_x_b[63:2];

    // redist851_i_add_ptr70_1_14_cnn1326_vt_select_63_b_1(DELAY,18768)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist851_i_add_ptr70_1_14_cnn1326_vt_select_63_b_1_q <= i_add_ptr70_1_14_cnn1326_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_14_cnn1326_vt_join(BITJOIN,134)@769
    assign i_add_ptr70_1_14_cnn1326_vt_join_q = {redist851_i_add_ptr70_1_14_cnn1326_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_14_cnn1329_add_x(ADD,2171)@769
    assign i_add_ptr73_169_14_cnn1329_add_x_a = {1'b0, i_add_ptr70_1_14_cnn1326_vt_join_q};
    assign i_add_ptr73_169_14_cnn1329_add_x_b = {1'b0, i_add_ptr73_169_14_cnn1329_trunc_sel_x_b};
    assign i_add_ptr73_169_14_cnn1329_add_x_o = $unsigned(i_add_ptr73_169_14_cnn1329_add_x_a) + $unsigned(i_add_ptr73_169_14_cnn1329_add_x_b);
    assign i_add_ptr73_169_14_cnn1329_add_x_q = i_add_ptr73_169_14_cnn1329_add_x_o[64:0];

    // i_add_ptr73_169_14_cnn1329_dupName_0_trunc_sel_x(BITSELECT,2180)@769
    assign i_add_ptr73_169_14_cnn1329_dupName_0_trunc_sel_x_b = i_add_ptr73_169_14_cnn1329_add_x_q[63:0];

    // i_add_ptr73_169_14_cnn1328_vt_select_63(BITSELECT,324)@769
    assign i_add_ptr73_169_14_cnn1328_vt_select_63_b = i_add_ptr73_169_14_cnn1329_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_14_cnn1328_vt_join(BITJOIN,323)@769
    assign i_add_ptr73_169_14_cnn1328_vt_join_q = {i_add_ptr73_169_14_cnn1328_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_select_63(BITSELECT,942)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_select_63_b = i_add_ptr73_169_14_cnn1328_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_join(BITJOIN,941)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn165_cnn1323(BLACKBOX,629)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_165_cnn1324 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn165_cnn1323 (
        .in_intel_reserved_ffwd_84_0(in_intel_reserved_ffwd_84_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_84_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn165_cnn1323_out_dest_data_out_84_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_14_cnn1321_mult_x_im0_shift0(BITSHIFT,8476)@766
    assign i_add_ptr73_14_cnn1321_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_14_cnn1321_mult_x_im0_shift0_q = i_add_ptr73_14_cnn1321_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_align_5(BITSHIFT,5831)@766
    assign i_add_ptr73_14_cnn1321_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_14_cnn1321_mult_x_im0_shift0_q[12]}}, i_add_ptr73_14_cnn1321_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_14_cnn1321_mult_x_sums_align_5_q = i_add_ptr73_14_cnn1321_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_14_cnn1321_mult_x_im5_shift0(BITSHIFT,8477)@766
    assign i_add_ptr73_14_cnn1321_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_14_cnn1321_mult_x_im5_shift0_q = i_add_ptr73_14_cnn1321_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_align_3(BITSHIFT,5829)@766
    assign i_add_ptr73_14_cnn1321_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_14_cnn1321_mult_x_im5_shift0_q[20]}}, i_add_ptr73_14_cnn1321_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_14_cnn1321_mult_x_sums_align_3_q = i_add_ptr73_14_cnn1321_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1(ADD,5834)@766 + 1
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_14_cnn1321_mult_x_sums_align_3_q[58]}}, i_add_ptr73_14_cnn1321_mult_x_sums_align_3_q};
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_14_cnn1321_mult_x_sums_align_5_q[68]}}, i_add_ptr73_14_cnn1321_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_q = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15134)@767
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_14_cnn1321_mult_x_im10_shift0(BITSHIFT,8478)@766
    assign i_add_ptr73_14_cnn1321_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_14_cnn1321_mult_x_im10_shift0_q = i_add_ptr73_14_cnn1321_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_align_1(BITSHIFT,5827)@766
    assign i_add_ptr73_14_cnn1321_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_14_cnn1321_mult_x_im10_shift0_q[20]}}, i_add_ptr73_14_cnn1321_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_14_cnn1321_mult_x_sums_align_1_q = i_add_ptr73_14_cnn1321_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_14_cnn1321_mult_x_im15_shift0(BITSHIFT,8479)@766
    assign i_add_ptr73_14_cnn1321_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_14_cnn1321_mult_x_im15_shift0_q = i_add_ptr73_14_cnn1321_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0(ADD,5833)@766 + 1
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_14_cnn1321_mult_x_im15_shift0_q[20]}}, i_add_ptr73_14_cnn1321_mult_x_im15_shift0_q};
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_14_cnn1321_mult_x_sums_align_1_q[40]}}, i_add_ptr73_14_cnn1321_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_q = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15162)@767
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2(ADD,10525)@767 + 1
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15167)@767
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_0_1_q[69:69];

    // redist182_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18099)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist182_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist183_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18100)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist183_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2(ADD,10526)@768 + 1
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist183_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist183_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist182_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist182_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist653_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18570)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist653_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10527)@769
    assign i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p2_of_2_q, redist653_i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_14_cnn1321_mult_extender_x(BITJOIN,2117)@769
    assign i_add_ptr73_14_cnn1321_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_14_cnn1321_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_14_cnn1321_trunc_sel_x(BITSELECT,2119)@769
    assign i_add_ptr73_14_cnn1321_trunc_sel_x_b = i_add_ptr73_14_cnn1321_mult_extender_x_q[63:0];

    // i_add_ptr70_14_cnn1319_mult_x_im0_shift0(BITSHIFT,8220)@765
    assign i_add_ptr70_14_cnn1319_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_14_cnn1319_mult_x_im0_shift0_q = i_add_ptr70_14_cnn1319_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_align_5(BITSHIFT,3911)@765
    assign i_add_ptr70_14_cnn1319_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_14_cnn1319_mult_x_im0_shift0_q[12]}}, i_add_ptr70_14_cnn1319_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_14_cnn1319_mult_x_sums_align_5_q = i_add_ptr70_14_cnn1319_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_14_cnn1319_mult_x_im5_shift0(BITSHIFT,8221)@765
    assign i_add_ptr70_14_cnn1319_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_14_cnn1319_mult_x_im5_shift0_q = i_add_ptr70_14_cnn1319_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_align_3(BITSHIFT,3909)@765
    assign i_add_ptr70_14_cnn1319_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_14_cnn1319_mult_x_im5_shift0_q[20]}}, i_add_ptr70_14_cnn1319_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_14_cnn1319_mult_x_sums_align_3_q = i_add_ptr70_14_cnn1319_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1(ADD,3914)@765 + 1
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_14_cnn1319_mult_x_sums_align_3_q[58]}}, i_add_ptr70_14_cnn1319_mult_x_sums_align_3_q};
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_14_cnn1319_mult_x_sums_align_5_q[68]}}, i_add_ptr70_14_cnn1319_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_q = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12830)@766
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_14_cnn1319_mult_x_im10_shift0(BITSHIFT,8222)@765
    assign i_add_ptr70_14_cnn1319_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_14_cnn1319_mult_x_im10_shift0_q = i_add_ptr70_14_cnn1319_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_align_1(BITSHIFT,3907)@765
    assign i_add_ptr70_14_cnn1319_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_14_cnn1319_mult_x_im10_shift0_q[20]}}, i_add_ptr70_14_cnn1319_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_14_cnn1319_mult_x_sums_align_1_q = i_add_ptr70_14_cnn1319_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_14_cnn1319_mult_x_im15_shift0(BITSHIFT,8223)@765
    assign i_add_ptr70_14_cnn1319_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_14_cnn1319_mult_x_im15_shift0_q = i_add_ptr70_14_cnn1319_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0(ADD,3913)@765 + 1
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_14_cnn1319_mult_x_im15_shift0_q[20]}}, i_add_ptr70_14_cnn1319_mult_x_im15_shift0_q};
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_14_cnn1319_mult_x_sums_align_1_q[40]}}, i_add_ptr70_14_cnn1319_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_q = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12858)@766
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2(ADD,9821)@766 + 1
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12863)@766
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_0_1_q[69:69];

    // redist310_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18227)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist310_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist311_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18228)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist311_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2(ADD,9822)@767 + 1
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist311_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist311_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist310_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist310_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist717_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18634)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist717_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9823)@768
    assign i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p2_of_2_q, redist717_i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_14_cnn1319_mult_extender_x(BITJOIN,1477)@768
    assign i_add_ptr70_14_cnn1319_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_14_cnn1319_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_14_cnn1319_trunc_sel_x(BITSELECT,1479)@768
    assign i_add_ptr70_14_cnn1319_trunc_sel_x_b = i_add_ptr70_14_cnn1319_mult_extender_x_q[63:0];

    // i_add_ptr70_14_cnn1319_add_x(ADD,1471)@768
    assign i_add_ptr70_14_cnn1319_add_x_a = {1'b0, i_add_ptr66_14_cnn1316_vt_join_q};
    assign i_add_ptr70_14_cnn1319_add_x_b = {1'b0, i_add_ptr70_14_cnn1319_trunc_sel_x_b};
    assign i_add_ptr70_14_cnn1319_add_x_o = $unsigned(i_add_ptr70_14_cnn1319_add_x_a) + $unsigned(i_add_ptr70_14_cnn1319_add_x_b);
    assign i_add_ptr70_14_cnn1319_add_x_q = i_add_ptr70_14_cnn1319_add_x_o[64:0];

    // i_add_ptr70_14_cnn1319_dupName_0_trunc_sel_x(BITSELECT,1480)@768
    assign i_add_ptr70_14_cnn1319_dupName_0_trunc_sel_x_b = i_add_ptr70_14_cnn1319_add_x_q[63:0];

    // i_add_ptr70_14_cnn1318_vt_select_63(BITSELECT,114)@768
    assign i_add_ptr70_14_cnn1318_vt_select_63_b = i_add_ptr70_14_cnn1319_dupName_0_trunc_sel_x_b[63:2];

    // redist858_i_add_ptr70_14_cnn1318_vt_select_63_b_1(DELAY,18775)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist858_i_add_ptr70_14_cnn1318_vt_select_63_b_1_q <= i_add_ptr70_14_cnn1318_vt_select_63_b;
        end
    end

    // i_add_ptr70_14_cnn1318_vt_join(BITJOIN,113)@769
    assign i_add_ptr70_14_cnn1318_vt_join_q = {redist858_i_add_ptr70_14_cnn1318_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_14_cnn1321_add_x(ADD,2111)@769
    assign i_add_ptr73_14_cnn1321_add_x_a = {1'b0, i_add_ptr70_14_cnn1318_vt_join_q};
    assign i_add_ptr73_14_cnn1321_add_x_b = {1'b0, i_add_ptr73_14_cnn1321_trunc_sel_x_b};
    assign i_add_ptr73_14_cnn1321_add_x_o = $unsigned(i_add_ptr73_14_cnn1321_add_x_a) + $unsigned(i_add_ptr73_14_cnn1321_add_x_b);
    assign i_add_ptr73_14_cnn1321_add_x_q = i_add_ptr73_14_cnn1321_add_x_o[64:0];

    // i_add_ptr73_14_cnn1321_dupName_0_trunc_sel_x(BITSELECT,2120)@769
    assign i_add_ptr73_14_cnn1321_dupName_0_trunc_sel_x_b = i_add_ptr73_14_cnn1321_add_x_q[63:0];

    // i_add_ptr73_14_cnn1320_vt_select_63(BITSELECT,306)@769
    assign i_add_ptr73_14_cnn1320_vt_select_63_b = i_add_ptr73_14_cnn1321_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_14_cnn1320_vt_join(BITJOIN,305)@769
    assign i_add_ptr73_14_cnn1320_vt_join_q = {i_add_ptr73_14_cnn1320_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_select_63(BITSELECT,938)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_select_63_b = i_add_ptr73_14_cnn1320_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_join(BITJOIN,937)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn164_cnn1308(BLACKBOX,628)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_164_cnn1309 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn164_cnn1308 (
        .in_intel_reserved_ffwd_83_0(in_intel_reserved_ffwd_83_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_83_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn164_cnn1308_out_dest_data_out_83_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0(BITSHIFT,8636)@766
    assign i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0_q = i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5(BITSHIFT,7031)@766
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_13_cnn1306_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5_q = i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0(BITSHIFT,8637)@766
    assign i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0_q = i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3(BITSHIFT,7029)@766
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_13_cnn1306_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3_q = i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1(ADD,7034)@766 + 1
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_13_cnn1306_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_13_cnn1306_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16574)@767
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0(BITSHIFT,8638)@766
    assign i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0_q = i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1(BITSHIFT,7027)@766
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_13_cnn1306_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1_q = i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0(BITSHIFT,8639)@766
    assign i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0_q = i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0(ADD,7033)@766 + 1
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_13_cnn1306_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_13_cnn1306_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16602)@767
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2(ADD,10965)@767 + 1
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16607)@767
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_0_1_q[69:69];

    // redist102_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18019)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist102_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist103_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18020)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist103_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2(ADD,10966)@768 + 1
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist103_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist103_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist102_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist102_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist613_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18530)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist613_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10967)@769
    assign i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p2_of_2_q, redist613_i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_13_cnn1306_mult_extender_x(BITJOIN,2517)@769
    assign i_add_ptr73_371_13_cnn1306_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_13_cnn1306_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_13_cnn1306_trunc_sel_x(BITSELECT,2519)@769
    assign i_add_ptr73_371_13_cnn1306_trunc_sel_x_b = i_add_ptr73_371_13_cnn1306_mult_extender_x_q[63:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0(BITSHIFT,8380)@765
    assign i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0_q = i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5(BITSHIFT,5111)@765
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_13_cnn1304_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5_q = i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0(BITSHIFT,8381)@765
    assign i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0_q = i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3(BITSHIFT,5109)@765
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_13_cnn1304_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3_q = i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1(ADD,5114)@765 + 1
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_13_cnn1304_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_13_cnn1304_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14270)@766
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0(BITSHIFT,8382)@765
    assign i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0_q = i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1(BITSHIFT,5107)@765
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_13_cnn1304_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1_q = i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0(BITSHIFT,8383)@765
    assign i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0_q = i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0(ADD,5113)@765 + 1
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_13_cnn1304_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_13_cnn1304_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14298)@766
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2(ADD,10261)@766 + 1
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14303)@766
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_0_1_q[69:69];

    // redist230_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18147)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist230_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist231_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18148)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist231_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2(ADD,10262)@767 + 1
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist231_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist231_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist230_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist230_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist677_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18594)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist677_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10263)@768
    assign i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p2_of_2_q, redist677_i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_13_cnn1304_mult_extender_x(BITJOIN,1877)@768
    assign i_add_ptr70_3_13_cnn1304_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_13_cnn1304_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_13_cnn1304_trunc_sel_x(BITSELECT,1879)@768
    assign i_add_ptr70_3_13_cnn1304_trunc_sel_x_b = i_add_ptr70_3_13_cnn1304_mult_extender_x_q[63:0];

    // c_i64_13(CONSTANT,34)
    assign c_i64_13_q = 64'b0000000000000000000000000000000000000000000000000000000000001101;

    // i_inc79_12_cnn1272(LOGICAL,497)@754
    assign i_inc79_12_cnn1272_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_13_q;

    // i_inc79_12_cnn1272_vt_select_1_merged_bit_select(BITSELECT,17873)@754
    assign i_inc79_12_cnn1272_vt_select_1_merged_bit_select_b = i_inc79_12_cnn1272_q[1:1];
    assign i_inc79_12_cnn1272_vt_select_1_merged_bit_select_c = i_inc79_12_cnn1272_q[63:4];

    // i_inc79_12_cnn1272_vt_join(BITJOIN,500)@754
    assign i_inc79_12_cnn1272_vt_join_q = {i_inc79_12_cnn1272_vt_select_1_merged_bit_select_c, i_inc79_10_cnn1194_vt_const_1_q, i_inc79_12_cnn1272_vt_select_1_merged_bit_select_b, VCC_q};

    // i_mul65_13_cnn1273_bs1_merged_bit_select(BITSELECT,17874)@754
    assign i_mul65_13_cnn1273_bs1_merged_bit_select_b = i_inc79_12_cnn1272_vt_join_q[63:54];
    assign i_mul65_13_cnn1273_bs1_merged_bit_select_c = i_inc79_12_cnn1272_vt_join_q[53:36];
    assign i_mul65_13_cnn1273_bs1_merged_bit_select_d = i_inc79_12_cnn1272_vt_join_q[35:18];
    assign i_mul65_13_cnn1273_bs1_merged_bit_select_e = i_inc79_12_cnn1272_vt_join_q[17:0];

    // i_mul65_13_cnn1273_bjA2(BITJOIN,2868)@754
    assign i_mul65_13_cnn1273_bjA2_q = {GND_q, i_mul65_13_cnn1273_bs1_merged_bit_select_b};

    // i_mul65_13_cnn1273_im0_cma(CHAINMULTADD,17817)@754 + 5
    // out q@760
    assign i_mul65_13_cnn1273_im0_cma_reset = ~ (resetn);
    assign i_mul65_13_cnn1273_im0_cma_ena0 = 1'b1;
    assign i_mul65_13_cnn1273_im0_cma_ena1 = i_mul65_13_cnn1273_im0_cma_ena0;
    assign i_mul65_13_cnn1273_im0_cma_ena2 = i_mul65_13_cnn1273_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_im0_cma_ah[0] <= i_mul65_13_cnn1273_bjA2_q;
        end
    end

    assign i_mul65_13_cnn1273_im0_cma_a0 = i_mul65_13_cnn1273_im0_cma_ah[0];
    assign i_mul65_13_cnn1273_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_13_cnn1273_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_13_cnn1273_im0_cma_ena2, i_mul65_13_cnn1273_im0_cma_ena1, i_mul65_13_cnn1273_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_13_cnn1273_im0_cma_a0),
        .coefsela(i_mul65_13_cnn1273_im0_cma_c0),
        .resulta(i_mul65_13_cnn1273_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_13_cnn1273_im0_cma_delay ( .xin(i_mul65_13_cnn1273_im0_cma_s0), .xout(i_mul65_13_cnn1273_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_13_cnn1273_im0_cma_q = i_mul65_13_cnn1273_im0_cma_qq[21:0];

    // redist51_i_mul65_13_cnn1273_im0_cma_q_1(DELAY,17968)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist51_i_mul65_13_cnn1273_im0_cma_q_1_q <= i_mul65_13_cnn1273_im0_cma_q;
        end
    end

    // i_mul65_13_cnn1273_sums_align_5(BITSHIFT,2891)@761
    assign i_mul65_13_cnn1273_sums_align_5_qint = { redist51_i_mul65_13_cnn1273_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_13_cnn1273_sums_align_5_q = i_mul65_13_cnn1273_sums_align_5_qint[74:0];

    // i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11359)@761
    assign i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_13_cnn1273_sums_align_5_q[69:0];

    // i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11346)@761
    assign i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_13_cnn1273_sums_align_3_q[64:64];

    // i_mul65_13_cnn1273_bjA7(BITJOIN,2873)@754
    assign i_mul65_13_cnn1273_bjA7_q = {GND_q, i_mul65_13_cnn1273_bs1_merged_bit_select_c};

    // i_mul65_13_cnn1273_im5_cma(CHAINMULTADD,17818)@754 + 5
    // out q@760
    assign i_mul65_13_cnn1273_im5_cma_reset = ~ (resetn);
    assign i_mul65_13_cnn1273_im5_cma_ena0 = 1'b1;
    assign i_mul65_13_cnn1273_im5_cma_ena1 = i_mul65_13_cnn1273_im5_cma_ena0;
    assign i_mul65_13_cnn1273_im5_cma_ena2 = i_mul65_13_cnn1273_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_im5_cma_ah[0] <= i_mul65_13_cnn1273_bjA7_q;
        end
    end

    assign i_mul65_13_cnn1273_im5_cma_a0 = i_mul65_13_cnn1273_im5_cma_ah[0];
    assign i_mul65_13_cnn1273_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_13_cnn1273_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_13_cnn1273_im5_cma_ena2, i_mul65_13_cnn1273_im5_cma_ena1, i_mul65_13_cnn1273_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_13_cnn1273_im5_cma_a0),
        .coefsela(i_mul65_13_cnn1273_im5_cma_c0),
        .resulta(i_mul65_13_cnn1273_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_13_cnn1273_im5_cma_delay ( .xin(i_mul65_13_cnn1273_im5_cma_s0), .xout(i_mul65_13_cnn1273_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_13_cnn1273_im5_cma_q = i_mul65_13_cnn1273_im5_cma_qq[29:0];

    // redist50_i_mul65_13_cnn1273_im5_cma_q_1(DELAY,17967)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist50_i_mul65_13_cnn1273_im5_cma_q_1_q <= i_mul65_13_cnn1273_im5_cma_q;
        end
    end

    // i_mul65_13_cnn1273_sums_align_3(BITSHIFT,2889)@761
    assign i_mul65_13_cnn1273_sums_align_3_qint = { redist50_i_mul65_13_cnn1273_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_13_cnn1273_sums_align_3_q = i_mul65_13_cnn1273_sums_align_3_qint[64:0];

    // i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11351)@761
    assign i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_align_3_q};

    // i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2(ADD,9304)@761 + 1
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_q = i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11365)@762
    assign i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_13_cnn1273_sums_result_add_0_0_q[47:47];

    // i_mul65_13_cnn1273_bjA12(BITJOIN,2878)@754
    assign i_mul65_13_cnn1273_bjA12_q = {GND_q, i_mul65_13_cnn1273_bs1_merged_bit_select_d};

    // i_mul65_13_cnn1273_im10_cma(CHAINMULTADD,17819)@754 + 5
    // out q@760
    assign i_mul65_13_cnn1273_im10_cma_reset = ~ (resetn);
    assign i_mul65_13_cnn1273_im10_cma_ena0 = 1'b1;
    assign i_mul65_13_cnn1273_im10_cma_ena1 = i_mul65_13_cnn1273_im10_cma_ena0;
    assign i_mul65_13_cnn1273_im10_cma_ena2 = i_mul65_13_cnn1273_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_im10_cma_ah[0] <= i_mul65_13_cnn1273_bjA12_q;
        end
    end

    assign i_mul65_13_cnn1273_im10_cma_a0 = i_mul65_13_cnn1273_im10_cma_ah[0];
    assign i_mul65_13_cnn1273_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_13_cnn1273_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_13_cnn1273_im10_cma_ena2, i_mul65_13_cnn1273_im10_cma_ena1, i_mul65_13_cnn1273_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_13_cnn1273_im10_cma_a0),
        .coefsela(i_mul65_13_cnn1273_im10_cma_c0),
        .resulta(i_mul65_13_cnn1273_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_13_cnn1273_im10_cma_delay ( .xin(i_mul65_13_cnn1273_im10_cma_s0), .xout(i_mul65_13_cnn1273_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_13_cnn1273_im10_cma_q = i_mul65_13_cnn1273_im10_cma_qq[29:0];

    // redist49_i_mul65_13_cnn1273_im10_cma_q_1(DELAY,17966)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist49_i_mul65_13_cnn1273_im10_cma_q_1_q <= i_mul65_13_cnn1273_im10_cma_q;
        end
    end

    // i_mul65_13_cnn1273_sums_align_1(BITSHIFT,2887)@761
    assign i_mul65_13_cnn1273_sums_align_1_qint = { redist49_i_mul65_13_cnn1273_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_13_cnn1273_sums_align_1_q = i_mul65_13_cnn1273_sums_align_1_qint[46:0];

    // i_mul65_13_cnn1273_bjA17(BITJOIN,2883)@754
    assign i_mul65_13_cnn1273_bjA17_q = {GND_q, i_mul65_13_cnn1273_bs1_merged_bit_select_e};

    // i_mul65_13_cnn1273_im15_cma(CHAINMULTADD,17820)@754 + 5
    // out q@760
    assign i_mul65_13_cnn1273_im15_cma_reset = ~ (resetn);
    assign i_mul65_13_cnn1273_im15_cma_ena0 = 1'b1;
    assign i_mul65_13_cnn1273_im15_cma_ena1 = i_mul65_13_cnn1273_im15_cma_ena0;
    assign i_mul65_13_cnn1273_im15_cma_ena2 = i_mul65_13_cnn1273_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_im15_cma_ah[0] <= i_mul65_13_cnn1273_bjA17_q;
        end
    end

    assign i_mul65_13_cnn1273_im15_cma_a0 = i_mul65_13_cnn1273_im15_cma_ah[0];
    assign i_mul65_13_cnn1273_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_13_cnn1273_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_13_cnn1273_im15_cma_ena2, i_mul65_13_cnn1273_im15_cma_ena1, i_mul65_13_cnn1273_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_13_cnn1273_im15_cma_a0),
        .coefsela(i_mul65_13_cnn1273_im15_cma_c0),
        .resulta(i_mul65_13_cnn1273_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_13_cnn1273_im15_cma_delay ( .xin(i_mul65_13_cnn1273_im15_cma_s0), .xout(i_mul65_13_cnn1273_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_13_cnn1273_im15_cma_q = i_mul65_13_cnn1273_im15_cma_qq[29:0];

    // redist48_i_mul65_13_cnn1273_im15_cma_q_1(DELAY,17965)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist48_i_mul65_13_cnn1273_im15_cma_q_1_q <= i_mul65_13_cnn1273_im15_cma_q;
        end
    end

    // i_mul65_13_cnn1273_sums_result_add_0_0(ADD,2893)@761 + 1
    assign i_mul65_13_cnn1273_sums_result_add_0_0_a = {{18{redist48_i_mul65_13_cnn1273_im15_cma_q_1_q[29]}}, redist48_i_mul65_13_cnn1273_im15_cma_q_1_q};
    assign i_mul65_13_cnn1273_sums_result_add_0_0_b = {{1{i_mul65_13_cnn1273_sums_align_1_q[46]}}, i_mul65_13_cnn1273_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_sums_result_add_0_0_o <= $signed(i_mul65_13_cnn1273_sums_result_add_0_0_a) + $signed(i_mul65_13_cnn1273_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_13_cnn1273_sums_result_add_0_0_q = i_mul65_13_cnn1273_sums_result_add_0_0_o[47:0];

    // i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11387)@762
    assign i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_13_cnn1273_sums_result_add_0_0_q};

    // i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2(ADD,9315)@762 + 1
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_q = i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11399)@763
    assign i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11362)@761
    assign i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_13_cnn1273_sums_align_5_q[74:74];

    // redist541_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18458)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist541_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11361)@761
    assign i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_13_cnn1273_sums_align_5_q[74:70];

    // redist542_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18459)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist542_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11363)@762
    assign i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist541_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist542_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18460)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11358)@762
    assign i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist543_i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2(ADD,9305)@762 + 1
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_cin = i_mul65_13_cnn1273_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_13_cnn1273_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_q = i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11400)@763
    assign i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_13_cnn1273_sums_result_add_0_1_p2_of_2_q};

    // redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18451)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11395)@763
    assign i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist534_i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2(ADD,9316)@763 + 1
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_cin = i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_13_cnn1273_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_q = i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist751_i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_q_1(DELAY,18668)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist751_i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_13_cnn1273_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9317)@764
    assign i_mul65_13_cnn1273_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_13_cnn1273_sums_result_add_1_0_p2_of_2_q, redist751_i_mul65_13_cnn1273_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_13_cnn1273_extender_x(BITJOIN,2721)@764
    assign i_mul65_13_cnn1273_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_13_cnn1273_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_13_cnn1273_sel_x(BITSELECT,1050)@764
    assign bgTrunc_i_mul65_13_cnn1273_sel_x_b = i_mul65_13_cnn1273_extender_x_q[63:0];

    // i_mul65_13_cnn1273_vt_select_63(BITSELECT,999)@764
    assign i_mul65_13_cnn1273_vt_select_63_b = bgTrunc_i_mul65_13_cnn1273_sel_x_b[63:1];

    // i_mul65_13_cnn1273_vt_join(BITJOIN,998)@764
    assign i_mul65_13_cnn1273_vt_join_q = {i_mul65_13_cnn1273_vt_select_63_b, VCC_q};

    // i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select(BITSELECT,17902)@764
    assign i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_b = i_mul65_13_cnn1273_vt_join_q[63:54];
    assign i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_c = i_mul65_13_cnn1273_vt_join_q[53:36];
    assign i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_d = i_mul65_13_cnn1273_vt_join_q[35:18];
    assign i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_e = i_mul65_13_cnn1273_vt_join_q[17:0];

    // i_add_ptr66_13_cnn1278_mult_x_bjA2(BITJOIN,3378)@764
    assign i_add_ptr66_13_cnn1278_mult_x_bjA2_q = {GND_q, i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_13_cnn1278_mult_x_im0_shift0(BITSHIFT,8152)@764
    assign i_add_ptr66_13_cnn1278_mult_x_im0_shift0_qint = { i_add_ptr66_13_cnn1278_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_13_cnn1278_mult_x_im0_shift0_q = i_add_ptr66_13_cnn1278_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_align_5(BITSHIFT,3401)@764
    assign i_add_ptr66_13_cnn1278_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_13_cnn1278_mult_x_im0_shift0_q[12]}}, i_add_ptr66_13_cnn1278_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_13_cnn1278_mult_x_sums_align_5_q = i_add_ptr66_13_cnn1278_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_13_cnn1278_mult_x_bjA7(BITJOIN,3383)@764
    assign i_add_ptr66_13_cnn1278_mult_x_bjA7_q = {GND_q, i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_13_cnn1278_mult_x_im5_shift0(BITSHIFT,8153)@764
    assign i_add_ptr66_13_cnn1278_mult_x_im5_shift0_qint = { i_add_ptr66_13_cnn1278_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_13_cnn1278_mult_x_im5_shift0_q = i_add_ptr66_13_cnn1278_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_align_3(BITSHIFT,3399)@764
    assign i_add_ptr66_13_cnn1278_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_13_cnn1278_mult_x_im5_shift0_q[20]}}, i_add_ptr66_13_cnn1278_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_13_cnn1278_mult_x_sums_align_3_q = i_add_ptr66_13_cnn1278_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1(ADD,3404)@764 + 1
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_13_cnn1278_mult_x_sums_align_3_q[58]}}, i_add_ptr66_13_cnn1278_mult_x_sums_align_3_q};
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_13_cnn1278_mult_x_sums_align_5_q[68]}}, i_add_ptr66_13_cnn1278_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_q = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12218)@765
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_13_cnn1278_mult_x_bjA12(BITJOIN,3388)@764
    assign i_add_ptr66_13_cnn1278_mult_x_bjA12_q = {GND_q, i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_13_cnn1278_mult_x_im10_shift0(BITSHIFT,8154)@764
    assign i_add_ptr66_13_cnn1278_mult_x_im10_shift0_qint = { i_add_ptr66_13_cnn1278_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_13_cnn1278_mult_x_im10_shift0_q = i_add_ptr66_13_cnn1278_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_align_1(BITSHIFT,3397)@764
    assign i_add_ptr66_13_cnn1278_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_13_cnn1278_mult_x_im10_shift0_q[20]}}, i_add_ptr66_13_cnn1278_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_13_cnn1278_mult_x_sums_align_1_q = i_add_ptr66_13_cnn1278_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_13_cnn1278_mult_x_bjA17(BITJOIN,3393)@764
    assign i_add_ptr66_13_cnn1278_mult_x_bjA17_q = {GND_q, i_add_ptr66_13_cnn1278_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_13_cnn1278_mult_x_im15_shift0(BITSHIFT,8155)@764
    assign i_add_ptr66_13_cnn1278_mult_x_im15_shift0_qint = { i_add_ptr66_13_cnn1278_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_13_cnn1278_mult_x_im15_shift0_q = i_add_ptr66_13_cnn1278_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0(ADD,3403)@764 + 1
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_13_cnn1278_mult_x_im15_shift0_q[20]}}, i_add_ptr66_13_cnn1278_mult_x_im15_shift0_q};
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_13_cnn1278_mult_x_sums_align_1_q[40]}}, i_add_ptr66_13_cnn1278_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_q = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12246)@765
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2(ADD,9634)@765 + 1
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12251)@765
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_0_1_q[69:69];

    // redist344_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18261)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist344_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist345_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18262)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist345_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2(ADD,9635)@766 + 1
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist345_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist345_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist344_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist344_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist734_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18651)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist734_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9636)@767
    assign i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p2_of_2_q, redist734_i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_13_cnn1278_mult_extender_x(BITJOIN,1307)@767
    assign i_add_ptr66_13_cnn1278_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_13_cnn1278_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_13_cnn1278_trunc_sel_x(BITSELECT,1309)@767
    assign i_add_ptr66_13_cnn1278_trunc_sel_x_b = i_add_ptr66_13_cnn1278_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274(BLACKBOX,694)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_1275 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_select_63(BITSELECT,697)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_join(BITJOIN,696)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_13_cnn1278_add_x(ADD,1301)@767
    assign i_add_ptr66_13_cnn1278_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer17_cnn1274_vt_join_q};
    assign i_add_ptr66_13_cnn1278_add_x_b = {1'b0, i_add_ptr66_13_cnn1278_trunc_sel_x_b};
    assign i_add_ptr66_13_cnn1278_add_x_o = $unsigned(i_add_ptr66_13_cnn1278_add_x_a) + $unsigned(i_add_ptr66_13_cnn1278_add_x_b);
    assign i_add_ptr66_13_cnn1278_add_x_q = i_add_ptr66_13_cnn1278_add_x_o[64:0];

    // i_add_ptr66_13_cnn1278_dupName_0_trunc_sel_x(BITSELECT,1310)@767
    assign i_add_ptr66_13_cnn1278_dupName_0_trunc_sel_x_b = i_add_ptr66_13_cnn1278_add_x_q[63:0];

    // i_add_ptr66_13_cnn1277_vt_select_63(BITSELECT,63)@767
    assign i_add_ptr66_13_cnn1277_vt_select_63_b = i_add_ptr66_13_cnn1278_dupName_0_trunc_sel_x_b[63:3];

    // redist875_i_add_ptr66_13_cnn1277_vt_select_63_b_1(DELAY,18792)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist875_i_add_ptr66_13_cnn1277_vt_select_63_b_1_q <= i_add_ptr66_13_cnn1277_vt_select_63_b;
        end
    end

    // i_add_ptr66_13_cnn1277_vt_const_2(CONSTANT,61)
    assign i_add_ptr66_13_cnn1277_vt_const_2_q = 3'b100;

    // i_add_ptr66_13_cnn1277_vt_join(BITJOIN,62)@768
    assign i_add_ptr66_13_cnn1277_vt_join_q = {redist875_i_add_ptr66_13_cnn1277_vt_select_63_b_1_q, i_add_ptr66_13_cnn1277_vt_const_2_q};

    // i_add_ptr70_3_13_cnn1304_add_x(ADD,1871)@768
    assign i_add_ptr70_3_13_cnn1304_add_x_a = {1'b0, i_add_ptr66_13_cnn1277_vt_join_q};
    assign i_add_ptr70_3_13_cnn1304_add_x_b = {1'b0, i_add_ptr70_3_13_cnn1304_trunc_sel_x_b};
    assign i_add_ptr70_3_13_cnn1304_add_x_o = $unsigned(i_add_ptr70_3_13_cnn1304_add_x_a) + $unsigned(i_add_ptr70_3_13_cnn1304_add_x_b);
    assign i_add_ptr70_3_13_cnn1304_add_x_q = i_add_ptr70_3_13_cnn1304_add_x_o[64:0];

    // i_add_ptr70_3_13_cnn1304_dupName_0_trunc_sel_x(BITSELECT,1880)@768
    assign i_add_ptr70_3_13_cnn1304_dupName_0_trunc_sel_x_b = i_add_ptr70_3_13_cnn1304_add_x_q[63:0];

    // i_add_ptr70_3_13_cnn1303_vt_select_63(BITSELECT,234)@768
    assign i_add_ptr70_3_13_cnn1303_vt_select_63_b = i_add_ptr70_3_13_cnn1304_dupName_0_trunc_sel_x_b[63:2];

    // redist818_i_add_ptr70_3_13_cnn1303_vt_select_63_b_1(DELAY,18735)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist818_i_add_ptr70_3_13_cnn1303_vt_select_63_b_1_q <= i_add_ptr70_3_13_cnn1303_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_13_cnn1303_vt_join(BITJOIN,233)@769
    assign i_add_ptr70_3_13_cnn1303_vt_join_q = {redist818_i_add_ptr70_3_13_cnn1303_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_13_cnn1306_add_x(ADD,2511)@769
    assign i_add_ptr73_371_13_cnn1306_add_x_a = {1'b0, i_add_ptr70_3_13_cnn1303_vt_join_q};
    assign i_add_ptr73_371_13_cnn1306_add_x_b = {1'b0, i_add_ptr73_371_13_cnn1306_trunc_sel_x_b};
    assign i_add_ptr73_371_13_cnn1306_add_x_o = $unsigned(i_add_ptr73_371_13_cnn1306_add_x_a) + $unsigned(i_add_ptr73_371_13_cnn1306_add_x_b);
    assign i_add_ptr73_371_13_cnn1306_add_x_q = i_add_ptr73_371_13_cnn1306_add_x_o[64:0];

    // i_add_ptr73_371_13_cnn1306_dupName_0_trunc_sel_x(BITSELECT,2520)@769
    assign i_add_ptr73_371_13_cnn1306_dupName_0_trunc_sel_x_b = i_add_ptr73_371_13_cnn1306_add_x_q[63:0];

    // i_add_ptr73_371_13_cnn1305_vt_select_63(BITSELECT,426)@769
    assign i_add_ptr73_371_13_cnn1305_vt_select_63_b = i_add_ptr73_371_13_cnn1306_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_13_cnn1305_vt_join(BITJOIN,425)@769
    assign i_add_ptr73_371_13_cnn1305_vt_join_q = {i_add_ptr73_371_13_cnn1305_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_select_63(BITSELECT,934)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_select_63_b = i_add_ptr73_371_13_cnn1305_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_join(BITJOIN,933)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn163_cnn1300(BLACKBOX,627)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_163_cnn1301 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn163_cnn1300 (
        .in_intel_reserved_ffwd_82_0(in_intel_reserved_ffwd_82_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_82_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn163_cnn1300_out_dest_data_out_82_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0(BITSHIFT,8564)@766
    assign i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0_q = i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5(BITSHIFT,6491)@766
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_13_cnn1298_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5_q = i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0(BITSHIFT,8565)@766
    assign i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0_q = i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3(BITSHIFT,6489)@766
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_13_cnn1298_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3_q = i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1(ADD,6494)@766 + 1
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_13_cnn1298_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_13_cnn1298_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15926)@767
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0(BITSHIFT,8566)@766
    assign i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0_q = i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1(BITSHIFT,6487)@766
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_13_cnn1298_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1_q = i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0(BITSHIFT,8567)@766
    assign i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0_q = i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0(ADD,6493)@766 + 1
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_13_cnn1298_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_13_cnn1298_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15954)@767
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2(ADD,10767)@767 + 1
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15959)@767
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_0_1_q[69:69];

    // redist138_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18055)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist138_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist139_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18056)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist139_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2(ADD,10768)@768 + 1
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist139_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist139_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist138_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist138_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist631_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18548)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist631_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10769)@769
    assign i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p2_of_2_q, redist631_i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_13_cnn1298_mult_extender_x(BITJOIN,2337)@769
    assign i_add_ptr73_270_13_cnn1298_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_13_cnn1298_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_13_cnn1298_trunc_sel_x(BITSELECT,2339)@769
    assign i_add_ptr73_270_13_cnn1298_trunc_sel_x_b = i_add_ptr73_270_13_cnn1298_mult_extender_x_q[63:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0(BITSHIFT,8312)@765
    assign i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0_q = i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5(BITSHIFT,4601)@765
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_13_cnn1296_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5_q = i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0(BITSHIFT,8313)@765
    assign i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0_q = i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3(BITSHIFT,4599)@765
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_13_cnn1296_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3_q = i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1(ADD,4604)@765 + 1
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_13_cnn1296_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_13_cnn1296_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13658)@766
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0(BITSHIFT,8314)@765
    assign i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0_q = i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1(BITSHIFT,4597)@765
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_13_cnn1296_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1_q = i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0(BITSHIFT,8315)@765
    assign i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0_q = i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0(ADD,4603)@765 + 1
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_13_cnn1296_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_13_cnn1296_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13686)@766
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2(ADD,10074)@766 + 1
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13691)@766
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_0_1_q[69:69];

    // redist264_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18181)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist264_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist265_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18182)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist265_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2(ADD,10075)@767 + 1
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist265_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist265_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist264_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist264_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist694_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18611)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist694_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10076)@768
    assign i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p2_of_2_q, redist694_i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_13_cnn1296_mult_extender_x(BITJOIN,1707)@768
    assign i_add_ptr70_2_13_cnn1296_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_13_cnn1296_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_13_cnn1296_trunc_sel_x(BITSELECT,1709)@768
    assign i_add_ptr70_2_13_cnn1296_trunc_sel_x_b = i_add_ptr70_2_13_cnn1296_mult_extender_x_q[63:0];

    // i_add_ptr70_2_13_cnn1296_add_x(ADD,1701)@768
    assign i_add_ptr70_2_13_cnn1296_add_x_a = {1'b0, i_add_ptr66_13_cnn1277_vt_join_q};
    assign i_add_ptr70_2_13_cnn1296_add_x_b = {1'b0, i_add_ptr70_2_13_cnn1296_trunc_sel_x_b};
    assign i_add_ptr70_2_13_cnn1296_add_x_o = $unsigned(i_add_ptr70_2_13_cnn1296_add_x_a) + $unsigned(i_add_ptr70_2_13_cnn1296_add_x_b);
    assign i_add_ptr70_2_13_cnn1296_add_x_q = i_add_ptr70_2_13_cnn1296_add_x_o[64:0];

    // i_add_ptr70_2_13_cnn1296_dupName_0_trunc_sel_x(BITSELECT,1710)@768
    assign i_add_ptr70_2_13_cnn1296_dupName_0_trunc_sel_x_b = i_add_ptr70_2_13_cnn1296_add_x_q[63:0];

    // i_add_ptr70_2_13_cnn1295_vt_select_63(BITSELECT,183)@768
    assign i_add_ptr70_2_13_cnn1295_vt_select_63_b = i_add_ptr70_2_13_cnn1296_dupName_0_trunc_sel_x_b[63:2];

    // redist835_i_add_ptr70_2_13_cnn1295_vt_select_63_b_1(DELAY,18752)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist835_i_add_ptr70_2_13_cnn1295_vt_select_63_b_1_q <= i_add_ptr70_2_13_cnn1295_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_13_cnn1295_vt_join(BITJOIN,182)@769
    assign i_add_ptr70_2_13_cnn1295_vt_join_q = {redist835_i_add_ptr70_2_13_cnn1295_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_13_cnn1298_add_x(ADD,2331)@769
    assign i_add_ptr73_270_13_cnn1298_add_x_a = {1'b0, i_add_ptr70_2_13_cnn1295_vt_join_q};
    assign i_add_ptr73_270_13_cnn1298_add_x_b = {1'b0, i_add_ptr73_270_13_cnn1298_trunc_sel_x_b};
    assign i_add_ptr73_270_13_cnn1298_add_x_o = $unsigned(i_add_ptr73_270_13_cnn1298_add_x_a) + $unsigned(i_add_ptr73_270_13_cnn1298_add_x_b);
    assign i_add_ptr73_270_13_cnn1298_add_x_q = i_add_ptr73_270_13_cnn1298_add_x_o[64:0];

    // i_add_ptr73_270_13_cnn1298_dupName_0_trunc_sel_x(BITSELECT,2340)@769
    assign i_add_ptr73_270_13_cnn1298_dupName_0_trunc_sel_x_b = i_add_ptr73_270_13_cnn1298_add_x_q[63:0];

    // i_add_ptr73_270_13_cnn1297_vt_select_63(BITSELECT,372)@769
    assign i_add_ptr73_270_13_cnn1297_vt_select_63_b = i_add_ptr73_270_13_cnn1298_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_13_cnn1297_vt_join(BITJOIN,371)@769
    assign i_add_ptr73_270_13_cnn1297_vt_join_q = {i_add_ptr73_270_13_cnn1297_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_select_63(BITSELECT,930)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_select_63_b = i_add_ptr73_270_13_cnn1297_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_join(BITJOIN,929)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn162_cnn1292(BLACKBOX,626)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_162_cnn1293 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn162_cnn1292 (
        .in_intel_reserved_ffwd_81_0(in_intel_reserved_ffwd_81_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_81_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn162_cnn1292_out_dest_data_out_81_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0(BITSHIFT,8496)@766
    assign i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0_q = i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5(BITSHIFT,5981)@766
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_13_cnn1290_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5_q = i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0(BITSHIFT,8497)@766
    assign i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0_q = i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3(BITSHIFT,5979)@766
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_13_cnn1290_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3_q = i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1(ADD,5984)@766 + 1
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_13_cnn1290_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_13_cnn1290_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15314)@767
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0(BITSHIFT,8498)@766
    assign i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0_q = i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1(BITSHIFT,5977)@766
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_13_cnn1290_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1_q = i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0(BITSHIFT,8499)@766
    assign i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0_q = i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0(ADD,5983)@766 + 1
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_13_cnn1290_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_13_cnn1290_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15342)@767
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2(ADD,10580)@767 + 1
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15347)@767
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_0_1_q[69:69];

    // redist172_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18089)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist172_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist173_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18090)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist173_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2(ADD,10581)@768 + 1
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist173_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist173_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist172_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist172_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist648_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18565)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist648_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10582)@769
    assign i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p2_of_2_q, redist648_i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_13_cnn1290_mult_extender_x(BITJOIN,2167)@769
    assign i_add_ptr73_169_13_cnn1290_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_13_cnn1290_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_13_cnn1290_trunc_sel_x(BITSELECT,2169)@769
    assign i_add_ptr73_169_13_cnn1290_trunc_sel_x_b = i_add_ptr73_169_13_cnn1290_mult_extender_x_q[63:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0(BITSHIFT,8244)@765
    assign i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0_q = i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5(BITSHIFT,4091)@765
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_13_cnn1288_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5_q = i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0(BITSHIFT,8245)@765
    assign i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0_q = i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3(BITSHIFT,4089)@765
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_13_cnn1288_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3_q = i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1(ADD,4094)@765 + 1
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_13_cnn1288_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_13_cnn1288_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13046)@766
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0(BITSHIFT,8246)@765
    assign i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0_q = i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1(BITSHIFT,4087)@765
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_13_cnn1288_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1_q = i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0(BITSHIFT,8247)@765
    assign i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0_q = i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0(ADD,4093)@765 + 1
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_13_cnn1288_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_13_cnn1288_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13074)@766
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2(ADD,9887)@766 + 1
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13079)@766
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_0_1_q[69:69];

    // redist298_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18215)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist298_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist299_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18216)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist299_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2(ADD,9888)@767 + 1
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist299_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist299_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist298_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist298_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist711_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18628)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist711_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9889)@768
    assign i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p2_of_2_q, redist711_i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_13_cnn1288_mult_extender_x(BITJOIN,1537)@768
    assign i_add_ptr70_1_13_cnn1288_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_13_cnn1288_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_13_cnn1288_trunc_sel_x(BITSELECT,1539)@768
    assign i_add_ptr70_1_13_cnn1288_trunc_sel_x_b = i_add_ptr70_1_13_cnn1288_mult_extender_x_q[63:0];

    // i_add_ptr70_1_13_cnn1288_add_x(ADD,1531)@768
    assign i_add_ptr70_1_13_cnn1288_add_x_a = {1'b0, i_add_ptr66_13_cnn1277_vt_join_q};
    assign i_add_ptr70_1_13_cnn1288_add_x_b = {1'b0, i_add_ptr70_1_13_cnn1288_trunc_sel_x_b};
    assign i_add_ptr70_1_13_cnn1288_add_x_o = $unsigned(i_add_ptr70_1_13_cnn1288_add_x_a) + $unsigned(i_add_ptr70_1_13_cnn1288_add_x_b);
    assign i_add_ptr70_1_13_cnn1288_add_x_q = i_add_ptr70_1_13_cnn1288_add_x_o[64:0];

    // i_add_ptr70_1_13_cnn1288_dupName_0_trunc_sel_x(BITSELECT,1540)@768
    assign i_add_ptr70_1_13_cnn1288_dupName_0_trunc_sel_x_b = i_add_ptr70_1_13_cnn1288_add_x_q[63:0];

    // i_add_ptr70_1_13_cnn1287_vt_select_63(BITSELECT,132)@768
    assign i_add_ptr70_1_13_cnn1287_vt_select_63_b = i_add_ptr70_1_13_cnn1288_dupName_0_trunc_sel_x_b[63:2];

    // redist852_i_add_ptr70_1_13_cnn1287_vt_select_63_b_1(DELAY,18769)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist852_i_add_ptr70_1_13_cnn1287_vt_select_63_b_1_q <= i_add_ptr70_1_13_cnn1287_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_13_cnn1287_vt_join(BITJOIN,131)@769
    assign i_add_ptr70_1_13_cnn1287_vt_join_q = {redist852_i_add_ptr70_1_13_cnn1287_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_13_cnn1290_add_x(ADD,2161)@769
    assign i_add_ptr73_169_13_cnn1290_add_x_a = {1'b0, i_add_ptr70_1_13_cnn1287_vt_join_q};
    assign i_add_ptr73_169_13_cnn1290_add_x_b = {1'b0, i_add_ptr73_169_13_cnn1290_trunc_sel_x_b};
    assign i_add_ptr73_169_13_cnn1290_add_x_o = $unsigned(i_add_ptr73_169_13_cnn1290_add_x_a) + $unsigned(i_add_ptr73_169_13_cnn1290_add_x_b);
    assign i_add_ptr73_169_13_cnn1290_add_x_q = i_add_ptr73_169_13_cnn1290_add_x_o[64:0];

    // i_add_ptr73_169_13_cnn1290_dupName_0_trunc_sel_x(BITSELECT,2170)@769
    assign i_add_ptr73_169_13_cnn1290_dupName_0_trunc_sel_x_b = i_add_ptr73_169_13_cnn1290_add_x_q[63:0];

    // i_add_ptr73_169_13_cnn1289_vt_select_63(BITSELECT,321)@769
    assign i_add_ptr73_169_13_cnn1289_vt_select_63_b = i_add_ptr73_169_13_cnn1290_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_13_cnn1289_vt_join(BITJOIN,320)@769
    assign i_add_ptr73_169_13_cnn1289_vt_join_q = {i_add_ptr73_169_13_cnn1289_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_select_63(BITSELECT,926)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_select_63_b = i_add_ptr73_169_13_cnn1289_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_join(BITJOIN,925)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn161_cnn1284(BLACKBOX,625)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_161_cnn1285 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn161_cnn1284 (
        .in_intel_reserved_ffwd_80_0(in_intel_reserved_ffwd_80_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_80_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn161_cnn1284_out_dest_data_out_80_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_13_cnn1282_mult_x_im0_shift0(BITSHIFT,8472)@766
    assign i_add_ptr73_13_cnn1282_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_13_cnn1282_mult_x_im0_shift0_q = i_add_ptr73_13_cnn1282_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_align_5(BITSHIFT,5801)@766
    assign i_add_ptr73_13_cnn1282_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_13_cnn1282_mult_x_im0_shift0_q[12]}}, i_add_ptr73_13_cnn1282_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_13_cnn1282_mult_x_sums_align_5_q = i_add_ptr73_13_cnn1282_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_13_cnn1282_mult_x_im5_shift0(BITSHIFT,8473)@766
    assign i_add_ptr73_13_cnn1282_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_13_cnn1282_mult_x_im5_shift0_q = i_add_ptr73_13_cnn1282_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_align_3(BITSHIFT,5799)@766
    assign i_add_ptr73_13_cnn1282_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_13_cnn1282_mult_x_im5_shift0_q[20]}}, i_add_ptr73_13_cnn1282_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_13_cnn1282_mult_x_sums_align_3_q = i_add_ptr73_13_cnn1282_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1(ADD,5804)@766 + 1
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_13_cnn1282_mult_x_sums_align_3_q[58]}}, i_add_ptr73_13_cnn1282_mult_x_sums_align_3_q};
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_13_cnn1282_mult_x_sums_align_5_q[68]}}, i_add_ptr73_13_cnn1282_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_q = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15098)@767
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_13_cnn1282_mult_x_im10_shift0(BITSHIFT,8474)@766
    assign i_add_ptr73_13_cnn1282_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_13_cnn1282_mult_x_im10_shift0_q = i_add_ptr73_13_cnn1282_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_align_1(BITSHIFT,5797)@766
    assign i_add_ptr73_13_cnn1282_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_13_cnn1282_mult_x_im10_shift0_q[20]}}, i_add_ptr73_13_cnn1282_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_13_cnn1282_mult_x_sums_align_1_q = i_add_ptr73_13_cnn1282_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_13_cnn1282_mult_x_im15_shift0(BITSHIFT,8475)@766
    assign i_add_ptr73_13_cnn1282_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_13_cnn1282_mult_x_im15_shift0_q = i_add_ptr73_13_cnn1282_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0(ADD,5803)@766 + 1
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_13_cnn1282_mult_x_im15_shift0_q[20]}}, i_add_ptr73_13_cnn1282_mult_x_im15_shift0_q};
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_13_cnn1282_mult_x_sums_align_1_q[40]}}, i_add_ptr73_13_cnn1282_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_q = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15126)@767
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2(ADD,10514)@767 + 1
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15131)@767
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_0_1_q[69:69];

    // redist184_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18101)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist184_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist185_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18102)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist185_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2(ADD,10515)@768 + 1
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist185_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist185_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist184_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist184_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist654_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18571)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist654_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10516)@769
    assign i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p2_of_2_q, redist654_i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_13_cnn1282_mult_extender_x(BITJOIN,2107)@769
    assign i_add_ptr73_13_cnn1282_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_13_cnn1282_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_13_cnn1282_trunc_sel_x(BITSELECT,2109)@769
    assign i_add_ptr73_13_cnn1282_trunc_sel_x_b = i_add_ptr73_13_cnn1282_mult_extender_x_q[63:0];

    // i_add_ptr70_13_cnn1280_mult_x_im0_shift0(BITSHIFT,8216)@765
    assign i_add_ptr70_13_cnn1280_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_13_cnn1280_mult_x_im0_shift0_q = i_add_ptr70_13_cnn1280_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_align_5(BITSHIFT,3881)@765
    assign i_add_ptr70_13_cnn1280_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_13_cnn1280_mult_x_im0_shift0_q[12]}}, i_add_ptr70_13_cnn1280_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_13_cnn1280_mult_x_sums_align_5_q = i_add_ptr70_13_cnn1280_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_13_cnn1280_mult_x_im5_shift0(BITSHIFT,8217)@765
    assign i_add_ptr70_13_cnn1280_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_13_cnn1280_mult_x_im5_shift0_q = i_add_ptr70_13_cnn1280_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_align_3(BITSHIFT,3879)@765
    assign i_add_ptr70_13_cnn1280_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_13_cnn1280_mult_x_im5_shift0_q[20]}}, i_add_ptr70_13_cnn1280_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_13_cnn1280_mult_x_sums_align_3_q = i_add_ptr70_13_cnn1280_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1(ADD,3884)@765 + 1
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_13_cnn1280_mult_x_sums_align_3_q[58]}}, i_add_ptr70_13_cnn1280_mult_x_sums_align_3_q};
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_13_cnn1280_mult_x_sums_align_5_q[68]}}, i_add_ptr70_13_cnn1280_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_q = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12794)@766
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_13_cnn1280_mult_x_im10_shift0(BITSHIFT,8218)@765
    assign i_add_ptr70_13_cnn1280_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_13_cnn1280_mult_x_im10_shift0_q = i_add_ptr70_13_cnn1280_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_align_1(BITSHIFT,3877)@765
    assign i_add_ptr70_13_cnn1280_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_13_cnn1280_mult_x_im10_shift0_q[20]}}, i_add_ptr70_13_cnn1280_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_13_cnn1280_mult_x_sums_align_1_q = i_add_ptr70_13_cnn1280_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_13_cnn1280_mult_x_im15_shift0(BITSHIFT,8219)@765
    assign i_add_ptr70_13_cnn1280_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_13_cnn1280_mult_x_im15_shift0_q = i_add_ptr70_13_cnn1280_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0(ADD,3883)@765 + 1
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_13_cnn1280_mult_x_im15_shift0_q[20]}}, i_add_ptr70_13_cnn1280_mult_x_im15_shift0_q};
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_13_cnn1280_mult_x_sums_align_1_q[40]}}, i_add_ptr70_13_cnn1280_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_q = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12822)@766
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2(ADD,9810)@766 + 1
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12827)@766
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_0_1_q[69:69];

    // redist312_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18229)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist312_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist313_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18230)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist313_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2(ADD,9811)@767 + 1
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist313_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist313_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist312_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist312_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist718_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18635)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist718_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9812)@768
    assign i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p2_of_2_q, redist718_i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_13_cnn1280_mult_extender_x(BITJOIN,1467)@768
    assign i_add_ptr70_13_cnn1280_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_13_cnn1280_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_13_cnn1280_trunc_sel_x(BITSELECT,1469)@768
    assign i_add_ptr70_13_cnn1280_trunc_sel_x_b = i_add_ptr70_13_cnn1280_mult_extender_x_q[63:0];

    // i_add_ptr70_13_cnn1280_add_x(ADD,1461)@768
    assign i_add_ptr70_13_cnn1280_add_x_a = {1'b0, i_add_ptr66_13_cnn1277_vt_join_q};
    assign i_add_ptr70_13_cnn1280_add_x_b = {1'b0, i_add_ptr70_13_cnn1280_trunc_sel_x_b};
    assign i_add_ptr70_13_cnn1280_add_x_o = $unsigned(i_add_ptr70_13_cnn1280_add_x_a) + $unsigned(i_add_ptr70_13_cnn1280_add_x_b);
    assign i_add_ptr70_13_cnn1280_add_x_q = i_add_ptr70_13_cnn1280_add_x_o[64:0];

    // i_add_ptr70_13_cnn1280_dupName_0_trunc_sel_x(BITSELECT,1470)@768
    assign i_add_ptr70_13_cnn1280_dupName_0_trunc_sel_x_b = i_add_ptr70_13_cnn1280_add_x_q[63:0];

    // i_add_ptr70_13_cnn1279_vt_select_63(BITSELECT,111)@768
    assign i_add_ptr70_13_cnn1279_vt_select_63_b = i_add_ptr70_13_cnn1280_dupName_0_trunc_sel_x_b[63:2];

    // redist859_i_add_ptr70_13_cnn1279_vt_select_63_b_1(DELAY,18776)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist859_i_add_ptr70_13_cnn1279_vt_select_63_b_1_q <= i_add_ptr70_13_cnn1279_vt_select_63_b;
        end
    end

    // i_add_ptr70_13_cnn1279_vt_join(BITJOIN,110)@769
    assign i_add_ptr70_13_cnn1279_vt_join_q = {redist859_i_add_ptr70_13_cnn1279_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_13_cnn1282_add_x(ADD,2101)@769
    assign i_add_ptr73_13_cnn1282_add_x_a = {1'b0, i_add_ptr70_13_cnn1279_vt_join_q};
    assign i_add_ptr73_13_cnn1282_add_x_b = {1'b0, i_add_ptr73_13_cnn1282_trunc_sel_x_b};
    assign i_add_ptr73_13_cnn1282_add_x_o = $unsigned(i_add_ptr73_13_cnn1282_add_x_a) + $unsigned(i_add_ptr73_13_cnn1282_add_x_b);
    assign i_add_ptr73_13_cnn1282_add_x_q = i_add_ptr73_13_cnn1282_add_x_o[64:0];

    // i_add_ptr73_13_cnn1282_dupName_0_trunc_sel_x(BITSELECT,2110)@769
    assign i_add_ptr73_13_cnn1282_dupName_0_trunc_sel_x_b = i_add_ptr73_13_cnn1282_add_x_q[63:0];

    // i_add_ptr73_13_cnn1281_vt_select_63(BITSELECT,303)@769
    assign i_add_ptr73_13_cnn1281_vt_select_63_b = i_add_ptr73_13_cnn1282_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_13_cnn1281_vt_join(BITJOIN,302)@769
    assign i_add_ptr73_13_cnn1281_vt_join_q = {i_add_ptr73_13_cnn1281_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_select_63(BITSELECT,922)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_select_63_b = i_add_ptr73_13_cnn1281_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_join(BITJOIN,921)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn160_cnn1269(BLACKBOX,624)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_160_cnn1270 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn160_cnn1269 (
        .in_intel_reserved_ffwd_79_0(in_intel_reserved_ffwd_79_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_79_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn160_cnn1269_out_dest_data_out_79_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0(BITSHIFT,8632)@766
    assign i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0_q = i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5(BITSHIFT,7001)@766
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_12_cnn1267_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5_q = i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0(BITSHIFT,8633)@766
    assign i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0_q = i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3(BITSHIFT,6999)@766
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_12_cnn1267_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3_q = i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1(ADD,7004)@766 + 1
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_12_cnn1267_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_12_cnn1267_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16538)@767
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0(BITSHIFT,8634)@766
    assign i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0_q = i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1(BITSHIFT,6997)@766
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_12_cnn1267_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1_q = i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0(BITSHIFT,8635)@766
    assign i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0_q = i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0(ADD,7003)@766 + 1
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_12_cnn1267_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_12_cnn1267_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16566)@767
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2(ADD,10954)@767 + 1
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16571)@767
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_0_1_q[69:69];

    // redist104_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18021)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist104_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist105_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18022)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist105_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2(ADD,10955)@768 + 1
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist105_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist105_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist104_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist104_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist614_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18531)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist614_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10956)@769
    assign i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p2_of_2_q, redist614_i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_12_cnn1267_mult_extender_x(BITJOIN,2507)@769
    assign i_add_ptr73_371_12_cnn1267_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_12_cnn1267_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_12_cnn1267_trunc_sel_x(BITSELECT,2509)@769
    assign i_add_ptr73_371_12_cnn1267_trunc_sel_x_b = i_add_ptr73_371_12_cnn1267_mult_extender_x_q[63:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0(BITSHIFT,8376)@765
    assign i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0_q = i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5(BITSHIFT,5081)@765
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_12_cnn1265_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5_q = i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0(BITSHIFT,8377)@765
    assign i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0_q = i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3(BITSHIFT,5079)@765
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_12_cnn1265_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3_q = i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1(ADD,5084)@765 + 1
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_12_cnn1265_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_12_cnn1265_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14234)@766
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0(BITSHIFT,8378)@765
    assign i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0_q = i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1(BITSHIFT,5077)@765
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_12_cnn1265_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1_q = i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0(BITSHIFT,8379)@765
    assign i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0_q = i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0(ADD,5083)@765 + 1
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_12_cnn1265_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_12_cnn1265_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14262)@766
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2(ADD,10250)@766 + 1
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14267)@766
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_0_1_q[69:69];

    // redist232_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18149)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist232_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist233_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18150)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist233_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2(ADD,10251)@767 + 1
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist233_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist233_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist232_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist232_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist678_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18595)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist678_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10252)@768
    assign i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p2_of_2_q, redist678_i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_12_cnn1265_mult_extender_x(BITJOIN,1867)@768
    assign i_add_ptr70_3_12_cnn1265_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_12_cnn1265_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_12_cnn1265_trunc_sel_x(BITSELECT,1869)@768
    assign i_add_ptr70_3_12_cnn1265_trunc_sel_x_b = i_add_ptr70_3_12_cnn1265_mult_extender_x_q[63:0];

    // c_i64_12(CONSTANT,33)
    assign c_i64_12_q = 64'b0000000000000000000000000000000000000000000000000000000000001100;

    // i_inc79_11_cnn1233(LOGICAL,492)@754
    assign i_inc79_11_cnn1233_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_12_q;

    // i_inc79_11_cnn1233_vt_select_1_merged_bit_select(BITSELECT,17871)@754
    assign i_inc79_11_cnn1233_vt_select_1_merged_bit_select_b = i_inc79_11_cnn1233_q[1:0];
    assign i_inc79_11_cnn1233_vt_select_1_merged_bit_select_c = i_inc79_11_cnn1233_q[63:4];

    // i_inc79_11_cnn1233_vt_join(BITJOIN,494)@754
    assign i_inc79_11_cnn1233_vt_join_q = {i_inc79_11_cnn1233_vt_select_1_merged_bit_select_c, i_inc79_10_cnn1194_vt_const_1_q, i_inc79_11_cnn1233_vt_select_1_merged_bit_select_b};

    // i_mul65_12_cnn1234_bs1_merged_bit_select(BITSELECT,17872)@754
    assign i_mul65_12_cnn1234_bs1_merged_bit_select_b = i_inc79_11_cnn1233_vt_join_q[63:54];
    assign i_mul65_12_cnn1234_bs1_merged_bit_select_c = i_inc79_11_cnn1233_vt_join_q[53:36];
    assign i_mul65_12_cnn1234_bs1_merged_bit_select_d = i_inc79_11_cnn1233_vt_join_q[35:18];
    assign i_mul65_12_cnn1234_bs1_merged_bit_select_e = i_inc79_11_cnn1233_vt_join_q[17:0];

    // i_mul65_12_cnn1234_bjA2(BITJOIN,2838)@754
    assign i_mul65_12_cnn1234_bjA2_q = {GND_q, i_mul65_12_cnn1234_bs1_merged_bit_select_b};

    // i_mul65_12_cnn1234_im0_cma(CHAINMULTADD,17813)@754 + 5
    // out q@760
    assign i_mul65_12_cnn1234_im0_cma_reset = ~ (resetn);
    assign i_mul65_12_cnn1234_im0_cma_ena0 = 1'b1;
    assign i_mul65_12_cnn1234_im0_cma_ena1 = i_mul65_12_cnn1234_im0_cma_ena0;
    assign i_mul65_12_cnn1234_im0_cma_ena2 = i_mul65_12_cnn1234_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_im0_cma_ah[0] <= i_mul65_12_cnn1234_bjA2_q;
        end
    end

    assign i_mul65_12_cnn1234_im0_cma_a0 = i_mul65_12_cnn1234_im0_cma_ah[0];
    assign i_mul65_12_cnn1234_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_12_cnn1234_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_12_cnn1234_im0_cma_ena2, i_mul65_12_cnn1234_im0_cma_ena1, i_mul65_12_cnn1234_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_12_cnn1234_im0_cma_a0),
        .coefsela(i_mul65_12_cnn1234_im0_cma_c0),
        .resulta(i_mul65_12_cnn1234_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_12_cnn1234_im0_cma_delay ( .xin(i_mul65_12_cnn1234_im0_cma_s0), .xout(i_mul65_12_cnn1234_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_12_cnn1234_im0_cma_q = i_mul65_12_cnn1234_im0_cma_qq[21:0];

    // redist55_i_mul65_12_cnn1234_im0_cma_q_1(DELAY,17972)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist55_i_mul65_12_cnn1234_im0_cma_q_1_q <= i_mul65_12_cnn1234_im0_cma_q;
        end
    end

    // i_mul65_12_cnn1234_sums_align_5(BITSHIFT,2861)@761
    assign i_mul65_12_cnn1234_sums_align_5_qint = { redist55_i_mul65_12_cnn1234_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_12_cnn1234_sums_align_5_q = i_mul65_12_cnn1234_sums_align_5_qint[74:0];

    // i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11303)@761
    assign i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_12_cnn1234_sums_align_5_q[69:0];

    // i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11290)@761
    assign i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_12_cnn1234_sums_align_3_q[64:64];

    // i_mul65_12_cnn1234_bjA7(BITJOIN,2843)@754
    assign i_mul65_12_cnn1234_bjA7_q = {GND_q, i_mul65_12_cnn1234_bs1_merged_bit_select_c};

    // i_mul65_12_cnn1234_im5_cma(CHAINMULTADD,17814)@754 + 5
    // out q@760
    assign i_mul65_12_cnn1234_im5_cma_reset = ~ (resetn);
    assign i_mul65_12_cnn1234_im5_cma_ena0 = 1'b1;
    assign i_mul65_12_cnn1234_im5_cma_ena1 = i_mul65_12_cnn1234_im5_cma_ena0;
    assign i_mul65_12_cnn1234_im5_cma_ena2 = i_mul65_12_cnn1234_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_im5_cma_ah[0] <= i_mul65_12_cnn1234_bjA7_q;
        end
    end

    assign i_mul65_12_cnn1234_im5_cma_a0 = i_mul65_12_cnn1234_im5_cma_ah[0];
    assign i_mul65_12_cnn1234_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_12_cnn1234_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_12_cnn1234_im5_cma_ena2, i_mul65_12_cnn1234_im5_cma_ena1, i_mul65_12_cnn1234_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_12_cnn1234_im5_cma_a0),
        .coefsela(i_mul65_12_cnn1234_im5_cma_c0),
        .resulta(i_mul65_12_cnn1234_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_12_cnn1234_im5_cma_delay ( .xin(i_mul65_12_cnn1234_im5_cma_s0), .xout(i_mul65_12_cnn1234_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_12_cnn1234_im5_cma_q = i_mul65_12_cnn1234_im5_cma_qq[29:0];

    // redist54_i_mul65_12_cnn1234_im5_cma_q_1(DELAY,17971)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist54_i_mul65_12_cnn1234_im5_cma_q_1_q <= i_mul65_12_cnn1234_im5_cma_q;
        end
    end

    // i_mul65_12_cnn1234_sums_align_3(BITSHIFT,2859)@761
    assign i_mul65_12_cnn1234_sums_align_3_qint = { redist54_i_mul65_12_cnn1234_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_12_cnn1234_sums_align_3_q = i_mul65_12_cnn1234_sums_align_3_qint[64:0];

    // i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11295)@761
    assign i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_align_3_q};

    // i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2(ADD,9282)@761 + 1
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_q = i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11309)@762
    assign i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_12_cnn1234_sums_result_add_0_0_q[47:47];

    // i_mul65_12_cnn1234_bjA12(BITJOIN,2848)@754
    assign i_mul65_12_cnn1234_bjA12_q = {GND_q, i_mul65_12_cnn1234_bs1_merged_bit_select_d};

    // i_mul65_12_cnn1234_im10_cma(CHAINMULTADD,17815)@754 + 5
    // out q@760
    assign i_mul65_12_cnn1234_im10_cma_reset = ~ (resetn);
    assign i_mul65_12_cnn1234_im10_cma_ena0 = 1'b1;
    assign i_mul65_12_cnn1234_im10_cma_ena1 = i_mul65_12_cnn1234_im10_cma_ena0;
    assign i_mul65_12_cnn1234_im10_cma_ena2 = i_mul65_12_cnn1234_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_im10_cma_ah[0] <= i_mul65_12_cnn1234_bjA12_q;
        end
    end

    assign i_mul65_12_cnn1234_im10_cma_a0 = i_mul65_12_cnn1234_im10_cma_ah[0];
    assign i_mul65_12_cnn1234_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_12_cnn1234_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_12_cnn1234_im10_cma_ena2, i_mul65_12_cnn1234_im10_cma_ena1, i_mul65_12_cnn1234_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_12_cnn1234_im10_cma_a0),
        .coefsela(i_mul65_12_cnn1234_im10_cma_c0),
        .resulta(i_mul65_12_cnn1234_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_12_cnn1234_im10_cma_delay ( .xin(i_mul65_12_cnn1234_im10_cma_s0), .xout(i_mul65_12_cnn1234_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_12_cnn1234_im10_cma_q = i_mul65_12_cnn1234_im10_cma_qq[29:0];

    // redist53_i_mul65_12_cnn1234_im10_cma_q_1(DELAY,17970)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist53_i_mul65_12_cnn1234_im10_cma_q_1_q <= i_mul65_12_cnn1234_im10_cma_q;
        end
    end

    // i_mul65_12_cnn1234_sums_align_1(BITSHIFT,2857)@761
    assign i_mul65_12_cnn1234_sums_align_1_qint = { redist53_i_mul65_12_cnn1234_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_12_cnn1234_sums_align_1_q = i_mul65_12_cnn1234_sums_align_1_qint[46:0];

    // i_mul65_12_cnn1234_bjA17(BITJOIN,2853)@754
    assign i_mul65_12_cnn1234_bjA17_q = {GND_q, i_mul65_12_cnn1234_bs1_merged_bit_select_e};

    // i_mul65_12_cnn1234_im15_cma(CHAINMULTADD,17816)@754 + 5
    // out q@760
    assign i_mul65_12_cnn1234_im15_cma_reset = ~ (resetn);
    assign i_mul65_12_cnn1234_im15_cma_ena0 = 1'b1;
    assign i_mul65_12_cnn1234_im15_cma_ena1 = i_mul65_12_cnn1234_im15_cma_ena0;
    assign i_mul65_12_cnn1234_im15_cma_ena2 = i_mul65_12_cnn1234_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_im15_cma_ah[0] <= i_mul65_12_cnn1234_bjA17_q;
        end
    end

    assign i_mul65_12_cnn1234_im15_cma_a0 = i_mul65_12_cnn1234_im15_cma_ah[0];
    assign i_mul65_12_cnn1234_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_12_cnn1234_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_12_cnn1234_im15_cma_ena2, i_mul65_12_cnn1234_im15_cma_ena1, i_mul65_12_cnn1234_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_12_cnn1234_im15_cma_a0),
        .coefsela(i_mul65_12_cnn1234_im15_cma_c0),
        .resulta(i_mul65_12_cnn1234_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_12_cnn1234_im15_cma_delay ( .xin(i_mul65_12_cnn1234_im15_cma_s0), .xout(i_mul65_12_cnn1234_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_12_cnn1234_im15_cma_q = i_mul65_12_cnn1234_im15_cma_qq[29:0];

    // redist52_i_mul65_12_cnn1234_im15_cma_q_1(DELAY,17969)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist52_i_mul65_12_cnn1234_im15_cma_q_1_q <= i_mul65_12_cnn1234_im15_cma_q;
        end
    end

    // i_mul65_12_cnn1234_sums_result_add_0_0(ADD,2863)@761 + 1
    assign i_mul65_12_cnn1234_sums_result_add_0_0_a = {{18{redist52_i_mul65_12_cnn1234_im15_cma_q_1_q[29]}}, redist52_i_mul65_12_cnn1234_im15_cma_q_1_q};
    assign i_mul65_12_cnn1234_sums_result_add_0_0_b = {{1{i_mul65_12_cnn1234_sums_align_1_q[46]}}, i_mul65_12_cnn1234_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_sums_result_add_0_0_o <= $signed(i_mul65_12_cnn1234_sums_result_add_0_0_a) + $signed(i_mul65_12_cnn1234_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_12_cnn1234_sums_result_add_0_0_q = i_mul65_12_cnn1234_sums_result_add_0_0_o[47:0];

    // i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11331)@762
    assign i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_12_cnn1234_sums_result_add_0_0_q};

    // i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2(ADD,9293)@762 + 1
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_q = i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11343)@763
    assign i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11306)@761
    assign i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_12_cnn1234_sums_align_5_q[74:74];

    // redist556_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18473)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist556_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11305)@761
    assign i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_12_cnn1234_sums_align_5_q[74:70];

    // redist557_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18474)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist557_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11307)@762
    assign i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist556_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist557_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18475)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11302)@762
    assign i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist558_i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2(ADD,9283)@762 + 1
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_cin = i_mul65_12_cnn1234_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_12_cnn1234_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_q = i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11344)@763
    assign i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_12_cnn1234_sums_result_add_0_1_p2_of_2_q};

    // redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18466)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11339)@763
    assign i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist549_i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2(ADD,9294)@763 + 1
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_cin = i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_12_cnn1234_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_q = i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist752_i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_q_1(DELAY,18669)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist752_i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_12_cnn1234_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9295)@764
    assign i_mul65_12_cnn1234_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_12_cnn1234_sums_result_add_1_0_p2_of_2_q, redist752_i_mul65_12_cnn1234_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_12_cnn1234_extender_x(BITJOIN,2719)@764
    assign i_mul65_12_cnn1234_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_12_cnn1234_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_12_cnn1234_sel_x(BITSELECT,1049)@764
    assign bgTrunc_i_mul65_12_cnn1234_sel_x_b = i_mul65_12_cnn1234_extender_x_q[63:0];

    // i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select(BITSELECT,17910)@764
    assign i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_12_cnn1234_sel_x_b[63:54];
    assign i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_12_cnn1234_sel_x_b[53:36];
    assign i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_12_cnn1234_sel_x_b[35:18];
    assign i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_12_cnn1234_sel_x_b[17:0];

    // i_add_ptr66_12_cnn1239_mult_x_bjA2(BITJOIN,3348)@764
    assign i_add_ptr66_12_cnn1239_mult_x_bjA2_q = {GND_q, i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_12_cnn1239_mult_x_im0_shift0(BITSHIFT,8148)@764
    assign i_add_ptr66_12_cnn1239_mult_x_im0_shift0_qint = { i_add_ptr66_12_cnn1239_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_12_cnn1239_mult_x_im0_shift0_q = i_add_ptr66_12_cnn1239_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_align_5(BITSHIFT,3371)@764
    assign i_add_ptr66_12_cnn1239_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_12_cnn1239_mult_x_im0_shift0_q[12]}}, i_add_ptr66_12_cnn1239_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_12_cnn1239_mult_x_sums_align_5_q = i_add_ptr66_12_cnn1239_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_12_cnn1239_mult_x_bjA7(BITJOIN,3353)@764
    assign i_add_ptr66_12_cnn1239_mult_x_bjA7_q = {GND_q, i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_12_cnn1239_mult_x_im5_shift0(BITSHIFT,8149)@764
    assign i_add_ptr66_12_cnn1239_mult_x_im5_shift0_qint = { i_add_ptr66_12_cnn1239_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_12_cnn1239_mult_x_im5_shift0_q = i_add_ptr66_12_cnn1239_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_align_3(BITSHIFT,3369)@764
    assign i_add_ptr66_12_cnn1239_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_12_cnn1239_mult_x_im5_shift0_q[20]}}, i_add_ptr66_12_cnn1239_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_12_cnn1239_mult_x_sums_align_3_q = i_add_ptr66_12_cnn1239_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1(ADD,3374)@764 + 1
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_12_cnn1239_mult_x_sums_align_3_q[58]}}, i_add_ptr66_12_cnn1239_mult_x_sums_align_3_q};
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_12_cnn1239_mult_x_sums_align_5_q[68]}}, i_add_ptr66_12_cnn1239_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_q = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12182)@765
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_12_cnn1239_mult_x_bjA12(BITJOIN,3358)@764
    assign i_add_ptr66_12_cnn1239_mult_x_bjA12_q = {GND_q, i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_12_cnn1239_mult_x_im10_shift0(BITSHIFT,8150)@764
    assign i_add_ptr66_12_cnn1239_mult_x_im10_shift0_qint = { i_add_ptr66_12_cnn1239_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_12_cnn1239_mult_x_im10_shift0_q = i_add_ptr66_12_cnn1239_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_align_1(BITSHIFT,3367)@764
    assign i_add_ptr66_12_cnn1239_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_12_cnn1239_mult_x_im10_shift0_q[20]}}, i_add_ptr66_12_cnn1239_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_12_cnn1239_mult_x_sums_align_1_q = i_add_ptr66_12_cnn1239_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_12_cnn1239_mult_x_bjA17(BITJOIN,3363)@764
    assign i_add_ptr66_12_cnn1239_mult_x_bjA17_q = {GND_q, i_add_ptr66_12_cnn1239_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_12_cnn1239_mult_x_im15_shift0(BITSHIFT,8151)@764
    assign i_add_ptr66_12_cnn1239_mult_x_im15_shift0_qint = { i_add_ptr66_12_cnn1239_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_12_cnn1239_mult_x_im15_shift0_q = i_add_ptr66_12_cnn1239_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0(ADD,3373)@764 + 1
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_12_cnn1239_mult_x_im15_shift0_q[20]}}, i_add_ptr66_12_cnn1239_mult_x_im15_shift0_q};
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_12_cnn1239_mult_x_sums_align_1_q[40]}}, i_add_ptr66_12_cnn1239_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_q = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12210)@765
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2(ADD,9623)@765 + 1
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12215)@765
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_0_1_q[69:69];

    // redist346_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18263)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist346_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist347_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18264)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist347_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2(ADD,9624)@766 + 1
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist347_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist347_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist346_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist346_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist735_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18652)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist735_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9625)@767
    assign i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p2_of_2_q, redist735_i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_12_cnn1239_mult_extender_x(BITJOIN,1297)@767
    assign i_add_ptr66_12_cnn1239_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_12_cnn1239_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_12_cnn1239_trunc_sel_x(BITSELECT,1299)@767
    assign i_add_ptr66_12_cnn1239_trunc_sel_x_b = i_add_ptr66_12_cnn1239_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235(BLACKBOX,690)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_1236 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_select_63(BITSELECT,693)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_join(BITJOIN,692)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_12_cnn1239_add_x(ADD,1291)@767
    assign i_add_ptr66_12_cnn1239_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer16_cnn1235_vt_join_q};
    assign i_add_ptr66_12_cnn1239_add_x_b = {1'b0, i_add_ptr66_12_cnn1239_trunc_sel_x_b};
    assign i_add_ptr66_12_cnn1239_add_x_o = $unsigned(i_add_ptr66_12_cnn1239_add_x_a) + $unsigned(i_add_ptr66_12_cnn1239_add_x_b);
    assign i_add_ptr66_12_cnn1239_add_x_q = i_add_ptr66_12_cnn1239_add_x_o[64:0];

    // i_add_ptr66_12_cnn1239_dupName_0_trunc_sel_x(BITSELECT,1300)@767
    assign i_add_ptr66_12_cnn1239_dupName_0_trunc_sel_x_b = i_add_ptr66_12_cnn1239_add_x_q[63:0];

    // i_add_ptr66_12_cnn1238_vt_select_63(BITSELECT,60)@767
    assign i_add_ptr66_12_cnn1238_vt_select_63_b = i_add_ptr66_12_cnn1239_dupName_0_trunc_sel_x_b[63:2];

    // redist876_i_add_ptr66_12_cnn1238_vt_select_63_b_1(DELAY,18793)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist876_i_add_ptr66_12_cnn1238_vt_select_63_b_1_q <= i_add_ptr66_12_cnn1238_vt_select_63_b;
        end
    end

    // i_add_ptr66_12_cnn1238_vt_join(BITJOIN,59)@768
    assign i_add_ptr66_12_cnn1238_vt_join_q = {redist876_i_add_ptr66_12_cnn1238_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_12_cnn1265_add_x(ADD,1861)@768
    assign i_add_ptr70_3_12_cnn1265_add_x_a = {1'b0, i_add_ptr66_12_cnn1238_vt_join_q};
    assign i_add_ptr70_3_12_cnn1265_add_x_b = {1'b0, i_add_ptr70_3_12_cnn1265_trunc_sel_x_b};
    assign i_add_ptr70_3_12_cnn1265_add_x_o = $unsigned(i_add_ptr70_3_12_cnn1265_add_x_a) + $unsigned(i_add_ptr70_3_12_cnn1265_add_x_b);
    assign i_add_ptr70_3_12_cnn1265_add_x_q = i_add_ptr70_3_12_cnn1265_add_x_o[64:0];

    // i_add_ptr70_3_12_cnn1265_dupName_0_trunc_sel_x(BITSELECT,1870)@768
    assign i_add_ptr70_3_12_cnn1265_dupName_0_trunc_sel_x_b = i_add_ptr70_3_12_cnn1265_add_x_q[63:0];

    // i_add_ptr70_3_12_cnn1264_vt_select_63(BITSELECT,231)@768
    assign i_add_ptr70_3_12_cnn1264_vt_select_63_b = i_add_ptr70_3_12_cnn1265_dupName_0_trunc_sel_x_b[63:2];

    // redist819_i_add_ptr70_3_12_cnn1264_vt_select_63_b_1(DELAY,18736)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist819_i_add_ptr70_3_12_cnn1264_vt_select_63_b_1_q <= i_add_ptr70_3_12_cnn1264_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_12_cnn1264_vt_join(BITJOIN,230)@769
    assign i_add_ptr70_3_12_cnn1264_vt_join_q = {redist819_i_add_ptr70_3_12_cnn1264_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_12_cnn1267_add_x(ADD,2501)@769
    assign i_add_ptr73_371_12_cnn1267_add_x_a = {1'b0, i_add_ptr70_3_12_cnn1264_vt_join_q};
    assign i_add_ptr73_371_12_cnn1267_add_x_b = {1'b0, i_add_ptr73_371_12_cnn1267_trunc_sel_x_b};
    assign i_add_ptr73_371_12_cnn1267_add_x_o = $unsigned(i_add_ptr73_371_12_cnn1267_add_x_a) + $unsigned(i_add_ptr73_371_12_cnn1267_add_x_b);
    assign i_add_ptr73_371_12_cnn1267_add_x_q = i_add_ptr73_371_12_cnn1267_add_x_o[64:0];

    // i_add_ptr73_371_12_cnn1267_dupName_0_trunc_sel_x(BITSELECT,2510)@769
    assign i_add_ptr73_371_12_cnn1267_dupName_0_trunc_sel_x_b = i_add_ptr73_371_12_cnn1267_add_x_q[63:0];

    // i_add_ptr73_371_12_cnn1266_vt_select_63(BITSELECT,423)@769
    assign i_add_ptr73_371_12_cnn1266_vt_select_63_b = i_add_ptr73_371_12_cnn1267_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_12_cnn1266_vt_join(BITJOIN,422)@769
    assign i_add_ptr73_371_12_cnn1266_vt_join_q = {i_add_ptr73_371_12_cnn1266_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_select_63(BITSELECT,918)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_select_63_b = i_add_ptr73_371_12_cnn1266_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_join(BITJOIN,917)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn159_cnn1261(BLACKBOX,623)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_159_cnn1262 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn159_cnn1261 (
        .in_intel_reserved_ffwd_78_0(in_intel_reserved_ffwd_78_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_78_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn159_cnn1261_out_dest_data_out_78_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0(BITSHIFT,8560)@766
    assign i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0_q = i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5(BITSHIFT,6461)@766
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_12_cnn1259_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5_q = i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0(BITSHIFT,8561)@766
    assign i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0_q = i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3(BITSHIFT,6459)@766
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_12_cnn1259_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3_q = i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1(ADD,6464)@766 + 1
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_12_cnn1259_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_12_cnn1259_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15890)@767
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0(BITSHIFT,8562)@766
    assign i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0_q = i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1(BITSHIFT,6457)@766
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_12_cnn1259_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1_q = i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0(BITSHIFT,8563)@766
    assign i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0_q = i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0(ADD,6463)@766 + 1
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_12_cnn1259_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_12_cnn1259_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15918)@767
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2(ADD,10756)@767 + 1
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15923)@767
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_0_1_q[69:69];

    // redist140_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18057)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist140_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist141_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18058)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist141_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2(ADD,10757)@768 + 1
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist141_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist141_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist140_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist140_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist632_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18549)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist632_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10758)@769
    assign i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p2_of_2_q, redist632_i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_12_cnn1259_mult_extender_x(BITJOIN,2327)@769
    assign i_add_ptr73_270_12_cnn1259_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_12_cnn1259_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_12_cnn1259_trunc_sel_x(BITSELECT,2329)@769
    assign i_add_ptr73_270_12_cnn1259_trunc_sel_x_b = i_add_ptr73_270_12_cnn1259_mult_extender_x_q[63:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0(BITSHIFT,8308)@765
    assign i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0_q = i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5(BITSHIFT,4571)@765
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_12_cnn1257_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5_q = i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0(BITSHIFT,8309)@765
    assign i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0_q = i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3(BITSHIFT,4569)@765
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_12_cnn1257_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3_q = i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1(ADD,4574)@765 + 1
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_12_cnn1257_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_12_cnn1257_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13622)@766
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0(BITSHIFT,8310)@765
    assign i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0_q = i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1(BITSHIFT,4567)@765
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_12_cnn1257_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1_q = i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0(BITSHIFT,8311)@765
    assign i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0_q = i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0(ADD,4573)@765 + 1
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_12_cnn1257_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_12_cnn1257_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13650)@766
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2(ADD,10063)@766 + 1
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13655)@766
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_0_1_q[69:69];

    // redist266_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18183)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist266_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist267_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18184)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist267_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2(ADD,10064)@767 + 1
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist267_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist267_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist266_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist266_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist695_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18612)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist695_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10065)@768
    assign i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p2_of_2_q, redist695_i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_12_cnn1257_mult_extender_x(BITJOIN,1697)@768
    assign i_add_ptr70_2_12_cnn1257_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_12_cnn1257_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_12_cnn1257_trunc_sel_x(BITSELECT,1699)@768
    assign i_add_ptr70_2_12_cnn1257_trunc_sel_x_b = i_add_ptr70_2_12_cnn1257_mult_extender_x_q[63:0];

    // i_add_ptr70_2_12_cnn1257_add_x(ADD,1691)@768
    assign i_add_ptr70_2_12_cnn1257_add_x_a = {1'b0, i_add_ptr66_12_cnn1238_vt_join_q};
    assign i_add_ptr70_2_12_cnn1257_add_x_b = {1'b0, i_add_ptr70_2_12_cnn1257_trunc_sel_x_b};
    assign i_add_ptr70_2_12_cnn1257_add_x_o = $unsigned(i_add_ptr70_2_12_cnn1257_add_x_a) + $unsigned(i_add_ptr70_2_12_cnn1257_add_x_b);
    assign i_add_ptr70_2_12_cnn1257_add_x_q = i_add_ptr70_2_12_cnn1257_add_x_o[64:0];

    // i_add_ptr70_2_12_cnn1257_dupName_0_trunc_sel_x(BITSELECT,1700)@768
    assign i_add_ptr70_2_12_cnn1257_dupName_0_trunc_sel_x_b = i_add_ptr70_2_12_cnn1257_add_x_q[63:0];

    // i_add_ptr70_2_12_cnn1256_vt_select_63(BITSELECT,180)@768
    assign i_add_ptr70_2_12_cnn1256_vt_select_63_b = i_add_ptr70_2_12_cnn1257_dupName_0_trunc_sel_x_b[63:2];

    // redist836_i_add_ptr70_2_12_cnn1256_vt_select_63_b_1(DELAY,18753)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist836_i_add_ptr70_2_12_cnn1256_vt_select_63_b_1_q <= i_add_ptr70_2_12_cnn1256_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_12_cnn1256_vt_join(BITJOIN,179)@769
    assign i_add_ptr70_2_12_cnn1256_vt_join_q = {redist836_i_add_ptr70_2_12_cnn1256_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_12_cnn1259_add_x(ADD,2321)@769
    assign i_add_ptr73_270_12_cnn1259_add_x_a = {1'b0, i_add_ptr70_2_12_cnn1256_vt_join_q};
    assign i_add_ptr73_270_12_cnn1259_add_x_b = {1'b0, i_add_ptr73_270_12_cnn1259_trunc_sel_x_b};
    assign i_add_ptr73_270_12_cnn1259_add_x_o = $unsigned(i_add_ptr73_270_12_cnn1259_add_x_a) + $unsigned(i_add_ptr73_270_12_cnn1259_add_x_b);
    assign i_add_ptr73_270_12_cnn1259_add_x_q = i_add_ptr73_270_12_cnn1259_add_x_o[64:0];

    // i_add_ptr73_270_12_cnn1259_dupName_0_trunc_sel_x(BITSELECT,2330)@769
    assign i_add_ptr73_270_12_cnn1259_dupName_0_trunc_sel_x_b = i_add_ptr73_270_12_cnn1259_add_x_q[63:0];

    // i_add_ptr73_270_12_cnn1258_vt_select_63(BITSELECT,369)@769
    assign i_add_ptr73_270_12_cnn1258_vt_select_63_b = i_add_ptr73_270_12_cnn1259_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_12_cnn1258_vt_join(BITJOIN,368)@769
    assign i_add_ptr73_270_12_cnn1258_vt_join_q = {i_add_ptr73_270_12_cnn1258_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_select_63(BITSELECT,914)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_select_63_b = i_add_ptr73_270_12_cnn1258_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_join(BITJOIN,913)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn158_cnn1253(BLACKBOX,622)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_158_cnn1254 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn158_cnn1253 (
        .in_intel_reserved_ffwd_77_0(in_intel_reserved_ffwd_77_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_77_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn158_cnn1253_out_dest_data_out_77_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0(BITSHIFT,8492)@766
    assign i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0_q = i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5(BITSHIFT,5951)@766
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_12_cnn1251_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5_q = i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0(BITSHIFT,8493)@766
    assign i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0_q = i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3(BITSHIFT,5949)@766
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_12_cnn1251_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3_q = i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1(ADD,5954)@766 + 1
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_12_cnn1251_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_12_cnn1251_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15278)@767
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0(BITSHIFT,8494)@766
    assign i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0_q = i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1(BITSHIFT,5947)@766
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_12_cnn1251_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1_q = i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0(BITSHIFT,8495)@766
    assign i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0_q = i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0(ADD,5953)@766 + 1
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_12_cnn1251_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_12_cnn1251_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15306)@767
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2(ADD,10569)@767 + 1
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15311)@767
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_0_1_q[69:69];

    // redist174_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18091)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist174_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist175_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18092)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist175_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2(ADD,10570)@768 + 1
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist175_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist175_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist174_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist174_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist649_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18566)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist649_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10571)@769
    assign i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p2_of_2_q, redist649_i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_12_cnn1251_mult_extender_x(BITJOIN,2157)@769
    assign i_add_ptr73_169_12_cnn1251_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_12_cnn1251_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_12_cnn1251_trunc_sel_x(BITSELECT,2159)@769
    assign i_add_ptr73_169_12_cnn1251_trunc_sel_x_b = i_add_ptr73_169_12_cnn1251_mult_extender_x_q[63:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0(BITSHIFT,8240)@765
    assign i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0_q = i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5(BITSHIFT,4061)@765
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_12_cnn1249_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5_q = i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0(BITSHIFT,8241)@765
    assign i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0_q = i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3(BITSHIFT,4059)@765
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_12_cnn1249_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3_q = i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1(ADD,4064)@765 + 1
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_12_cnn1249_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_12_cnn1249_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13010)@766
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0(BITSHIFT,8242)@765
    assign i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0_q = i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1(BITSHIFT,4057)@765
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_12_cnn1249_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1_q = i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0(BITSHIFT,8243)@765
    assign i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0_q = i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0(ADD,4063)@765 + 1
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_12_cnn1249_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_12_cnn1249_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13038)@766
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2(ADD,9876)@766 + 1
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13043)@766
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_0_1_q[69:69];

    // redist300_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18217)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist300_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist301_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18218)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist301_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2(ADD,9877)@767 + 1
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist301_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist301_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist300_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist300_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist712_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18629)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist712_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9878)@768
    assign i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p2_of_2_q, redist712_i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_12_cnn1249_mult_extender_x(BITJOIN,1527)@768
    assign i_add_ptr70_1_12_cnn1249_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_12_cnn1249_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_12_cnn1249_trunc_sel_x(BITSELECT,1529)@768
    assign i_add_ptr70_1_12_cnn1249_trunc_sel_x_b = i_add_ptr70_1_12_cnn1249_mult_extender_x_q[63:0];

    // i_add_ptr70_1_12_cnn1249_add_x(ADD,1521)@768
    assign i_add_ptr70_1_12_cnn1249_add_x_a = {1'b0, i_add_ptr66_12_cnn1238_vt_join_q};
    assign i_add_ptr70_1_12_cnn1249_add_x_b = {1'b0, i_add_ptr70_1_12_cnn1249_trunc_sel_x_b};
    assign i_add_ptr70_1_12_cnn1249_add_x_o = $unsigned(i_add_ptr70_1_12_cnn1249_add_x_a) + $unsigned(i_add_ptr70_1_12_cnn1249_add_x_b);
    assign i_add_ptr70_1_12_cnn1249_add_x_q = i_add_ptr70_1_12_cnn1249_add_x_o[64:0];

    // i_add_ptr70_1_12_cnn1249_dupName_0_trunc_sel_x(BITSELECT,1530)@768
    assign i_add_ptr70_1_12_cnn1249_dupName_0_trunc_sel_x_b = i_add_ptr70_1_12_cnn1249_add_x_q[63:0];

    // i_add_ptr70_1_12_cnn1248_vt_select_63(BITSELECT,129)@768
    assign i_add_ptr70_1_12_cnn1248_vt_select_63_b = i_add_ptr70_1_12_cnn1249_dupName_0_trunc_sel_x_b[63:2];

    // redist853_i_add_ptr70_1_12_cnn1248_vt_select_63_b_1(DELAY,18770)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist853_i_add_ptr70_1_12_cnn1248_vt_select_63_b_1_q <= i_add_ptr70_1_12_cnn1248_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_12_cnn1248_vt_join(BITJOIN,128)@769
    assign i_add_ptr70_1_12_cnn1248_vt_join_q = {redist853_i_add_ptr70_1_12_cnn1248_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_12_cnn1251_add_x(ADD,2151)@769
    assign i_add_ptr73_169_12_cnn1251_add_x_a = {1'b0, i_add_ptr70_1_12_cnn1248_vt_join_q};
    assign i_add_ptr73_169_12_cnn1251_add_x_b = {1'b0, i_add_ptr73_169_12_cnn1251_trunc_sel_x_b};
    assign i_add_ptr73_169_12_cnn1251_add_x_o = $unsigned(i_add_ptr73_169_12_cnn1251_add_x_a) + $unsigned(i_add_ptr73_169_12_cnn1251_add_x_b);
    assign i_add_ptr73_169_12_cnn1251_add_x_q = i_add_ptr73_169_12_cnn1251_add_x_o[64:0];

    // i_add_ptr73_169_12_cnn1251_dupName_0_trunc_sel_x(BITSELECT,2160)@769
    assign i_add_ptr73_169_12_cnn1251_dupName_0_trunc_sel_x_b = i_add_ptr73_169_12_cnn1251_add_x_q[63:0];

    // i_add_ptr73_169_12_cnn1250_vt_select_63(BITSELECT,318)@769
    assign i_add_ptr73_169_12_cnn1250_vt_select_63_b = i_add_ptr73_169_12_cnn1251_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_12_cnn1250_vt_join(BITJOIN,317)@769
    assign i_add_ptr73_169_12_cnn1250_vt_join_q = {i_add_ptr73_169_12_cnn1250_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_select_63(BITSELECT,910)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_select_63_b = i_add_ptr73_169_12_cnn1250_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_join(BITJOIN,909)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn157_cnn1245(BLACKBOX,621)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_157_cnn1246 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn157_cnn1245 (
        .in_intel_reserved_ffwd_76_0(in_intel_reserved_ffwd_76_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_76_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn157_cnn1245_out_dest_data_out_76_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_12_cnn1243_mult_x_im0_shift0(BITSHIFT,8468)@766
    assign i_add_ptr73_12_cnn1243_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_12_cnn1243_mult_x_im0_shift0_q = i_add_ptr73_12_cnn1243_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_align_5(BITSHIFT,5771)@766
    assign i_add_ptr73_12_cnn1243_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_12_cnn1243_mult_x_im0_shift0_q[12]}}, i_add_ptr73_12_cnn1243_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_12_cnn1243_mult_x_sums_align_5_q = i_add_ptr73_12_cnn1243_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_12_cnn1243_mult_x_im5_shift0(BITSHIFT,8469)@766
    assign i_add_ptr73_12_cnn1243_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_12_cnn1243_mult_x_im5_shift0_q = i_add_ptr73_12_cnn1243_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_align_3(BITSHIFT,5769)@766
    assign i_add_ptr73_12_cnn1243_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_12_cnn1243_mult_x_im5_shift0_q[20]}}, i_add_ptr73_12_cnn1243_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_12_cnn1243_mult_x_sums_align_3_q = i_add_ptr73_12_cnn1243_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1(ADD,5774)@766 + 1
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_12_cnn1243_mult_x_sums_align_3_q[58]}}, i_add_ptr73_12_cnn1243_mult_x_sums_align_3_q};
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_12_cnn1243_mult_x_sums_align_5_q[68]}}, i_add_ptr73_12_cnn1243_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_q = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15062)@767
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_12_cnn1243_mult_x_im10_shift0(BITSHIFT,8470)@766
    assign i_add_ptr73_12_cnn1243_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_12_cnn1243_mult_x_im10_shift0_q = i_add_ptr73_12_cnn1243_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_align_1(BITSHIFT,5767)@766
    assign i_add_ptr73_12_cnn1243_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_12_cnn1243_mult_x_im10_shift0_q[20]}}, i_add_ptr73_12_cnn1243_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_12_cnn1243_mult_x_sums_align_1_q = i_add_ptr73_12_cnn1243_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_12_cnn1243_mult_x_im15_shift0(BITSHIFT,8471)@766
    assign i_add_ptr73_12_cnn1243_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_12_cnn1243_mult_x_im15_shift0_q = i_add_ptr73_12_cnn1243_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0(ADD,5773)@766 + 1
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_12_cnn1243_mult_x_im15_shift0_q[20]}}, i_add_ptr73_12_cnn1243_mult_x_im15_shift0_q};
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_12_cnn1243_mult_x_sums_align_1_q[40]}}, i_add_ptr73_12_cnn1243_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_q = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15090)@767
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2(ADD,10503)@767 + 1
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15095)@767
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_0_1_q[69:69];

    // redist186_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18103)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist186_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist187_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18104)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist187_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2(ADD,10504)@768 + 1
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist187_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist187_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist186_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist186_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist655_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18572)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist655_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10505)@769
    assign i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p2_of_2_q, redist655_i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_12_cnn1243_mult_extender_x(BITJOIN,2097)@769
    assign i_add_ptr73_12_cnn1243_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_12_cnn1243_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_12_cnn1243_trunc_sel_x(BITSELECT,2099)@769
    assign i_add_ptr73_12_cnn1243_trunc_sel_x_b = i_add_ptr73_12_cnn1243_mult_extender_x_q[63:0];

    // i_add_ptr70_12_cnn1241_mult_x_im0_shift0(BITSHIFT,8212)@765
    assign i_add_ptr70_12_cnn1241_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_12_cnn1241_mult_x_im0_shift0_q = i_add_ptr70_12_cnn1241_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_align_5(BITSHIFT,3851)@765
    assign i_add_ptr70_12_cnn1241_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_12_cnn1241_mult_x_im0_shift0_q[12]}}, i_add_ptr70_12_cnn1241_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_12_cnn1241_mult_x_sums_align_5_q = i_add_ptr70_12_cnn1241_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_12_cnn1241_mult_x_im5_shift0(BITSHIFT,8213)@765
    assign i_add_ptr70_12_cnn1241_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_12_cnn1241_mult_x_im5_shift0_q = i_add_ptr70_12_cnn1241_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_align_3(BITSHIFT,3849)@765
    assign i_add_ptr70_12_cnn1241_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_12_cnn1241_mult_x_im5_shift0_q[20]}}, i_add_ptr70_12_cnn1241_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_12_cnn1241_mult_x_sums_align_3_q = i_add_ptr70_12_cnn1241_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1(ADD,3854)@765 + 1
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_12_cnn1241_mult_x_sums_align_3_q[58]}}, i_add_ptr70_12_cnn1241_mult_x_sums_align_3_q};
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_12_cnn1241_mult_x_sums_align_5_q[68]}}, i_add_ptr70_12_cnn1241_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_q = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12758)@766
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_12_cnn1241_mult_x_im10_shift0(BITSHIFT,8214)@765
    assign i_add_ptr70_12_cnn1241_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_12_cnn1241_mult_x_im10_shift0_q = i_add_ptr70_12_cnn1241_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_align_1(BITSHIFT,3847)@765
    assign i_add_ptr70_12_cnn1241_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_12_cnn1241_mult_x_im10_shift0_q[20]}}, i_add_ptr70_12_cnn1241_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_12_cnn1241_mult_x_sums_align_1_q = i_add_ptr70_12_cnn1241_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_12_cnn1241_mult_x_im15_shift0(BITSHIFT,8215)@765
    assign i_add_ptr70_12_cnn1241_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_12_cnn1241_mult_x_im15_shift0_q = i_add_ptr70_12_cnn1241_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0(ADD,3853)@765 + 1
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_12_cnn1241_mult_x_im15_shift0_q[20]}}, i_add_ptr70_12_cnn1241_mult_x_im15_shift0_q};
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_12_cnn1241_mult_x_sums_align_1_q[40]}}, i_add_ptr70_12_cnn1241_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_q = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12786)@766
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2(ADD,9799)@766 + 1
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12791)@766
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_0_1_q[69:69];

    // redist314_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18231)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist314_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist315_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18232)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist315_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2(ADD,9800)@767 + 1
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist315_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist315_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist314_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist314_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist719_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18636)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist719_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9801)@768
    assign i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p2_of_2_q, redist719_i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_12_cnn1241_mult_extender_x(BITJOIN,1457)@768
    assign i_add_ptr70_12_cnn1241_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_12_cnn1241_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_12_cnn1241_trunc_sel_x(BITSELECT,1459)@768
    assign i_add_ptr70_12_cnn1241_trunc_sel_x_b = i_add_ptr70_12_cnn1241_mult_extender_x_q[63:0];

    // i_add_ptr70_12_cnn1241_add_x(ADD,1451)@768
    assign i_add_ptr70_12_cnn1241_add_x_a = {1'b0, i_add_ptr66_12_cnn1238_vt_join_q};
    assign i_add_ptr70_12_cnn1241_add_x_b = {1'b0, i_add_ptr70_12_cnn1241_trunc_sel_x_b};
    assign i_add_ptr70_12_cnn1241_add_x_o = $unsigned(i_add_ptr70_12_cnn1241_add_x_a) + $unsigned(i_add_ptr70_12_cnn1241_add_x_b);
    assign i_add_ptr70_12_cnn1241_add_x_q = i_add_ptr70_12_cnn1241_add_x_o[64:0];

    // i_add_ptr70_12_cnn1241_dupName_0_trunc_sel_x(BITSELECT,1460)@768
    assign i_add_ptr70_12_cnn1241_dupName_0_trunc_sel_x_b = i_add_ptr70_12_cnn1241_add_x_q[63:0];

    // i_add_ptr70_12_cnn1240_vt_select_63(BITSELECT,108)@768
    assign i_add_ptr70_12_cnn1240_vt_select_63_b = i_add_ptr70_12_cnn1241_dupName_0_trunc_sel_x_b[63:2];

    // redist860_i_add_ptr70_12_cnn1240_vt_select_63_b_1(DELAY,18777)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist860_i_add_ptr70_12_cnn1240_vt_select_63_b_1_q <= i_add_ptr70_12_cnn1240_vt_select_63_b;
        end
    end

    // i_add_ptr70_12_cnn1240_vt_join(BITJOIN,107)@769
    assign i_add_ptr70_12_cnn1240_vt_join_q = {redist860_i_add_ptr70_12_cnn1240_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_12_cnn1243_add_x(ADD,2091)@769
    assign i_add_ptr73_12_cnn1243_add_x_a = {1'b0, i_add_ptr70_12_cnn1240_vt_join_q};
    assign i_add_ptr73_12_cnn1243_add_x_b = {1'b0, i_add_ptr73_12_cnn1243_trunc_sel_x_b};
    assign i_add_ptr73_12_cnn1243_add_x_o = $unsigned(i_add_ptr73_12_cnn1243_add_x_a) + $unsigned(i_add_ptr73_12_cnn1243_add_x_b);
    assign i_add_ptr73_12_cnn1243_add_x_q = i_add_ptr73_12_cnn1243_add_x_o[64:0];

    // i_add_ptr73_12_cnn1243_dupName_0_trunc_sel_x(BITSELECT,2100)@769
    assign i_add_ptr73_12_cnn1243_dupName_0_trunc_sel_x_b = i_add_ptr73_12_cnn1243_add_x_q[63:0];

    // i_add_ptr73_12_cnn1242_vt_select_63(BITSELECT,300)@769
    assign i_add_ptr73_12_cnn1242_vt_select_63_b = i_add_ptr73_12_cnn1243_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_12_cnn1242_vt_join(BITJOIN,299)@769
    assign i_add_ptr73_12_cnn1242_vt_join_q = {i_add_ptr73_12_cnn1242_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_select_63(BITSELECT,902)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_select_63_b = i_add_ptr73_12_cnn1242_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_join(BITJOIN,901)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn156_cnn1230(BLACKBOX,620)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_156_cnn1231 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn156_cnn1230 (
        .in_intel_reserved_ffwd_75_0(in_intel_reserved_ffwd_75_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_75_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn156_cnn1230_out_dest_data_out_75_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0(BITSHIFT,8628)@766
    assign i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0_q = i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5(BITSHIFT,6971)@766
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_11_cnn1228_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5_q = i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0(BITSHIFT,8629)@766
    assign i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0_q = i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3(BITSHIFT,6969)@766
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_11_cnn1228_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3_q = i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1(ADD,6974)@766 + 1
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_11_cnn1228_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_11_cnn1228_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16502)@767
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0(BITSHIFT,8630)@766
    assign i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0_q = i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1(BITSHIFT,6967)@766
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_11_cnn1228_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1_q = i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0(BITSHIFT,8631)@766
    assign i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0_q = i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0(ADD,6973)@766 + 1
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_11_cnn1228_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_11_cnn1228_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16530)@767
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2(ADD,10943)@767 + 1
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16535)@767
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_0_1_q[69:69];

    // redist106_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18023)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist106_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist107_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18024)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist107_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2(ADD,10944)@768 + 1
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist107_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist107_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist106_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist106_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist615_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18532)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist615_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10945)@769
    assign i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p2_of_2_q, redist615_i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_11_cnn1228_mult_extender_x(BITJOIN,2497)@769
    assign i_add_ptr73_371_11_cnn1228_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_11_cnn1228_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_11_cnn1228_trunc_sel_x(BITSELECT,2499)@769
    assign i_add_ptr73_371_11_cnn1228_trunc_sel_x_b = i_add_ptr73_371_11_cnn1228_mult_extender_x_q[63:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0(BITSHIFT,8372)@765
    assign i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0_q = i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5(BITSHIFT,5051)@765
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_11_cnn1226_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5_q = i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0(BITSHIFT,8373)@765
    assign i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0_q = i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3(BITSHIFT,5049)@765
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_11_cnn1226_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3_q = i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1(ADD,5054)@765 + 1
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_11_cnn1226_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_11_cnn1226_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14198)@766
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0(BITSHIFT,8374)@765
    assign i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0_q = i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1(BITSHIFT,5047)@765
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_11_cnn1226_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1_q = i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0(BITSHIFT,8375)@765
    assign i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0_q = i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0(ADD,5053)@765 + 1
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_11_cnn1226_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_11_cnn1226_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14226)@766
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2(ADD,10239)@766 + 1
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14231)@766
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_0_1_q[69:69];

    // redist234_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18151)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist234_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist235_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18152)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist235_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2(ADD,10240)@767 + 1
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist235_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist235_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist234_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist234_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist679_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18596)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist679_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10241)@768
    assign i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p2_of_2_q, redist679_i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_11_cnn1226_mult_extender_x(BITJOIN,1857)@768
    assign i_add_ptr70_3_11_cnn1226_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_11_cnn1226_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_11_cnn1226_trunc_sel_x(BITSELECT,1859)@768
    assign i_add_ptr70_3_11_cnn1226_trunc_sel_x_b = i_add_ptr70_3_11_cnn1226_mult_extender_x_q[63:0];

    // c_i64_11(CONSTANT,32)
    assign c_i64_11_q = 64'b0000000000000000000000000000000000000000000000000000000000001011;

    // i_inc79_10_cnn1194(LOGICAL,486)@754
    assign i_inc79_10_cnn1194_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_11_q;

    // i_inc79_10_cnn1194_vt_select_2_merged_bit_select(BITSELECT,17869)@754
    assign i_inc79_10_cnn1194_vt_select_2_merged_bit_select_b = i_inc79_10_cnn1194_q[2:2];
    assign i_inc79_10_cnn1194_vt_select_2_merged_bit_select_c = i_inc79_10_cnn1194_q[63:4];

    // i_inc79_10_cnn1194_vt_join(BITJOIN,489)@754
    assign i_inc79_10_cnn1194_vt_join_q = {i_inc79_10_cnn1194_vt_select_2_merged_bit_select_c, VCC_q, i_inc79_10_cnn1194_vt_select_2_merged_bit_select_b, i_inc79_10_cnn1194_vt_const_1_q};

    // i_mul65_11_cnn1195_bs1_merged_bit_select(BITSELECT,17870)@754
    assign i_mul65_11_cnn1195_bs1_merged_bit_select_b = i_inc79_10_cnn1194_vt_join_q[63:54];
    assign i_mul65_11_cnn1195_bs1_merged_bit_select_c = i_inc79_10_cnn1194_vt_join_q[53:36];
    assign i_mul65_11_cnn1195_bs1_merged_bit_select_d = i_inc79_10_cnn1194_vt_join_q[35:18];
    assign i_mul65_11_cnn1195_bs1_merged_bit_select_e = i_inc79_10_cnn1194_vt_join_q[17:0];

    // i_mul65_11_cnn1195_bjA2(BITJOIN,2808)@754
    assign i_mul65_11_cnn1195_bjA2_q = {GND_q, i_mul65_11_cnn1195_bs1_merged_bit_select_b};

    // i_mul65_11_cnn1195_im0_cma(CHAINMULTADD,17809)@754 + 5
    // out q@760
    assign i_mul65_11_cnn1195_im0_cma_reset = ~ (resetn);
    assign i_mul65_11_cnn1195_im0_cma_ena0 = 1'b1;
    assign i_mul65_11_cnn1195_im0_cma_ena1 = i_mul65_11_cnn1195_im0_cma_ena0;
    assign i_mul65_11_cnn1195_im0_cma_ena2 = i_mul65_11_cnn1195_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_im0_cma_ah[0] <= i_mul65_11_cnn1195_bjA2_q;
        end
    end

    assign i_mul65_11_cnn1195_im0_cma_a0 = i_mul65_11_cnn1195_im0_cma_ah[0];
    assign i_mul65_11_cnn1195_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_11_cnn1195_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_11_cnn1195_im0_cma_ena2, i_mul65_11_cnn1195_im0_cma_ena1, i_mul65_11_cnn1195_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_11_cnn1195_im0_cma_a0),
        .coefsela(i_mul65_11_cnn1195_im0_cma_c0),
        .resulta(i_mul65_11_cnn1195_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_11_cnn1195_im0_cma_delay ( .xin(i_mul65_11_cnn1195_im0_cma_s0), .xout(i_mul65_11_cnn1195_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_11_cnn1195_im0_cma_q = i_mul65_11_cnn1195_im0_cma_qq[21:0];

    // redist59_i_mul65_11_cnn1195_im0_cma_q_1(DELAY,17976)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist59_i_mul65_11_cnn1195_im0_cma_q_1_q <= i_mul65_11_cnn1195_im0_cma_q;
        end
    end

    // i_mul65_11_cnn1195_sums_align_5(BITSHIFT,2831)@761
    assign i_mul65_11_cnn1195_sums_align_5_qint = { redist59_i_mul65_11_cnn1195_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_11_cnn1195_sums_align_5_q = i_mul65_11_cnn1195_sums_align_5_qint[74:0];

    // i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11247)@761
    assign i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_11_cnn1195_sums_align_5_q[69:0];

    // i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11234)@761
    assign i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_11_cnn1195_sums_align_3_q[64:64];

    // i_mul65_11_cnn1195_bjA7(BITJOIN,2813)@754
    assign i_mul65_11_cnn1195_bjA7_q = {GND_q, i_mul65_11_cnn1195_bs1_merged_bit_select_c};

    // i_mul65_11_cnn1195_im5_cma(CHAINMULTADD,17810)@754 + 5
    // out q@760
    assign i_mul65_11_cnn1195_im5_cma_reset = ~ (resetn);
    assign i_mul65_11_cnn1195_im5_cma_ena0 = 1'b1;
    assign i_mul65_11_cnn1195_im5_cma_ena1 = i_mul65_11_cnn1195_im5_cma_ena0;
    assign i_mul65_11_cnn1195_im5_cma_ena2 = i_mul65_11_cnn1195_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_im5_cma_ah[0] <= i_mul65_11_cnn1195_bjA7_q;
        end
    end

    assign i_mul65_11_cnn1195_im5_cma_a0 = i_mul65_11_cnn1195_im5_cma_ah[0];
    assign i_mul65_11_cnn1195_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_11_cnn1195_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_11_cnn1195_im5_cma_ena2, i_mul65_11_cnn1195_im5_cma_ena1, i_mul65_11_cnn1195_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_11_cnn1195_im5_cma_a0),
        .coefsela(i_mul65_11_cnn1195_im5_cma_c0),
        .resulta(i_mul65_11_cnn1195_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_11_cnn1195_im5_cma_delay ( .xin(i_mul65_11_cnn1195_im5_cma_s0), .xout(i_mul65_11_cnn1195_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_11_cnn1195_im5_cma_q = i_mul65_11_cnn1195_im5_cma_qq[29:0];

    // redist58_i_mul65_11_cnn1195_im5_cma_q_1(DELAY,17975)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist58_i_mul65_11_cnn1195_im5_cma_q_1_q <= i_mul65_11_cnn1195_im5_cma_q;
        end
    end

    // i_mul65_11_cnn1195_sums_align_3(BITSHIFT,2829)@761
    assign i_mul65_11_cnn1195_sums_align_3_qint = { redist58_i_mul65_11_cnn1195_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_11_cnn1195_sums_align_3_q = i_mul65_11_cnn1195_sums_align_3_qint[64:0];

    // i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11239)@761
    assign i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_align_3_q};

    // i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2(ADD,9260)@761 + 1
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_q = i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11253)@762
    assign i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_11_cnn1195_sums_result_add_0_0_q[47:47];

    // i_mul65_11_cnn1195_bjA12(BITJOIN,2818)@754
    assign i_mul65_11_cnn1195_bjA12_q = {GND_q, i_mul65_11_cnn1195_bs1_merged_bit_select_d};

    // i_mul65_11_cnn1195_im10_cma(CHAINMULTADD,17811)@754 + 5
    // out q@760
    assign i_mul65_11_cnn1195_im10_cma_reset = ~ (resetn);
    assign i_mul65_11_cnn1195_im10_cma_ena0 = 1'b1;
    assign i_mul65_11_cnn1195_im10_cma_ena1 = i_mul65_11_cnn1195_im10_cma_ena0;
    assign i_mul65_11_cnn1195_im10_cma_ena2 = i_mul65_11_cnn1195_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_im10_cma_ah[0] <= i_mul65_11_cnn1195_bjA12_q;
        end
    end

    assign i_mul65_11_cnn1195_im10_cma_a0 = i_mul65_11_cnn1195_im10_cma_ah[0];
    assign i_mul65_11_cnn1195_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_11_cnn1195_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_11_cnn1195_im10_cma_ena2, i_mul65_11_cnn1195_im10_cma_ena1, i_mul65_11_cnn1195_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_11_cnn1195_im10_cma_a0),
        .coefsela(i_mul65_11_cnn1195_im10_cma_c0),
        .resulta(i_mul65_11_cnn1195_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_11_cnn1195_im10_cma_delay ( .xin(i_mul65_11_cnn1195_im10_cma_s0), .xout(i_mul65_11_cnn1195_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_11_cnn1195_im10_cma_q = i_mul65_11_cnn1195_im10_cma_qq[29:0];

    // redist57_i_mul65_11_cnn1195_im10_cma_q_1(DELAY,17974)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist57_i_mul65_11_cnn1195_im10_cma_q_1_q <= i_mul65_11_cnn1195_im10_cma_q;
        end
    end

    // i_mul65_11_cnn1195_sums_align_1(BITSHIFT,2827)@761
    assign i_mul65_11_cnn1195_sums_align_1_qint = { redist57_i_mul65_11_cnn1195_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_11_cnn1195_sums_align_1_q = i_mul65_11_cnn1195_sums_align_1_qint[46:0];

    // i_mul65_11_cnn1195_bjA17(BITJOIN,2823)@754
    assign i_mul65_11_cnn1195_bjA17_q = {GND_q, i_mul65_11_cnn1195_bs1_merged_bit_select_e};

    // i_mul65_11_cnn1195_im15_cma(CHAINMULTADD,17812)@754 + 5
    // out q@760
    assign i_mul65_11_cnn1195_im15_cma_reset = ~ (resetn);
    assign i_mul65_11_cnn1195_im15_cma_ena0 = 1'b1;
    assign i_mul65_11_cnn1195_im15_cma_ena1 = i_mul65_11_cnn1195_im15_cma_ena0;
    assign i_mul65_11_cnn1195_im15_cma_ena2 = i_mul65_11_cnn1195_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_im15_cma_ah[0] <= i_mul65_11_cnn1195_bjA17_q;
        end
    end

    assign i_mul65_11_cnn1195_im15_cma_a0 = i_mul65_11_cnn1195_im15_cma_ah[0];
    assign i_mul65_11_cnn1195_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_11_cnn1195_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_11_cnn1195_im15_cma_ena2, i_mul65_11_cnn1195_im15_cma_ena1, i_mul65_11_cnn1195_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_11_cnn1195_im15_cma_a0),
        .coefsela(i_mul65_11_cnn1195_im15_cma_c0),
        .resulta(i_mul65_11_cnn1195_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_11_cnn1195_im15_cma_delay ( .xin(i_mul65_11_cnn1195_im15_cma_s0), .xout(i_mul65_11_cnn1195_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_11_cnn1195_im15_cma_q = i_mul65_11_cnn1195_im15_cma_qq[29:0];

    // redist56_i_mul65_11_cnn1195_im15_cma_q_1(DELAY,17973)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist56_i_mul65_11_cnn1195_im15_cma_q_1_q <= i_mul65_11_cnn1195_im15_cma_q;
        end
    end

    // i_mul65_11_cnn1195_sums_result_add_0_0(ADD,2833)@761 + 1
    assign i_mul65_11_cnn1195_sums_result_add_0_0_a = {{18{redist56_i_mul65_11_cnn1195_im15_cma_q_1_q[29]}}, redist56_i_mul65_11_cnn1195_im15_cma_q_1_q};
    assign i_mul65_11_cnn1195_sums_result_add_0_0_b = {{1{i_mul65_11_cnn1195_sums_align_1_q[46]}}, i_mul65_11_cnn1195_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_sums_result_add_0_0_o <= $signed(i_mul65_11_cnn1195_sums_result_add_0_0_a) + $signed(i_mul65_11_cnn1195_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_11_cnn1195_sums_result_add_0_0_q = i_mul65_11_cnn1195_sums_result_add_0_0_o[47:0];

    // i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11275)@762
    assign i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_11_cnn1195_sums_result_add_0_0_q};

    // i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2(ADD,9271)@762 + 1
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_q = i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11287)@763
    assign i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11250)@761
    assign i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_11_cnn1195_sums_align_5_q[74:74];

    // redist571_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18488)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist571_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11249)@761
    assign i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_11_cnn1195_sums_align_5_q[74:70];

    // redist572_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18489)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist572_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11251)@762
    assign i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist571_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist572_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18490)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11246)@762
    assign i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist573_i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2(ADD,9261)@762 + 1
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_cin = i_mul65_11_cnn1195_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_11_cnn1195_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_q = i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11288)@763
    assign i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_11_cnn1195_sums_result_add_0_1_p2_of_2_q};

    // redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18481)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11283)@763
    assign i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist564_i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2(ADD,9272)@763 + 1
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_cin = i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_11_cnn1195_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_q = i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist753_i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_q_1(DELAY,18670)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist753_i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_11_cnn1195_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9273)@764
    assign i_mul65_11_cnn1195_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_11_cnn1195_sums_result_add_1_0_p2_of_2_q, redist753_i_mul65_11_cnn1195_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_11_cnn1195_extender_x(BITJOIN,2717)@764
    assign i_mul65_11_cnn1195_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_11_cnn1195_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_11_cnn1195_sel_x(BITSELECT,1048)@764
    assign bgTrunc_i_mul65_11_cnn1195_sel_x_b = i_mul65_11_cnn1195_extender_x_q[63:0];

    // i_mul65_11_cnn1195_vt_select_63(BITSELECT,994)@764
    assign i_mul65_11_cnn1195_vt_select_63_b = bgTrunc_i_mul65_11_cnn1195_sel_x_b[63:2];

    // i_mul65_11_cnn1195_vt_join(BITJOIN,993)@764
    assign i_mul65_11_cnn1195_vt_join_q = {i_mul65_11_cnn1195_vt_select_63_b, i_inc79_10_cnn1194_vt_const_1_q};

    // i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select(BITSELECT,17901)@764
    assign i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_b = i_mul65_11_cnn1195_vt_join_q[63:54];
    assign i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_c = i_mul65_11_cnn1195_vt_join_q[53:36];
    assign i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_d = i_mul65_11_cnn1195_vt_join_q[35:18];
    assign i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_e = i_mul65_11_cnn1195_vt_join_q[17:0];

    // i_add_ptr66_11_cnn1200_mult_x_bjA2(BITJOIN,3318)@764
    assign i_add_ptr66_11_cnn1200_mult_x_bjA2_q = {GND_q, i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_11_cnn1200_mult_x_im0_shift0(BITSHIFT,8144)@764
    assign i_add_ptr66_11_cnn1200_mult_x_im0_shift0_qint = { i_add_ptr66_11_cnn1200_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_11_cnn1200_mult_x_im0_shift0_q = i_add_ptr66_11_cnn1200_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_align_5(BITSHIFT,3341)@764
    assign i_add_ptr66_11_cnn1200_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_11_cnn1200_mult_x_im0_shift0_q[12]}}, i_add_ptr66_11_cnn1200_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_11_cnn1200_mult_x_sums_align_5_q = i_add_ptr66_11_cnn1200_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_11_cnn1200_mult_x_bjA7(BITJOIN,3323)@764
    assign i_add_ptr66_11_cnn1200_mult_x_bjA7_q = {GND_q, i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_11_cnn1200_mult_x_im5_shift0(BITSHIFT,8145)@764
    assign i_add_ptr66_11_cnn1200_mult_x_im5_shift0_qint = { i_add_ptr66_11_cnn1200_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_11_cnn1200_mult_x_im5_shift0_q = i_add_ptr66_11_cnn1200_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_align_3(BITSHIFT,3339)@764
    assign i_add_ptr66_11_cnn1200_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_11_cnn1200_mult_x_im5_shift0_q[20]}}, i_add_ptr66_11_cnn1200_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_11_cnn1200_mult_x_sums_align_3_q = i_add_ptr66_11_cnn1200_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1(ADD,3344)@764 + 1
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_11_cnn1200_mult_x_sums_align_3_q[58]}}, i_add_ptr66_11_cnn1200_mult_x_sums_align_3_q};
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_11_cnn1200_mult_x_sums_align_5_q[68]}}, i_add_ptr66_11_cnn1200_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_q = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12146)@765
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_11_cnn1200_mult_x_bjA12(BITJOIN,3328)@764
    assign i_add_ptr66_11_cnn1200_mult_x_bjA12_q = {GND_q, i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_11_cnn1200_mult_x_im10_shift0(BITSHIFT,8146)@764
    assign i_add_ptr66_11_cnn1200_mult_x_im10_shift0_qint = { i_add_ptr66_11_cnn1200_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_11_cnn1200_mult_x_im10_shift0_q = i_add_ptr66_11_cnn1200_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_align_1(BITSHIFT,3337)@764
    assign i_add_ptr66_11_cnn1200_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_11_cnn1200_mult_x_im10_shift0_q[20]}}, i_add_ptr66_11_cnn1200_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_11_cnn1200_mult_x_sums_align_1_q = i_add_ptr66_11_cnn1200_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_11_cnn1200_mult_x_bjA17(BITJOIN,3333)@764
    assign i_add_ptr66_11_cnn1200_mult_x_bjA17_q = {GND_q, i_add_ptr66_11_cnn1200_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_11_cnn1200_mult_x_im15_shift0(BITSHIFT,8147)@764
    assign i_add_ptr66_11_cnn1200_mult_x_im15_shift0_qint = { i_add_ptr66_11_cnn1200_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_11_cnn1200_mult_x_im15_shift0_q = i_add_ptr66_11_cnn1200_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0(ADD,3343)@764 + 1
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_11_cnn1200_mult_x_im15_shift0_q[20]}}, i_add_ptr66_11_cnn1200_mult_x_im15_shift0_q};
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_11_cnn1200_mult_x_sums_align_1_q[40]}}, i_add_ptr66_11_cnn1200_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_q = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12174)@765
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2(ADD,9612)@765 + 1
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12179)@765
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_0_1_q[69:69];

    // redist348_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18265)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist348_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist349_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18266)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist349_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2(ADD,9613)@766 + 1
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist349_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist349_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist348_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist348_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist736_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18653)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist736_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9614)@767
    assign i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p2_of_2_q, redist736_i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_11_cnn1200_mult_extender_x(BITJOIN,1287)@767
    assign i_add_ptr66_11_cnn1200_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_11_cnn1200_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_11_cnn1200_trunc_sel_x(BITSELECT,1289)@767
    assign i_add_ptr66_11_cnn1200_trunc_sel_x_b = i_add_ptr66_11_cnn1200_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196(BLACKBOX,686)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_1197 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_select_63(BITSELECT,689)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_join(BITJOIN,688)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_11_cnn1200_add_x(ADD,1281)@767
    assign i_add_ptr66_11_cnn1200_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer15_cnn1196_vt_join_q};
    assign i_add_ptr66_11_cnn1200_add_x_b = {1'b0, i_add_ptr66_11_cnn1200_trunc_sel_x_b};
    assign i_add_ptr66_11_cnn1200_add_x_o = $unsigned(i_add_ptr66_11_cnn1200_add_x_a) + $unsigned(i_add_ptr66_11_cnn1200_add_x_b);
    assign i_add_ptr66_11_cnn1200_add_x_q = i_add_ptr66_11_cnn1200_add_x_o[64:0];

    // i_add_ptr66_11_cnn1200_dupName_0_trunc_sel_x(BITSELECT,1290)@767
    assign i_add_ptr66_11_cnn1200_dupName_0_trunc_sel_x_b = i_add_ptr66_11_cnn1200_add_x_q[63:0];

    // i_add_ptr66_11_cnn1199_vt_select_63(BITSELECT,57)@767
    assign i_add_ptr66_11_cnn1199_vt_select_63_b = i_add_ptr66_11_cnn1200_dupName_0_trunc_sel_x_b[63:4];

    // redist877_i_add_ptr66_11_cnn1199_vt_select_63_b_1(DELAY,18794)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist877_i_add_ptr66_11_cnn1199_vt_select_63_b_1_q <= i_add_ptr66_11_cnn1199_vt_select_63_b;
        end
    end

    // i_add_ptr66_11_cnn1199_vt_const_3(CONSTANT,55)
    assign i_add_ptr66_11_cnn1199_vt_const_3_q = 4'b1100;

    // i_add_ptr66_11_cnn1199_vt_join(BITJOIN,56)@768
    assign i_add_ptr66_11_cnn1199_vt_join_q = {redist877_i_add_ptr66_11_cnn1199_vt_select_63_b_1_q, i_add_ptr66_11_cnn1199_vt_const_3_q};

    // i_add_ptr70_3_11_cnn1226_add_x(ADD,1851)@768
    assign i_add_ptr70_3_11_cnn1226_add_x_a = {1'b0, i_add_ptr66_11_cnn1199_vt_join_q};
    assign i_add_ptr70_3_11_cnn1226_add_x_b = {1'b0, i_add_ptr70_3_11_cnn1226_trunc_sel_x_b};
    assign i_add_ptr70_3_11_cnn1226_add_x_o = $unsigned(i_add_ptr70_3_11_cnn1226_add_x_a) + $unsigned(i_add_ptr70_3_11_cnn1226_add_x_b);
    assign i_add_ptr70_3_11_cnn1226_add_x_q = i_add_ptr70_3_11_cnn1226_add_x_o[64:0];

    // i_add_ptr70_3_11_cnn1226_dupName_0_trunc_sel_x(BITSELECT,1860)@768
    assign i_add_ptr70_3_11_cnn1226_dupName_0_trunc_sel_x_b = i_add_ptr70_3_11_cnn1226_add_x_q[63:0];

    // i_add_ptr70_3_11_cnn1225_vt_select_63(BITSELECT,228)@768
    assign i_add_ptr70_3_11_cnn1225_vt_select_63_b = i_add_ptr70_3_11_cnn1226_dupName_0_trunc_sel_x_b[63:2];

    // redist820_i_add_ptr70_3_11_cnn1225_vt_select_63_b_1(DELAY,18737)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist820_i_add_ptr70_3_11_cnn1225_vt_select_63_b_1_q <= i_add_ptr70_3_11_cnn1225_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_11_cnn1225_vt_join(BITJOIN,227)@769
    assign i_add_ptr70_3_11_cnn1225_vt_join_q = {redist820_i_add_ptr70_3_11_cnn1225_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_11_cnn1228_add_x(ADD,2491)@769
    assign i_add_ptr73_371_11_cnn1228_add_x_a = {1'b0, i_add_ptr70_3_11_cnn1225_vt_join_q};
    assign i_add_ptr73_371_11_cnn1228_add_x_b = {1'b0, i_add_ptr73_371_11_cnn1228_trunc_sel_x_b};
    assign i_add_ptr73_371_11_cnn1228_add_x_o = $unsigned(i_add_ptr73_371_11_cnn1228_add_x_a) + $unsigned(i_add_ptr73_371_11_cnn1228_add_x_b);
    assign i_add_ptr73_371_11_cnn1228_add_x_q = i_add_ptr73_371_11_cnn1228_add_x_o[64:0];

    // i_add_ptr73_371_11_cnn1228_dupName_0_trunc_sel_x(BITSELECT,2500)@769
    assign i_add_ptr73_371_11_cnn1228_dupName_0_trunc_sel_x_b = i_add_ptr73_371_11_cnn1228_add_x_q[63:0];

    // i_add_ptr73_371_11_cnn1227_vt_select_63(BITSELECT,420)@769
    assign i_add_ptr73_371_11_cnn1227_vt_select_63_b = i_add_ptr73_371_11_cnn1228_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_11_cnn1227_vt_join(BITJOIN,419)@769
    assign i_add_ptr73_371_11_cnn1227_vt_join_q = {i_add_ptr73_371_11_cnn1227_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_select_63(BITSELECT,898)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_select_63_b = i_add_ptr73_371_11_cnn1227_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_join(BITJOIN,897)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn155_cnn1222(BLACKBOX,619)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_155_cnn1223 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn155_cnn1222 (
        .in_intel_reserved_ffwd_74_0(in_intel_reserved_ffwd_74_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_74_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn155_cnn1222_out_dest_data_out_74_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0(BITSHIFT,8556)@766
    assign i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0_q = i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5(BITSHIFT,6431)@766
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_11_cnn1220_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5_q = i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0(BITSHIFT,8557)@766
    assign i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0_q = i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3(BITSHIFT,6429)@766
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_11_cnn1220_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3_q = i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1(ADD,6434)@766 + 1
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_11_cnn1220_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_11_cnn1220_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15854)@767
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0(BITSHIFT,8558)@766
    assign i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0_q = i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1(BITSHIFT,6427)@766
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_11_cnn1220_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1_q = i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0(BITSHIFT,8559)@766
    assign i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0_q = i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0(ADD,6433)@766 + 1
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_11_cnn1220_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_11_cnn1220_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15882)@767
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2(ADD,10745)@767 + 1
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15887)@767
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_0_1_q[69:69];

    // redist142_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18059)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist142_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist143_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18060)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist143_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2(ADD,10746)@768 + 1
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist143_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist143_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist142_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist142_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist633_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18550)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist633_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10747)@769
    assign i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p2_of_2_q, redist633_i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_11_cnn1220_mult_extender_x(BITJOIN,2317)@769
    assign i_add_ptr73_270_11_cnn1220_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_11_cnn1220_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_11_cnn1220_trunc_sel_x(BITSELECT,2319)@769
    assign i_add_ptr73_270_11_cnn1220_trunc_sel_x_b = i_add_ptr73_270_11_cnn1220_mult_extender_x_q[63:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0(BITSHIFT,8304)@765
    assign i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0_q = i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5(BITSHIFT,4541)@765
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_11_cnn1218_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5_q = i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0(BITSHIFT,8305)@765
    assign i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0_q = i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3(BITSHIFT,4539)@765
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_11_cnn1218_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3_q = i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1(ADD,4544)@765 + 1
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_11_cnn1218_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_11_cnn1218_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13586)@766
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0(BITSHIFT,8306)@765
    assign i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0_q = i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1(BITSHIFT,4537)@765
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_11_cnn1218_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1_q = i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0(BITSHIFT,8307)@765
    assign i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0_q = i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0(ADD,4543)@765 + 1
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_11_cnn1218_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_11_cnn1218_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13614)@766
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2(ADD,10052)@766 + 1
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13619)@766
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_0_1_q[69:69];

    // redist268_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18185)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist268_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist269_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18186)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist269_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2(ADD,10053)@767 + 1
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist269_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist269_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist268_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist268_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist696_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18613)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist696_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10054)@768
    assign i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p2_of_2_q, redist696_i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_11_cnn1218_mult_extender_x(BITJOIN,1687)@768
    assign i_add_ptr70_2_11_cnn1218_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_11_cnn1218_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_11_cnn1218_trunc_sel_x(BITSELECT,1689)@768
    assign i_add_ptr70_2_11_cnn1218_trunc_sel_x_b = i_add_ptr70_2_11_cnn1218_mult_extender_x_q[63:0];

    // i_add_ptr70_2_11_cnn1218_add_x(ADD,1681)@768
    assign i_add_ptr70_2_11_cnn1218_add_x_a = {1'b0, i_add_ptr66_11_cnn1199_vt_join_q};
    assign i_add_ptr70_2_11_cnn1218_add_x_b = {1'b0, i_add_ptr70_2_11_cnn1218_trunc_sel_x_b};
    assign i_add_ptr70_2_11_cnn1218_add_x_o = $unsigned(i_add_ptr70_2_11_cnn1218_add_x_a) + $unsigned(i_add_ptr70_2_11_cnn1218_add_x_b);
    assign i_add_ptr70_2_11_cnn1218_add_x_q = i_add_ptr70_2_11_cnn1218_add_x_o[64:0];

    // i_add_ptr70_2_11_cnn1218_dupName_0_trunc_sel_x(BITSELECT,1690)@768
    assign i_add_ptr70_2_11_cnn1218_dupName_0_trunc_sel_x_b = i_add_ptr70_2_11_cnn1218_add_x_q[63:0];

    // i_add_ptr70_2_11_cnn1217_vt_select_63(BITSELECT,177)@768
    assign i_add_ptr70_2_11_cnn1217_vt_select_63_b = i_add_ptr70_2_11_cnn1218_dupName_0_trunc_sel_x_b[63:2];

    // redist837_i_add_ptr70_2_11_cnn1217_vt_select_63_b_1(DELAY,18754)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist837_i_add_ptr70_2_11_cnn1217_vt_select_63_b_1_q <= i_add_ptr70_2_11_cnn1217_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_11_cnn1217_vt_join(BITJOIN,176)@769
    assign i_add_ptr70_2_11_cnn1217_vt_join_q = {redist837_i_add_ptr70_2_11_cnn1217_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_11_cnn1220_add_x(ADD,2311)@769
    assign i_add_ptr73_270_11_cnn1220_add_x_a = {1'b0, i_add_ptr70_2_11_cnn1217_vt_join_q};
    assign i_add_ptr73_270_11_cnn1220_add_x_b = {1'b0, i_add_ptr73_270_11_cnn1220_trunc_sel_x_b};
    assign i_add_ptr73_270_11_cnn1220_add_x_o = $unsigned(i_add_ptr73_270_11_cnn1220_add_x_a) + $unsigned(i_add_ptr73_270_11_cnn1220_add_x_b);
    assign i_add_ptr73_270_11_cnn1220_add_x_q = i_add_ptr73_270_11_cnn1220_add_x_o[64:0];

    // i_add_ptr73_270_11_cnn1220_dupName_0_trunc_sel_x(BITSELECT,2320)@769
    assign i_add_ptr73_270_11_cnn1220_dupName_0_trunc_sel_x_b = i_add_ptr73_270_11_cnn1220_add_x_q[63:0];

    // i_add_ptr73_270_11_cnn1219_vt_select_63(BITSELECT,366)@769
    assign i_add_ptr73_270_11_cnn1219_vt_select_63_b = i_add_ptr73_270_11_cnn1220_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_11_cnn1219_vt_join(BITJOIN,365)@769
    assign i_add_ptr73_270_11_cnn1219_vt_join_q = {i_add_ptr73_270_11_cnn1219_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_select_63(BITSELECT,894)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_select_63_b = i_add_ptr73_270_11_cnn1219_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_join(BITJOIN,893)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn154_cnn1214(BLACKBOX,618)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_154_cnn1215 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn154_cnn1214 (
        .in_intel_reserved_ffwd_73_0(in_intel_reserved_ffwd_73_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_73_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn154_cnn1214_out_dest_data_out_73_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0(BITSHIFT,8488)@766
    assign i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0_q = i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5(BITSHIFT,5921)@766
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_11_cnn1212_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5_q = i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0(BITSHIFT,8489)@766
    assign i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0_q = i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3(BITSHIFT,5919)@766
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_11_cnn1212_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3_q = i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1(ADD,5924)@766 + 1
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_11_cnn1212_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_11_cnn1212_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15242)@767
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0(BITSHIFT,8490)@766
    assign i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0_q = i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1(BITSHIFT,5917)@766
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_11_cnn1212_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1_q = i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0(BITSHIFT,8491)@766
    assign i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0_q = i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0(ADD,5923)@766 + 1
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_11_cnn1212_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_11_cnn1212_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15270)@767
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2(ADD,10558)@767 + 1
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15275)@767
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_0_1_q[69:69];

    // redist176_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18093)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist176_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist177_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18094)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist177_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2(ADD,10559)@768 + 1
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist177_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist177_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist176_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist176_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist650_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18567)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist650_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10560)@769
    assign i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p2_of_2_q, redist650_i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_11_cnn1212_mult_extender_x(BITJOIN,2147)@769
    assign i_add_ptr73_169_11_cnn1212_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_11_cnn1212_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_11_cnn1212_trunc_sel_x(BITSELECT,2149)@769
    assign i_add_ptr73_169_11_cnn1212_trunc_sel_x_b = i_add_ptr73_169_11_cnn1212_mult_extender_x_q[63:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0(BITSHIFT,8236)@765
    assign i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0_q = i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5(BITSHIFT,4031)@765
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_11_cnn1210_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5_q = i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0(BITSHIFT,8237)@765
    assign i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0_q = i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3(BITSHIFT,4029)@765
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_11_cnn1210_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3_q = i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1(ADD,4034)@765 + 1
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_11_cnn1210_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_11_cnn1210_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12974)@766
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0(BITSHIFT,8238)@765
    assign i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0_q = i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1(BITSHIFT,4027)@765
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_11_cnn1210_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1_q = i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0(BITSHIFT,8239)@765
    assign i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0_q = i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0(ADD,4033)@765 + 1
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_11_cnn1210_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_11_cnn1210_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13002)@766
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2(ADD,9865)@766 + 1
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13007)@766
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_0_1_q[69:69];

    // redist302_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18219)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist302_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist303_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18220)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist303_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2(ADD,9866)@767 + 1
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist303_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist303_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist302_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist302_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist713_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18630)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist713_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9867)@768
    assign i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p2_of_2_q, redist713_i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_11_cnn1210_mult_extender_x(BITJOIN,1517)@768
    assign i_add_ptr70_1_11_cnn1210_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_11_cnn1210_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_11_cnn1210_trunc_sel_x(BITSELECT,1519)@768
    assign i_add_ptr70_1_11_cnn1210_trunc_sel_x_b = i_add_ptr70_1_11_cnn1210_mult_extender_x_q[63:0];

    // i_add_ptr70_1_11_cnn1210_add_x(ADD,1511)@768
    assign i_add_ptr70_1_11_cnn1210_add_x_a = {1'b0, i_add_ptr66_11_cnn1199_vt_join_q};
    assign i_add_ptr70_1_11_cnn1210_add_x_b = {1'b0, i_add_ptr70_1_11_cnn1210_trunc_sel_x_b};
    assign i_add_ptr70_1_11_cnn1210_add_x_o = $unsigned(i_add_ptr70_1_11_cnn1210_add_x_a) + $unsigned(i_add_ptr70_1_11_cnn1210_add_x_b);
    assign i_add_ptr70_1_11_cnn1210_add_x_q = i_add_ptr70_1_11_cnn1210_add_x_o[64:0];

    // i_add_ptr70_1_11_cnn1210_dupName_0_trunc_sel_x(BITSELECT,1520)@768
    assign i_add_ptr70_1_11_cnn1210_dupName_0_trunc_sel_x_b = i_add_ptr70_1_11_cnn1210_add_x_q[63:0];

    // i_add_ptr70_1_11_cnn1209_vt_select_63(BITSELECT,126)@768
    assign i_add_ptr70_1_11_cnn1209_vt_select_63_b = i_add_ptr70_1_11_cnn1210_dupName_0_trunc_sel_x_b[63:2];

    // redist854_i_add_ptr70_1_11_cnn1209_vt_select_63_b_1(DELAY,18771)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist854_i_add_ptr70_1_11_cnn1209_vt_select_63_b_1_q <= i_add_ptr70_1_11_cnn1209_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_11_cnn1209_vt_join(BITJOIN,125)@769
    assign i_add_ptr70_1_11_cnn1209_vt_join_q = {redist854_i_add_ptr70_1_11_cnn1209_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_11_cnn1212_add_x(ADD,2141)@769
    assign i_add_ptr73_169_11_cnn1212_add_x_a = {1'b0, i_add_ptr70_1_11_cnn1209_vt_join_q};
    assign i_add_ptr73_169_11_cnn1212_add_x_b = {1'b0, i_add_ptr73_169_11_cnn1212_trunc_sel_x_b};
    assign i_add_ptr73_169_11_cnn1212_add_x_o = $unsigned(i_add_ptr73_169_11_cnn1212_add_x_a) + $unsigned(i_add_ptr73_169_11_cnn1212_add_x_b);
    assign i_add_ptr73_169_11_cnn1212_add_x_q = i_add_ptr73_169_11_cnn1212_add_x_o[64:0];

    // i_add_ptr73_169_11_cnn1212_dupName_0_trunc_sel_x(BITSELECT,2150)@769
    assign i_add_ptr73_169_11_cnn1212_dupName_0_trunc_sel_x_b = i_add_ptr73_169_11_cnn1212_add_x_q[63:0];

    // i_add_ptr73_169_11_cnn1211_vt_select_63(BITSELECT,315)@769
    assign i_add_ptr73_169_11_cnn1211_vt_select_63_b = i_add_ptr73_169_11_cnn1212_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_11_cnn1211_vt_join(BITJOIN,314)@769
    assign i_add_ptr73_169_11_cnn1211_vt_join_q = {i_add_ptr73_169_11_cnn1211_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_select_63(BITSELECT,890)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_select_63_b = i_add_ptr73_169_11_cnn1211_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_join(BITJOIN,889)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn153_cnn1206(BLACKBOX,617)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_153_cnn1207 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn153_cnn1206 (
        .in_intel_reserved_ffwd_72_0(in_intel_reserved_ffwd_72_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_72_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn153_cnn1206_out_dest_data_out_72_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_11_cnn1204_mult_x_im0_shift0(BITSHIFT,8464)@766
    assign i_add_ptr73_11_cnn1204_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_11_cnn1204_mult_x_im0_shift0_q = i_add_ptr73_11_cnn1204_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_align_5(BITSHIFT,5741)@766
    assign i_add_ptr73_11_cnn1204_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_11_cnn1204_mult_x_im0_shift0_q[12]}}, i_add_ptr73_11_cnn1204_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_11_cnn1204_mult_x_sums_align_5_q = i_add_ptr73_11_cnn1204_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_11_cnn1204_mult_x_im5_shift0(BITSHIFT,8465)@766
    assign i_add_ptr73_11_cnn1204_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_11_cnn1204_mult_x_im5_shift0_q = i_add_ptr73_11_cnn1204_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_align_3(BITSHIFT,5739)@766
    assign i_add_ptr73_11_cnn1204_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_11_cnn1204_mult_x_im5_shift0_q[20]}}, i_add_ptr73_11_cnn1204_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_11_cnn1204_mult_x_sums_align_3_q = i_add_ptr73_11_cnn1204_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1(ADD,5744)@766 + 1
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_11_cnn1204_mult_x_sums_align_3_q[58]}}, i_add_ptr73_11_cnn1204_mult_x_sums_align_3_q};
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_11_cnn1204_mult_x_sums_align_5_q[68]}}, i_add_ptr73_11_cnn1204_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_q = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15026)@767
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_11_cnn1204_mult_x_im10_shift0(BITSHIFT,8466)@766
    assign i_add_ptr73_11_cnn1204_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_11_cnn1204_mult_x_im10_shift0_q = i_add_ptr73_11_cnn1204_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_align_1(BITSHIFT,5737)@766
    assign i_add_ptr73_11_cnn1204_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_11_cnn1204_mult_x_im10_shift0_q[20]}}, i_add_ptr73_11_cnn1204_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_11_cnn1204_mult_x_sums_align_1_q = i_add_ptr73_11_cnn1204_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_11_cnn1204_mult_x_im15_shift0(BITSHIFT,8467)@766
    assign i_add_ptr73_11_cnn1204_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_11_cnn1204_mult_x_im15_shift0_q = i_add_ptr73_11_cnn1204_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0(ADD,5743)@766 + 1
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_11_cnn1204_mult_x_im15_shift0_q[20]}}, i_add_ptr73_11_cnn1204_mult_x_im15_shift0_q};
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_11_cnn1204_mult_x_sums_align_1_q[40]}}, i_add_ptr73_11_cnn1204_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_q = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15054)@767
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2(ADD,10492)@767 + 1
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15059)@767
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_0_1_q[69:69];

    // redist188_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18105)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist188_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist189_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18106)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist189_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2(ADD,10493)@768 + 1
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist189_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist189_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist188_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist188_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist656_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18573)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist656_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10494)@769
    assign i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p2_of_2_q, redist656_i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_11_cnn1204_mult_extender_x(BITJOIN,2087)@769
    assign i_add_ptr73_11_cnn1204_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_11_cnn1204_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_11_cnn1204_trunc_sel_x(BITSELECT,2089)@769
    assign i_add_ptr73_11_cnn1204_trunc_sel_x_b = i_add_ptr73_11_cnn1204_mult_extender_x_q[63:0];

    // i_add_ptr70_11_cnn1202_mult_x_im0_shift0(BITSHIFT,8208)@765
    assign i_add_ptr70_11_cnn1202_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_11_cnn1202_mult_x_im0_shift0_q = i_add_ptr70_11_cnn1202_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_align_5(BITSHIFT,3821)@765
    assign i_add_ptr70_11_cnn1202_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_11_cnn1202_mult_x_im0_shift0_q[12]}}, i_add_ptr70_11_cnn1202_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_11_cnn1202_mult_x_sums_align_5_q = i_add_ptr70_11_cnn1202_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_11_cnn1202_mult_x_im5_shift0(BITSHIFT,8209)@765
    assign i_add_ptr70_11_cnn1202_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_11_cnn1202_mult_x_im5_shift0_q = i_add_ptr70_11_cnn1202_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_align_3(BITSHIFT,3819)@765
    assign i_add_ptr70_11_cnn1202_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_11_cnn1202_mult_x_im5_shift0_q[20]}}, i_add_ptr70_11_cnn1202_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_11_cnn1202_mult_x_sums_align_3_q = i_add_ptr70_11_cnn1202_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1(ADD,3824)@765 + 1
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_11_cnn1202_mult_x_sums_align_3_q[58]}}, i_add_ptr70_11_cnn1202_mult_x_sums_align_3_q};
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_11_cnn1202_mult_x_sums_align_5_q[68]}}, i_add_ptr70_11_cnn1202_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_q = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12722)@766
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_11_cnn1202_mult_x_im10_shift0(BITSHIFT,8210)@765
    assign i_add_ptr70_11_cnn1202_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_11_cnn1202_mult_x_im10_shift0_q = i_add_ptr70_11_cnn1202_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_align_1(BITSHIFT,3817)@765
    assign i_add_ptr70_11_cnn1202_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_11_cnn1202_mult_x_im10_shift0_q[20]}}, i_add_ptr70_11_cnn1202_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_11_cnn1202_mult_x_sums_align_1_q = i_add_ptr70_11_cnn1202_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_11_cnn1202_mult_x_im15_shift0(BITSHIFT,8211)@765
    assign i_add_ptr70_11_cnn1202_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_11_cnn1202_mult_x_im15_shift0_q = i_add_ptr70_11_cnn1202_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0(ADD,3823)@765 + 1
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_11_cnn1202_mult_x_im15_shift0_q[20]}}, i_add_ptr70_11_cnn1202_mult_x_im15_shift0_q};
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_11_cnn1202_mult_x_sums_align_1_q[40]}}, i_add_ptr70_11_cnn1202_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_q = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12750)@766
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2(ADD,9788)@766 + 1
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12755)@766
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_0_1_q[69:69];

    // redist316_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18233)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist316_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist317_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18234)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist317_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2(ADD,9789)@767 + 1
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist317_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist317_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist316_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist316_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist720_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18637)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist720_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9790)@768
    assign i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p2_of_2_q, redist720_i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_11_cnn1202_mult_extender_x(BITJOIN,1447)@768
    assign i_add_ptr70_11_cnn1202_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_11_cnn1202_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_11_cnn1202_trunc_sel_x(BITSELECT,1449)@768
    assign i_add_ptr70_11_cnn1202_trunc_sel_x_b = i_add_ptr70_11_cnn1202_mult_extender_x_q[63:0];

    // i_add_ptr70_11_cnn1202_add_x(ADD,1441)@768
    assign i_add_ptr70_11_cnn1202_add_x_a = {1'b0, i_add_ptr66_11_cnn1199_vt_join_q};
    assign i_add_ptr70_11_cnn1202_add_x_b = {1'b0, i_add_ptr70_11_cnn1202_trunc_sel_x_b};
    assign i_add_ptr70_11_cnn1202_add_x_o = $unsigned(i_add_ptr70_11_cnn1202_add_x_a) + $unsigned(i_add_ptr70_11_cnn1202_add_x_b);
    assign i_add_ptr70_11_cnn1202_add_x_q = i_add_ptr70_11_cnn1202_add_x_o[64:0];

    // i_add_ptr70_11_cnn1202_dupName_0_trunc_sel_x(BITSELECT,1450)@768
    assign i_add_ptr70_11_cnn1202_dupName_0_trunc_sel_x_b = i_add_ptr70_11_cnn1202_add_x_q[63:0];

    // i_add_ptr70_11_cnn1201_vt_select_63(BITSELECT,105)@768
    assign i_add_ptr70_11_cnn1201_vt_select_63_b = i_add_ptr70_11_cnn1202_dupName_0_trunc_sel_x_b[63:2];

    // redist861_i_add_ptr70_11_cnn1201_vt_select_63_b_1(DELAY,18778)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist861_i_add_ptr70_11_cnn1201_vt_select_63_b_1_q <= i_add_ptr70_11_cnn1201_vt_select_63_b;
        end
    end

    // i_add_ptr70_11_cnn1201_vt_join(BITJOIN,104)@769
    assign i_add_ptr70_11_cnn1201_vt_join_q = {redist861_i_add_ptr70_11_cnn1201_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_11_cnn1204_add_x(ADD,2081)@769
    assign i_add_ptr73_11_cnn1204_add_x_a = {1'b0, i_add_ptr70_11_cnn1201_vt_join_q};
    assign i_add_ptr73_11_cnn1204_add_x_b = {1'b0, i_add_ptr73_11_cnn1204_trunc_sel_x_b};
    assign i_add_ptr73_11_cnn1204_add_x_o = $unsigned(i_add_ptr73_11_cnn1204_add_x_a) + $unsigned(i_add_ptr73_11_cnn1204_add_x_b);
    assign i_add_ptr73_11_cnn1204_add_x_q = i_add_ptr73_11_cnn1204_add_x_o[64:0];

    // i_add_ptr73_11_cnn1204_dupName_0_trunc_sel_x(BITSELECT,2090)@769
    assign i_add_ptr73_11_cnn1204_dupName_0_trunc_sel_x_b = i_add_ptr73_11_cnn1204_add_x_q[63:0];

    // i_add_ptr73_11_cnn1203_vt_select_63(BITSELECT,297)@769
    assign i_add_ptr73_11_cnn1203_vt_select_63_b = i_add_ptr73_11_cnn1204_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_11_cnn1203_vt_join(BITJOIN,296)@769
    assign i_add_ptr73_11_cnn1203_vt_join_q = {i_add_ptr73_11_cnn1203_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_select_63(BITSELECT,886)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_select_63_b = i_add_ptr73_11_cnn1203_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_join(BITJOIN,885)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn152_cnn1191(BLACKBOX,616)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_152_cnn1192 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn152_cnn1191 (
        .in_intel_reserved_ffwd_71_0(in_intel_reserved_ffwd_71_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_71_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn152_cnn1191_out_dest_data_out_71_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0(BITSHIFT,8624)@766
    assign i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0_q = i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5(BITSHIFT,6941)@766
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_10_cnn1189_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5_q = i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0(BITSHIFT,8625)@766
    assign i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0_q = i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3(BITSHIFT,6939)@766
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_10_cnn1189_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3_q = i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1(ADD,6944)@766 + 1
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_10_cnn1189_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_10_cnn1189_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16466)@767
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0(BITSHIFT,8626)@766
    assign i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0_q = i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1(BITSHIFT,6937)@766
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_10_cnn1189_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1_q = i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0(BITSHIFT,8627)@766
    assign i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0_q = i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0(ADD,6943)@766 + 1
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_10_cnn1189_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_10_cnn1189_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16494)@767
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2(ADD,10932)@767 + 1
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16499)@767
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_0_1_q[69:69];

    // redist108_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18025)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist108_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist109_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18026)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist109_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2(ADD,10933)@768 + 1
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist109_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist109_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist108_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist108_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist616_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18533)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist616_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10934)@769
    assign i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p2_of_2_q, redist616_i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_10_cnn1189_mult_extender_x(BITJOIN,2487)@769
    assign i_add_ptr73_371_10_cnn1189_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_10_cnn1189_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_10_cnn1189_trunc_sel_x(BITSELECT,2489)@769
    assign i_add_ptr73_371_10_cnn1189_trunc_sel_x_b = i_add_ptr73_371_10_cnn1189_mult_extender_x_q[63:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0(BITSHIFT,8368)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0_q = i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5(BITSHIFT,5021)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_10_cnn1187_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5_q = i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0(BITSHIFT,8369)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0_q = i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3(BITSHIFT,5019)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_10_cnn1187_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3_q = i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1(ADD,5024)@765 + 1
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_10_cnn1187_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_10_cnn1187_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14162)@766
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0(BITSHIFT,8370)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0_q = i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1(BITSHIFT,5017)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_10_cnn1187_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1_q = i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0(BITSHIFT,8371)@765
    assign i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0_q = i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0(ADD,5023)@765 + 1
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_10_cnn1187_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_10_cnn1187_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14190)@766
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2(ADD,10228)@766 + 1
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14195)@766
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_0_1_q[69:69];

    // redist236_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18153)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist236_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist237_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18154)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist237_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2(ADD,10229)@767 + 1
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist237_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist237_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist236_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist236_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist680_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18597)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist680_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10230)@768
    assign i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p2_of_2_q, redist680_i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_10_cnn1187_mult_extender_x(BITJOIN,1847)@768
    assign i_add_ptr70_3_10_cnn1187_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_10_cnn1187_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_10_cnn1187_trunc_sel_x(BITSELECT,1849)@768
    assign i_add_ptr70_3_10_cnn1187_trunc_sel_x_b = i_add_ptr70_3_10_cnn1187_mult_extender_x_q[63:0];

    // c_i64_10(CONSTANT,31)
    assign c_i64_10_q = 64'b0000000000000000000000000000000000000000000000000000000000001010;

    // i_inc79_9_cnn1155(LOGICAL,553)@754
    assign i_inc79_9_cnn1155_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_10_q;

    // i_inc79_9_cnn1155_vt_select_0_merged_bit_select(BITSELECT,17892)@754
    assign i_inc79_9_cnn1155_vt_select_0_merged_bit_select_b = i_inc79_9_cnn1155_q[0:0];
    assign i_inc79_9_cnn1155_vt_select_0_merged_bit_select_c = i_inc79_9_cnn1155_q[2:2];
    assign i_inc79_9_cnn1155_vt_select_0_merged_bit_select_d = i_inc79_9_cnn1155_q[63:4];

    // i_inc79_9_cnn1155_vt_join(BITJOIN,556)@754
    assign i_inc79_9_cnn1155_vt_join_q = {i_inc79_9_cnn1155_vt_select_0_merged_bit_select_d, VCC_q, i_inc79_9_cnn1155_vt_select_0_merged_bit_select_c, VCC_q, i_inc79_9_cnn1155_vt_select_0_merged_bit_select_b};

    // i_mul65_10_cnn1156_bs1_merged_bit_select(BITSELECT,17893)@754
    assign i_mul65_10_cnn1156_bs1_merged_bit_select_b = i_inc79_9_cnn1155_vt_join_q[63:54];
    assign i_mul65_10_cnn1156_bs1_merged_bit_select_c = i_inc79_9_cnn1155_vt_join_q[53:36];
    assign i_mul65_10_cnn1156_bs1_merged_bit_select_d = i_inc79_9_cnn1155_vt_join_q[35:18];
    assign i_mul65_10_cnn1156_bs1_merged_bit_select_e = i_inc79_9_cnn1155_vt_join_q[17:0];

    // i_mul65_10_cnn1156_bjA2(BITJOIN,2778)@754
    assign i_mul65_10_cnn1156_bjA2_q = {GND_q, i_mul65_10_cnn1156_bs1_merged_bit_select_b};

    // i_mul65_10_cnn1156_im0_cma(CHAINMULTADD,17805)@754 + 5
    // out q@760
    assign i_mul65_10_cnn1156_im0_cma_reset = ~ (resetn);
    assign i_mul65_10_cnn1156_im0_cma_ena0 = 1'b1;
    assign i_mul65_10_cnn1156_im0_cma_ena1 = i_mul65_10_cnn1156_im0_cma_ena0;
    assign i_mul65_10_cnn1156_im0_cma_ena2 = i_mul65_10_cnn1156_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_im0_cma_ah[0] <= i_mul65_10_cnn1156_bjA2_q;
        end
    end

    assign i_mul65_10_cnn1156_im0_cma_a0 = i_mul65_10_cnn1156_im0_cma_ah[0];
    assign i_mul65_10_cnn1156_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_10_cnn1156_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_10_cnn1156_im0_cma_ena2, i_mul65_10_cnn1156_im0_cma_ena1, i_mul65_10_cnn1156_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_10_cnn1156_im0_cma_a0),
        .coefsela(i_mul65_10_cnn1156_im0_cma_c0),
        .resulta(i_mul65_10_cnn1156_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_10_cnn1156_im0_cma_delay ( .xin(i_mul65_10_cnn1156_im0_cma_s0), .xout(i_mul65_10_cnn1156_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_10_cnn1156_im0_cma_q = i_mul65_10_cnn1156_im0_cma_qq[21:0];

    // redist63_i_mul65_10_cnn1156_im0_cma_q_1(DELAY,17980)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist63_i_mul65_10_cnn1156_im0_cma_q_1_q <= i_mul65_10_cnn1156_im0_cma_q;
        end
    end

    // i_mul65_10_cnn1156_sums_align_5(BITSHIFT,2801)@761
    assign i_mul65_10_cnn1156_sums_align_5_qint = { redist63_i_mul65_10_cnn1156_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_10_cnn1156_sums_align_5_q = i_mul65_10_cnn1156_sums_align_5_qint[74:0];

    // i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11191)@761
    assign i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_10_cnn1156_sums_align_5_q[69:0];

    // i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11178)@761
    assign i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_10_cnn1156_sums_align_3_q[64:64];

    // i_mul65_10_cnn1156_bjA7(BITJOIN,2783)@754
    assign i_mul65_10_cnn1156_bjA7_q = {GND_q, i_mul65_10_cnn1156_bs1_merged_bit_select_c};

    // i_mul65_10_cnn1156_im5_cma(CHAINMULTADD,17806)@754 + 5
    // out q@760
    assign i_mul65_10_cnn1156_im5_cma_reset = ~ (resetn);
    assign i_mul65_10_cnn1156_im5_cma_ena0 = 1'b1;
    assign i_mul65_10_cnn1156_im5_cma_ena1 = i_mul65_10_cnn1156_im5_cma_ena0;
    assign i_mul65_10_cnn1156_im5_cma_ena2 = i_mul65_10_cnn1156_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_im5_cma_ah[0] <= i_mul65_10_cnn1156_bjA7_q;
        end
    end

    assign i_mul65_10_cnn1156_im5_cma_a0 = i_mul65_10_cnn1156_im5_cma_ah[0];
    assign i_mul65_10_cnn1156_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_10_cnn1156_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_10_cnn1156_im5_cma_ena2, i_mul65_10_cnn1156_im5_cma_ena1, i_mul65_10_cnn1156_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_10_cnn1156_im5_cma_a0),
        .coefsela(i_mul65_10_cnn1156_im5_cma_c0),
        .resulta(i_mul65_10_cnn1156_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_10_cnn1156_im5_cma_delay ( .xin(i_mul65_10_cnn1156_im5_cma_s0), .xout(i_mul65_10_cnn1156_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_10_cnn1156_im5_cma_q = i_mul65_10_cnn1156_im5_cma_qq[29:0];

    // redist62_i_mul65_10_cnn1156_im5_cma_q_1(DELAY,17979)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist62_i_mul65_10_cnn1156_im5_cma_q_1_q <= i_mul65_10_cnn1156_im5_cma_q;
        end
    end

    // i_mul65_10_cnn1156_sums_align_3(BITSHIFT,2799)@761
    assign i_mul65_10_cnn1156_sums_align_3_qint = { redist62_i_mul65_10_cnn1156_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_10_cnn1156_sums_align_3_q = i_mul65_10_cnn1156_sums_align_3_qint[64:0];

    // i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11183)@761
    assign i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_align_3_q};

    // i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2(ADD,9238)@761 + 1
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_q = i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11197)@762
    assign i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_10_cnn1156_sums_result_add_0_0_q[47:47];

    // i_mul65_10_cnn1156_bjA12(BITJOIN,2788)@754
    assign i_mul65_10_cnn1156_bjA12_q = {GND_q, i_mul65_10_cnn1156_bs1_merged_bit_select_d};

    // i_mul65_10_cnn1156_im10_cma(CHAINMULTADD,17807)@754 + 5
    // out q@760
    assign i_mul65_10_cnn1156_im10_cma_reset = ~ (resetn);
    assign i_mul65_10_cnn1156_im10_cma_ena0 = 1'b1;
    assign i_mul65_10_cnn1156_im10_cma_ena1 = i_mul65_10_cnn1156_im10_cma_ena0;
    assign i_mul65_10_cnn1156_im10_cma_ena2 = i_mul65_10_cnn1156_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_im10_cma_ah[0] <= i_mul65_10_cnn1156_bjA12_q;
        end
    end

    assign i_mul65_10_cnn1156_im10_cma_a0 = i_mul65_10_cnn1156_im10_cma_ah[0];
    assign i_mul65_10_cnn1156_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_10_cnn1156_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_10_cnn1156_im10_cma_ena2, i_mul65_10_cnn1156_im10_cma_ena1, i_mul65_10_cnn1156_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_10_cnn1156_im10_cma_a0),
        .coefsela(i_mul65_10_cnn1156_im10_cma_c0),
        .resulta(i_mul65_10_cnn1156_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_10_cnn1156_im10_cma_delay ( .xin(i_mul65_10_cnn1156_im10_cma_s0), .xout(i_mul65_10_cnn1156_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_10_cnn1156_im10_cma_q = i_mul65_10_cnn1156_im10_cma_qq[29:0];

    // redist61_i_mul65_10_cnn1156_im10_cma_q_1(DELAY,17978)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist61_i_mul65_10_cnn1156_im10_cma_q_1_q <= i_mul65_10_cnn1156_im10_cma_q;
        end
    end

    // i_mul65_10_cnn1156_sums_align_1(BITSHIFT,2797)@761
    assign i_mul65_10_cnn1156_sums_align_1_qint = { redist61_i_mul65_10_cnn1156_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_10_cnn1156_sums_align_1_q = i_mul65_10_cnn1156_sums_align_1_qint[46:0];

    // i_mul65_10_cnn1156_bjA17(BITJOIN,2793)@754
    assign i_mul65_10_cnn1156_bjA17_q = {GND_q, i_mul65_10_cnn1156_bs1_merged_bit_select_e};

    // i_mul65_10_cnn1156_im15_cma(CHAINMULTADD,17808)@754 + 5
    // out q@760
    assign i_mul65_10_cnn1156_im15_cma_reset = ~ (resetn);
    assign i_mul65_10_cnn1156_im15_cma_ena0 = 1'b1;
    assign i_mul65_10_cnn1156_im15_cma_ena1 = i_mul65_10_cnn1156_im15_cma_ena0;
    assign i_mul65_10_cnn1156_im15_cma_ena2 = i_mul65_10_cnn1156_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_im15_cma_ah[0] <= i_mul65_10_cnn1156_bjA17_q;
        end
    end

    assign i_mul65_10_cnn1156_im15_cma_a0 = i_mul65_10_cnn1156_im15_cma_ah[0];
    assign i_mul65_10_cnn1156_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_10_cnn1156_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_10_cnn1156_im15_cma_ena2, i_mul65_10_cnn1156_im15_cma_ena1, i_mul65_10_cnn1156_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_10_cnn1156_im15_cma_a0),
        .coefsela(i_mul65_10_cnn1156_im15_cma_c0),
        .resulta(i_mul65_10_cnn1156_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_10_cnn1156_im15_cma_delay ( .xin(i_mul65_10_cnn1156_im15_cma_s0), .xout(i_mul65_10_cnn1156_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_10_cnn1156_im15_cma_q = i_mul65_10_cnn1156_im15_cma_qq[29:0];

    // redist60_i_mul65_10_cnn1156_im15_cma_q_1(DELAY,17977)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist60_i_mul65_10_cnn1156_im15_cma_q_1_q <= i_mul65_10_cnn1156_im15_cma_q;
        end
    end

    // i_mul65_10_cnn1156_sums_result_add_0_0(ADD,2803)@761 + 1
    assign i_mul65_10_cnn1156_sums_result_add_0_0_a = {{18{redist60_i_mul65_10_cnn1156_im15_cma_q_1_q[29]}}, redist60_i_mul65_10_cnn1156_im15_cma_q_1_q};
    assign i_mul65_10_cnn1156_sums_result_add_0_0_b = {{1{i_mul65_10_cnn1156_sums_align_1_q[46]}}, i_mul65_10_cnn1156_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_sums_result_add_0_0_o <= $signed(i_mul65_10_cnn1156_sums_result_add_0_0_a) + $signed(i_mul65_10_cnn1156_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_10_cnn1156_sums_result_add_0_0_q = i_mul65_10_cnn1156_sums_result_add_0_0_o[47:0];

    // i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11219)@762
    assign i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_10_cnn1156_sums_result_add_0_0_q};

    // i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2(ADD,9249)@762 + 1
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_q = i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11231)@763
    assign i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11194)@761
    assign i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_10_cnn1156_sums_align_5_q[74:74];

    // redist586_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18503)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist586_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11193)@761
    assign i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_10_cnn1156_sums_align_5_q[74:70];

    // redist587_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18504)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist587_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11195)@762
    assign i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist586_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist587_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18505)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11190)@762
    assign i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist588_i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2(ADD,9239)@762 + 1
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_cin = i_mul65_10_cnn1156_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_10_cnn1156_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_q = i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11232)@763
    assign i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_10_cnn1156_sums_result_add_0_1_p2_of_2_q};

    // redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18496)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11227)@763
    assign i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist579_i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2(ADD,9250)@763 + 1
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_cin = i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_10_cnn1156_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_q = i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist754_i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_q_1(DELAY,18671)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist754_i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_10_cnn1156_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9251)@764
    assign i_mul65_10_cnn1156_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_10_cnn1156_sums_result_add_1_0_p2_of_2_q, redist754_i_mul65_10_cnn1156_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_10_cnn1156_extender_x(BITJOIN,2715)@764
    assign i_mul65_10_cnn1156_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_10_cnn1156_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_10_cnn1156_sel_x(BITSELECT,1047)@764
    assign bgTrunc_i_mul65_10_cnn1156_sel_x_b = i_mul65_10_cnn1156_extender_x_q[63:0];

    // i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select(BITSELECT,17909)@764
    assign i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_10_cnn1156_sel_x_b[63:54];
    assign i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_10_cnn1156_sel_x_b[53:36];
    assign i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_10_cnn1156_sel_x_b[35:18];
    assign i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_10_cnn1156_sel_x_b[17:0];

    // i_add_ptr66_10_cnn1161_mult_x_bjA2(BITJOIN,3288)@764
    assign i_add_ptr66_10_cnn1161_mult_x_bjA2_q = {GND_q, i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_10_cnn1161_mult_x_im0_shift0(BITSHIFT,8140)@764
    assign i_add_ptr66_10_cnn1161_mult_x_im0_shift0_qint = { i_add_ptr66_10_cnn1161_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_10_cnn1161_mult_x_im0_shift0_q = i_add_ptr66_10_cnn1161_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_align_5(BITSHIFT,3311)@764
    assign i_add_ptr66_10_cnn1161_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_10_cnn1161_mult_x_im0_shift0_q[12]}}, i_add_ptr66_10_cnn1161_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_10_cnn1161_mult_x_sums_align_5_q = i_add_ptr66_10_cnn1161_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_10_cnn1161_mult_x_bjA7(BITJOIN,3293)@764
    assign i_add_ptr66_10_cnn1161_mult_x_bjA7_q = {GND_q, i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_10_cnn1161_mult_x_im5_shift0(BITSHIFT,8141)@764
    assign i_add_ptr66_10_cnn1161_mult_x_im5_shift0_qint = { i_add_ptr66_10_cnn1161_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_10_cnn1161_mult_x_im5_shift0_q = i_add_ptr66_10_cnn1161_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_align_3(BITSHIFT,3309)@764
    assign i_add_ptr66_10_cnn1161_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_10_cnn1161_mult_x_im5_shift0_q[20]}}, i_add_ptr66_10_cnn1161_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_10_cnn1161_mult_x_sums_align_3_q = i_add_ptr66_10_cnn1161_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1(ADD,3314)@764 + 1
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_10_cnn1161_mult_x_sums_align_3_q[58]}}, i_add_ptr66_10_cnn1161_mult_x_sums_align_3_q};
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_10_cnn1161_mult_x_sums_align_5_q[68]}}, i_add_ptr66_10_cnn1161_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_q = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12110)@765
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_10_cnn1161_mult_x_bjA12(BITJOIN,3298)@764
    assign i_add_ptr66_10_cnn1161_mult_x_bjA12_q = {GND_q, i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_10_cnn1161_mult_x_im10_shift0(BITSHIFT,8142)@764
    assign i_add_ptr66_10_cnn1161_mult_x_im10_shift0_qint = { i_add_ptr66_10_cnn1161_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_10_cnn1161_mult_x_im10_shift0_q = i_add_ptr66_10_cnn1161_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_align_1(BITSHIFT,3307)@764
    assign i_add_ptr66_10_cnn1161_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_10_cnn1161_mult_x_im10_shift0_q[20]}}, i_add_ptr66_10_cnn1161_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_10_cnn1161_mult_x_sums_align_1_q = i_add_ptr66_10_cnn1161_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_10_cnn1161_mult_x_bjA17(BITJOIN,3303)@764
    assign i_add_ptr66_10_cnn1161_mult_x_bjA17_q = {GND_q, i_add_ptr66_10_cnn1161_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_10_cnn1161_mult_x_im15_shift0(BITSHIFT,8143)@764
    assign i_add_ptr66_10_cnn1161_mult_x_im15_shift0_qint = { i_add_ptr66_10_cnn1161_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_10_cnn1161_mult_x_im15_shift0_q = i_add_ptr66_10_cnn1161_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0(ADD,3313)@764 + 1
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_10_cnn1161_mult_x_im15_shift0_q[20]}}, i_add_ptr66_10_cnn1161_mult_x_im15_shift0_q};
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_10_cnn1161_mult_x_sums_align_1_q[40]}}, i_add_ptr66_10_cnn1161_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_q = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12138)@765
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2(ADD,9601)@765 + 1
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12143)@765
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_0_1_q[69:69];

    // redist350_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18267)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist350_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist351_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18268)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist351_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2(ADD,9602)@766 + 1
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist351_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist351_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist350_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist350_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist737_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18654)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist737_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9603)@767
    assign i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p2_of_2_q, redist737_i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_10_cnn1161_mult_extender_x(BITJOIN,1277)@767
    assign i_add_ptr66_10_cnn1161_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_10_cnn1161_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_10_cnn1161_trunc_sel_x(BITSELECT,1279)@767
    assign i_add_ptr66_10_cnn1161_trunc_sel_x_b = i_add_ptr66_10_cnn1161_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157(BLACKBOX,682)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_1158 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_select_63(BITSELECT,685)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_join(BITJOIN,684)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_10_cnn1161_add_x(ADD,1271)@767
    assign i_add_ptr66_10_cnn1161_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer14_cnn1157_vt_join_q};
    assign i_add_ptr66_10_cnn1161_add_x_b = {1'b0, i_add_ptr66_10_cnn1161_trunc_sel_x_b};
    assign i_add_ptr66_10_cnn1161_add_x_o = $unsigned(i_add_ptr66_10_cnn1161_add_x_a) + $unsigned(i_add_ptr66_10_cnn1161_add_x_b);
    assign i_add_ptr66_10_cnn1161_add_x_q = i_add_ptr66_10_cnn1161_add_x_o[64:0];

    // i_add_ptr66_10_cnn1161_dupName_0_trunc_sel_x(BITSELECT,1280)@767
    assign i_add_ptr66_10_cnn1161_dupName_0_trunc_sel_x_b = i_add_ptr66_10_cnn1161_add_x_q[63:0];

    // i_add_ptr66_10_cnn1160_vt_select_63(BITSELECT,54)@767
    assign i_add_ptr66_10_cnn1160_vt_select_63_b = i_add_ptr66_10_cnn1161_dupName_0_trunc_sel_x_b[63:2];

    // redist878_i_add_ptr66_10_cnn1160_vt_select_63_b_1(DELAY,18795)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist878_i_add_ptr66_10_cnn1160_vt_select_63_b_1_q <= i_add_ptr66_10_cnn1160_vt_select_63_b;
        end
    end

    // i_add_ptr66_10_cnn1160_vt_join(BITJOIN,53)@768
    assign i_add_ptr66_10_cnn1160_vt_join_q = {redist878_i_add_ptr66_10_cnn1160_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_10_cnn1187_add_x(ADD,1841)@768
    assign i_add_ptr70_3_10_cnn1187_add_x_a = {1'b0, i_add_ptr66_10_cnn1160_vt_join_q};
    assign i_add_ptr70_3_10_cnn1187_add_x_b = {1'b0, i_add_ptr70_3_10_cnn1187_trunc_sel_x_b};
    assign i_add_ptr70_3_10_cnn1187_add_x_o = $unsigned(i_add_ptr70_3_10_cnn1187_add_x_a) + $unsigned(i_add_ptr70_3_10_cnn1187_add_x_b);
    assign i_add_ptr70_3_10_cnn1187_add_x_q = i_add_ptr70_3_10_cnn1187_add_x_o[64:0];

    // i_add_ptr70_3_10_cnn1187_dupName_0_trunc_sel_x(BITSELECT,1850)@768
    assign i_add_ptr70_3_10_cnn1187_dupName_0_trunc_sel_x_b = i_add_ptr70_3_10_cnn1187_add_x_q[63:0];

    // i_add_ptr70_3_10_cnn1186_vt_select_63(BITSELECT,225)@768
    assign i_add_ptr70_3_10_cnn1186_vt_select_63_b = i_add_ptr70_3_10_cnn1187_dupName_0_trunc_sel_x_b[63:2];

    // redist821_i_add_ptr70_3_10_cnn1186_vt_select_63_b_1(DELAY,18738)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist821_i_add_ptr70_3_10_cnn1186_vt_select_63_b_1_q <= i_add_ptr70_3_10_cnn1186_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_10_cnn1186_vt_join(BITJOIN,224)@769
    assign i_add_ptr70_3_10_cnn1186_vt_join_q = {redist821_i_add_ptr70_3_10_cnn1186_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_10_cnn1189_add_x(ADD,2481)@769
    assign i_add_ptr73_371_10_cnn1189_add_x_a = {1'b0, i_add_ptr70_3_10_cnn1186_vt_join_q};
    assign i_add_ptr73_371_10_cnn1189_add_x_b = {1'b0, i_add_ptr73_371_10_cnn1189_trunc_sel_x_b};
    assign i_add_ptr73_371_10_cnn1189_add_x_o = $unsigned(i_add_ptr73_371_10_cnn1189_add_x_a) + $unsigned(i_add_ptr73_371_10_cnn1189_add_x_b);
    assign i_add_ptr73_371_10_cnn1189_add_x_q = i_add_ptr73_371_10_cnn1189_add_x_o[64:0];

    // i_add_ptr73_371_10_cnn1189_dupName_0_trunc_sel_x(BITSELECT,2490)@769
    assign i_add_ptr73_371_10_cnn1189_dupName_0_trunc_sel_x_b = i_add_ptr73_371_10_cnn1189_add_x_q[63:0];

    // i_add_ptr73_371_10_cnn1188_vt_select_63(BITSELECT,417)@769
    assign i_add_ptr73_371_10_cnn1188_vt_select_63_b = i_add_ptr73_371_10_cnn1189_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_10_cnn1188_vt_join(BITJOIN,416)@769
    assign i_add_ptr73_371_10_cnn1188_vt_join_q = {i_add_ptr73_371_10_cnn1188_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_select_63(BITSELECT,882)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_select_63_b = i_add_ptr73_371_10_cnn1188_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_join(BITJOIN,881)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn151_cnn1183(BLACKBOX,615)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_151_cnn1184 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn151_cnn1183 (
        .in_intel_reserved_ffwd_70_0(in_intel_reserved_ffwd_70_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_70_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn151_cnn1183_out_dest_data_out_70_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0(BITSHIFT,8552)@766
    assign i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0_q = i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5(BITSHIFT,6401)@766
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_10_cnn1181_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5_q = i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0(BITSHIFT,8553)@766
    assign i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0_q = i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3(BITSHIFT,6399)@766
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_10_cnn1181_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3_q = i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1(ADD,6404)@766 + 1
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_10_cnn1181_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_10_cnn1181_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15818)@767
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0(BITSHIFT,8554)@766
    assign i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0_q = i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1(BITSHIFT,6397)@766
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_10_cnn1181_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1_q = i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0(BITSHIFT,8555)@766
    assign i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0_q = i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0(ADD,6403)@766 + 1
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_10_cnn1181_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_10_cnn1181_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15846)@767
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2(ADD,10734)@767 + 1
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15851)@767
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_0_1_q[69:69];

    // redist144_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18061)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist144_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist145_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18062)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist145_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2(ADD,10735)@768 + 1
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist145_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist145_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist144_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist144_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist634_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18551)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist634_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10736)@769
    assign i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p2_of_2_q, redist634_i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_10_cnn1181_mult_extender_x(BITJOIN,2307)@769
    assign i_add_ptr73_270_10_cnn1181_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_10_cnn1181_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_10_cnn1181_trunc_sel_x(BITSELECT,2309)@769
    assign i_add_ptr73_270_10_cnn1181_trunc_sel_x_b = i_add_ptr73_270_10_cnn1181_mult_extender_x_q[63:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0(BITSHIFT,8300)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0_q = i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5(BITSHIFT,4511)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_10_cnn1179_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5_q = i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0(BITSHIFT,8301)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0_q = i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3(BITSHIFT,4509)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_10_cnn1179_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3_q = i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1(ADD,4514)@765 + 1
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_10_cnn1179_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_10_cnn1179_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13550)@766
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0(BITSHIFT,8302)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0_q = i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1(BITSHIFT,4507)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_10_cnn1179_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1_q = i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0(BITSHIFT,8303)@765
    assign i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0_q = i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0(ADD,4513)@765 + 1
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_10_cnn1179_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_10_cnn1179_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13578)@766
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2(ADD,10041)@766 + 1
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13583)@766
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_0_1_q[69:69];

    // redist270_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18187)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist270_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist271_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18188)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist271_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2(ADD,10042)@767 + 1
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist271_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist271_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist270_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist270_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist697_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18614)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist697_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10043)@768
    assign i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p2_of_2_q, redist697_i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_10_cnn1179_mult_extender_x(BITJOIN,1677)@768
    assign i_add_ptr70_2_10_cnn1179_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_10_cnn1179_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_10_cnn1179_trunc_sel_x(BITSELECT,1679)@768
    assign i_add_ptr70_2_10_cnn1179_trunc_sel_x_b = i_add_ptr70_2_10_cnn1179_mult_extender_x_q[63:0];

    // i_add_ptr70_2_10_cnn1179_add_x(ADD,1671)@768
    assign i_add_ptr70_2_10_cnn1179_add_x_a = {1'b0, i_add_ptr66_10_cnn1160_vt_join_q};
    assign i_add_ptr70_2_10_cnn1179_add_x_b = {1'b0, i_add_ptr70_2_10_cnn1179_trunc_sel_x_b};
    assign i_add_ptr70_2_10_cnn1179_add_x_o = $unsigned(i_add_ptr70_2_10_cnn1179_add_x_a) + $unsigned(i_add_ptr70_2_10_cnn1179_add_x_b);
    assign i_add_ptr70_2_10_cnn1179_add_x_q = i_add_ptr70_2_10_cnn1179_add_x_o[64:0];

    // i_add_ptr70_2_10_cnn1179_dupName_0_trunc_sel_x(BITSELECT,1680)@768
    assign i_add_ptr70_2_10_cnn1179_dupName_0_trunc_sel_x_b = i_add_ptr70_2_10_cnn1179_add_x_q[63:0];

    // i_add_ptr70_2_10_cnn1178_vt_select_63(BITSELECT,174)@768
    assign i_add_ptr70_2_10_cnn1178_vt_select_63_b = i_add_ptr70_2_10_cnn1179_dupName_0_trunc_sel_x_b[63:2];

    // redist838_i_add_ptr70_2_10_cnn1178_vt_select_63_b_1(DELAY,18755)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist838_i_add_ptr70_2_10_cnn1178_vt_select_63_b_1_q <= i_add_ptr70_2_10_cnn1178_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_10_cnn1178_vt_join(BITJOIN,173)@769
    assign i_add_ptr70_2_10_cnn1178_vt_join_q = {redist838_i_add_ptr70_2_10_cnn1178_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_10_cnn1181_add_x(ADD,2301)@769
    assign i_add_ptr73_270_10_cnn1181_add_x_a = {1'b0, i_add_ptr70_2_10_cnn1178_vt_join_q};
    assign i_add_ptr73_270_10_cnn1181_add_x_b = {1'b0, i_add_ptr73_270_10_cnn1181_trunc_sel_x_b};
    assign i_add_ptr73_270_10_cnn1181_add_x_o = $unsigned(i_add_ptr73_270_10_cnn1181_add_x_a) + $unsigned(i_add_ptr73_270_10_cnn1181_add_x_b);
    assign i_add_ptr73_270_10_cnn1181_add_x_q = i_add_ptr73_270_10_cnn1181_add_x_o[64:0];

    // i_add_ptr73_270_10_cnn1181_dupName_0_trunc_sel_x(BITSELECT,2310)@769
    assign i_add_ptr73_270_10_cnn1181_dupName_0_trunc_sel_x_b = i_add_ptr73_270_10_cnn1181_add_x_q[63:0];

    // i_add_ptr73_270_10_cnn1180_vt_select_63(BITSELECT,363)@769
    assign i_add_ptr73_270_10_cnn1180_vt_select_63_b = i_add_ptr73_270_10_cnn1181_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_10_cnn1180_vt_join(BITJOIN,362)@769
    assign i_add_ptr73_270_10_cnn1180_vt_join_q = {i_add_ptr73_270_10_cnn1180_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_select_63(BITSELECT,878)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_select_63_b = i_add_ptr73_270_10_cnn1180_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_join(BITJOIN,877)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn150_cnn1175(BLACKBOX,614)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_150_cnn1176 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn150_cnn1175 (
        .in_intel_reserved_ffwd_69_0(in_intel_reserved_ffwd_69_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_69_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn150_cnn1175_out_dest_data_out_69_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0(BITSHIFT,8484)@766
    assign i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0_q = i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5(BITSHIFT,5891)@766
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_10_cnn1173_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5_q = i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0(BITSHIFT,8485)@766
    assign i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0_q = i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3(BITSHIFT,5889)@766
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_10_cnn1173_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3_q = i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1(ADD,5894)@766 + 1
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_10_cnn1173_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_10_cnn1173_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15206)@767
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0(BITSHIFT,8486)@766
    assign i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0_q = i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1(BITSHIFT,5887)@766
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_10_cnn1173_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1_q = i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0(BITSHIFT,8487)@766
    assign i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0_q = i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0(ADD,5893)@766 + 1
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_10_cnn1173_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_10_cnn1173_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15234)@767
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2(ADD,10547)@767 + 1
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15239)@767
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_0_1_q[69:69];

    // redist178_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18095)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist178_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist179_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18096)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist179_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2(ADD,10548)@768 + 1
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist179_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist179_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist178_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist178_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist651_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18568)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist651_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10549)@769
    assign i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p2_of_2_q, redist651_i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_10_cnn1173_mult_extender_x(BITJOIN,2137)@769
    assign i_add_ptr73_169_10_cnn1173_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_10_cnn1173_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_10_cnn1173_trunc_sel_x(BITSELECT,2139)@769
    assign i_add_ptr73_169_10_cnn1173_trunc_sel_x_b = i_add_ptr73_169_10_cnn1173_mult_extender_x_q[63:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0(BITSHIFT,8232)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0_q = i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5(BITSHIFT,4001)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_10_cnn1171_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5_q = i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0(BITSHIFT,8233)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0_q = i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3(BITSHIFT,3999)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_10_cnn1171_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3_q = i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1(ADD,4004)@765 + 1
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_10_cnn1171_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_10_cnn1171_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12938)@766
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0(BITSHIFT,8234)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0_q = i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1(BITSHIFT,3997)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_10_cnn1171_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1_q = i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0(BITSHIFT,8235)@765
    assign i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0_q = i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0(ADD,4003)@765 + 1
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_10_cnn1171_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_10_cnn1171_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12966)@766
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2(ADD,9854)@766 + 1
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12971)@766
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_0_1_q[69:69];

    // redist304_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18221)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist304_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist305_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18222)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist305_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2(ADD,9855)@767 + 1
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist305_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist305_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist304_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist304_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist714_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18631)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist714_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9856)@768
    assign i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p2_of_2_q, redist714_i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_10_cnn1171_mult_extender_x(BITJOIN,1507)@768
    assign i_add_ptr70_1_10_cnn1171_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_10_cnn1171_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_10_cnn1171_trunc_sel_x(BITSELECT,1509)@768
    assign i_add_ptr70_1_10_cnn1171_trunc_sel_x_b = i_add_ptr70_1_10_cnn1171_mult_extender_x_q[63:0];

    // i_add_ptr70_1_10_cnn1171_add_x(ADD,1501)@768
    assign i_add_ptr70_1_10_cnn1171_add_x_a = {1'b0, i_add_ptr66_10_cnn1160_vt_join_q};
    assign i_add_ptr70_1_10_cnn1171_add_x_b = {1'b0, i_add_ptr70_1_10_cnn1171_trunc_sel_x_b};
    assign i_add_ptr70_1_10_cnn1171_add_x_o = $unsigned(i_add_ptr70_1_10_cnn1171_add_x_a) + $unsigned(i_add_ptr70_1_10_cnn1171_add_x_b);
    assign i_add_ptr70_1_10_cnn1171_add_x_q = i_add_ptr70_1_10_cnn1171_add_x_o[64:0];

    // i_add_ptr70_1_10_cnn1171_dupName_0_trunc_sel_x(BITSELECT,1510)@768
    assign i_add_ptr70_1_10_cnn1171_dupName_0_trunc_sel_x_b = i_add_ptr70_1_10_cnn1171_add_x_q[63:0];

    // i_add_ptr70_1_10_cnn1170_vt_select_63(BITSELECT,123)@768
    assign i_add_ptr70_1_10_cnn1170_vt_select_63_b = i_add_ptr70_1_10_cnn1171_dupName_0_trunc_sel_x_b[63:2];

    // redist855_i_add_ptr70_1_10_cnn1170_vt_select_63_b_1(DELAY,18772)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist855_i_add_ptr70_1_10_cnn1170_vt_select_63_b_1_q <= i_add_ptr70_1_10_cnn1170_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_10_cnn1170_vt_join(BITJOIN,122)@769
    assign i_add_ptr70_1_10_cnn1170_vt_join_q = {redist855_i_add_ptr70_1_10_cnn1170_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_10_cnn1173_add_x(ADD,2131)@769
    assign i_add_ptr73_169_10_cnn1173_add_x_a = {1'b0, i_add_ptr70_1_10_cnn1170_vt_join_q};
    assign i_add_ptr73_169_10_cnn1173_add_x_b = {1'b0, i_add_ptr73_169_10_cnn1173_trunc_sel_x_b};
    assign i_add_ptr73_169_10_cnn1173_add_x_o = $unsigned(i_add_ptr73_169_10_cnn1173_add_x_a) + $unsigned(i_add_ptr73_169_10_cnn1173_add_x_b);
    assign i_add_ptr73_169_10_cnn1173_add_x_q = i_add_ptr73_169_10_cnn1173_add_x_o[64:0];

    // i_add_ptr73_169_10_cnn1173_dupName_0_trunc_sel_x(BITSELECT,2140)@769
    assign i_add_ptr73_169_10_cnn1173_dupName_0_trunc_sel_x_b = i_add_ptr73_169_10_cnn1173_add_x_q[63:0];

    // i_add_ptr73_169_10_cnn1172_vt_select_63(BITSELECT,312)@769
    assign i_add_ptr73_169_10_cnn1172_vt_select_63_b = i_add_ptr73_169_10_cnn1173_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_10_cnn1172_vt_join(BITJOIN,311)@769
    assign i_add_ptr73_169_10_cnn1172_vt_join_q = {i_add_ptr73_169_10_cnn1172_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_select_63(BITSELECT,874)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_select_63_b = i_add_ptr73_169_10_cnn1172_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_join(BITJOIN,873)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn149_cnn1167(BLACKBOX,613)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_149_cnn1168 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn149_cnn1167 (
        .in_intel_reserved_ffwd_68_0(in_intel_reserved_ffwd_68_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_68_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn149_cnn1167_out_dest_data_out_68_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_10_cnn1165_mult_x_im0_shift0(BITSHIFT,8460)@766
    assign i_add_ptr73_10_cnn1165_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_10_cnn1165_mult_x_im0_shift0_q = i_add_ptr73_10_cnn1165_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_align_5(BITSHIFT,5711)@766
    assign i_add_ptr73_10_cnn1165_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_10_cnn1165_mult_x_im0_shift0_q[12]}}, i_add_ptr73_10_cnn1165_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_10_cnn1165_mult_x_sums_align_5_q = i_add_ptr73_10_cnn1165_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_10_cnn1165_mult_x_im5_shift0(BITSHIFT,8461)@766
    assign i_add_ptr73_10_cnn1165_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_10_cnn1165_mult_x_im5_shift0_q = i_add_ptr73_10_cnn1165_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_align_3(BITSHIFT,5709)@766
    assign i_add_ptr73_10_cnn1165_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_10_cnn1165_mult_x_im5_shift0_q[20]}}, i_add_ptr73_10_cnn1165_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_10_cnn1165_mult_x_sums_align_3_q = i_add_ptr73_10_cnn1165_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1(ADD,5714)@766 + 1
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_10_cnn1165_mult_x_sums_align_3_q[58]}}, i_add_ptr73_10_cnn1165_mult_x_sums_align_3_q};
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_10_cnn1165_mult_x_sums_align_5_q[68]}}, i_add_ptr73_10_cnn1165_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_q = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14990)@767
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_10_cnn1165_mult_x_im10_shift0(BITSHIFT,8462)@766
    assign i_add_ptr73_10_cnn1165_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_10_cnn1165_mult_x_im10_shift0_q = i_add_ptr73_10_cnn1165_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_align_1(BITSHIFT,5707)@766
    assign i_add_ptr73_10_cnn1165_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_10_cnn1165_mult_x_im10_shift0_q[20]}}, i_add_ptr73_10_cnn1165_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_10_cnn1165_mult_x_sums_align_1_q = i_add_ptr73_10_cnn1165_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_10_cnn1165_mult_x_im15_shift0(BITSHIFT,8463)@766
    assign i_add_ptr73_10_cnn1165_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_10_cnn1165_mult_x_im15_shift0_q = i_add_ptr73_10_cnn1165_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0(ADD,5713)@766 + 1
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_10_cnn1165_mult_x_im15_shift0_q[20]}}, i_add_ptr73_10_cnn1165_mult_x_im15_shift0_q};
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_10_cnn1165_mult_x_sums_align_1_q[40]}}, i_add_ptr73_10_cnn1165_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_q = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15018)@767
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2(ADD,10481)@767 + 1
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15023)@767
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_0_1_q[69:69];

    // redist190_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18107)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist190_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist191_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18108)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist191_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2(ADD,10482)@768 + 1
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist191_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist191_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist190_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist190_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist657_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18574)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist657_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10483)@769
    assign i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p2_of_2_q, redist657_i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_10_cnn1165_mult_extender_x(BITJOIN,2077)@769
    assign i_add_ptr73_10_cnn1165_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_10_cnn1165_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_10_cnn1165_trunc_sel_x(BITSELECT,2079)@769
    assign i_add_ptr73_10_cnn1165_trunc_sel_x_b = i_add_ptr73_10_cnn1165_mult_extender_x_q[63:0];

    // i_add_ptr70_10_cnn1163_mult_x_im0_shift0(BITSHIFT,8204)@765
    assign i_add_ptr70_10_cnn1163_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_10_cnn1163_mult_x_im0_shift0_q = i_add_ptr70_10_cnn1163_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_align_5(BITSHIFT,3791)@765
    assign i_add_ptr70_10_cnn1163_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_10_cnn1163_mult_x_im0_shift0_q[12]}}, i_add_ptr70_10_cnn1163_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_10_cnn1163_mult_x_sums_align_5_q = i_add_ptr70_10_cnn1163_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_10_cnn1163_mult_x_im5_shift0(BITSHIFT,8205)@765
    assign i_add_ptr70_10_cnn1163_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_10_cnn1163_mult_x_im5_shift0_q = i_add_ptr70_10_cnn1163_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_align_3(BITSHIFT,3789)@765
    assign i_add_ptr70_10_cnn1163_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_10_cnn1163_mult_x_im5_shift0_q[20]}}, i_add_ptr70_10_cnn1163_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_10_cnn1163_mult_x_sums_align_3_q = i_add_ptr70_10_cnn1163_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1(ADD,3794)@765 + 1
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_10_cnn1163_mult_x_sums_align_3_q[58]}}, i_add_ptr70_10_cnn1163_mult_x_sums_align_3_q};
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_10_cnn1163_mult_x_sums_align_5_q[68]}}, i_add_ptr70_10_cnn1163_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_q = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12686)@766
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_10_cnn1163_mult_x_im10_shift0(BITSHIFT,8206)@765
    assign i_add_ptr70_10_cnn1163_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_10_cnn1163_mult_x_im10_shift0_q = i_add_ptr70_10_cnn1163_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_align_1(BITSHIFT,3787)@765
    assign i_add_ptr70_10_cnn1163_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_10_cnn1163_mult_x_im10_shift0_q[20]}}, i_add_ptr70_10_cnn1163_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_10_cnn1163_mult_x_sums_align_1_q = i_add_ptr70_10_cnn1163_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_10_cnn1163_mult_x_im15_shift0(BITSHIFT,8207)@765
    assign i_add_ptr70_10_cnn1163_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_10_cnn1163_mult_x_im15_shift0_q = i_add_ptr70_10_cnn1163_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0(ADD,3793)@765 + 1
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_10_cnn1163_mult_x_im15_shift0_q[20]}}, i_add_ptr70_10_cnn1163_mult_x_im15_shift0_q};
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_10_cnn1163_mult_x_sums_align_1_q[40]}}, i_add_ptr70_10_cnn1163_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_q = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12714)@766
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2(ADD,9777)@766 + 1
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12719)@766
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_0_1_q[69:69];

    // redist318_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18235)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist318_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist319_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18236)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist319_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2(ADD,9778)@767 + 1
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist319_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist319_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist318_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist318_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist721_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18638)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist721_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9779)@768
    assign i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p2_of_2_q, redist721_i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_10_cnn1163_mult_extender_x(BITJOIN,1437)@768
    assign i_add_ptr70_10_cnn1163_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_10_cnn1163_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_10_cnn1163_trunc_sel_x(BITSELECT,1439)@768
    assign i_add_ptr70_10_cnn1163_trunc_sel_x_b = i_add_ptr70_10_cnn1163_mult_extender_x_q[63:0];

    // i_add_ptr70_10_cnn1163_add_x(ADD,1431)@768
    assign i_add_ptr70_10_cnn1163_add_x_a = {1'b0, i_add_ptr66_10_cnn1160_vt_join_q};
    assign i_add_ptr70_10_cnn1163_add_x_b = {1'b0, i_add_ptr70_10_cnn1163_trunc_sel_x_b};
    assign i_add_ptr70_10_cnn1163_add_x_o = $unsigned(i_add_ptr70_10_cnn1163_add_x_a) + $unsigned(i_add_ptr70_10_cnn1163_add_x_b);
    assign i_add_ptr70_10_cnn1163_add_x_q = i_add_ptr70_10_cnn1163_add_x_o[64:0];

    // i_add_ptr70_10_cnn1163_dupName_0_trunc_sel_x(BITSELECT,1440)@768
    assign i_add_ptr70_10_cnn1163_dupName_0_trunc_sel_x_b = i_add_ptr70_10_cnn1163_add_x_q[63:0];

    // i_add_ptr70_10_cnn1162_vt_select_63(BITSELECT,102)@768
    assign i_add_ptr70_10_cnn1162_vt_select_63_b = i_add_ptr70_10_cnn1163_dupName_0_trunc_sel_x_b[63:2];

    // redist862_i_add_ptr70_10_cnn1162_vt_select_63_b_1(DELAY,18779)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist862_i_add_ptr70_10_cnn1162_vt_select_63_b_1_q <= i_add_ptr70_10_cnn1162_vt_select_63_b;
        end
    end

    // i_add_ptr70_10_cnn1162_vt_join(BITJOIN,101)@769
    assign i_add_ptr70_10_cnn1162_vt_join_q = {redist862_i_add_ptr70_10_cnn1162_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_10_cnn1165_add_x(ADD,2071)@769
    assign i_add_ptr73_10_cnn1165_add_x_a = {1'b0, i_add_ptr70_10_cnn1162_vt_join_q};
    assign i_add_ptr73_10_cnn1165_add_x_b = {1'b0, i_add_ptr73_10_cnn1165_trunc_sel_x_b};
    assign i_add_ptr73_10_cnn1165_add_x_o = $unsigned(i_add_ptr73_10_cnn1165_add_x_a) + $unsigned(i_add_ptr73_10_cnn1165_add_x_b);
    assign i_add_ptr73_10_cnn1165_add_x_q = i_add_ptr73_10_cnn1165_add_x_o[64:0];

    // i_add_ptr73_10_cnn1165_dupName_0_trunc_sel_x(BITSELECT,2080)@769
    assign i_add_ptr73_10_cnn1165_dupName_0_trunc_sel_x_b = i_add_ptr73_10_cnn1165_add_x_q[63:0];

    // i_add_ptr73_10_cnn1164_vt_select_63(BITSELECT,294)@769
    assign i_add_ptr73_10_cnn1164_vt_select_63_b = i_add_ptr73_10_cnn1165_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_10_cnn1164_vt_join(BITJOIN,293)@769
    assign i_add_ptr73_10_cnn1164_vt_join_q = {i_add_ptr73_10_cnn1164_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_select_63(BITSELECT,870)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_select_63_b = i_add_ptr73_10_cnn1164_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_join(BITJOIN,869)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn148_cnn1152(BLACKBOX,612)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_148_cnn1153 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn148_cnn1152 (
        .in_intel_reserved_ffwd_67_0(in_intel_reserved_ffwd_67_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_67_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn148_cnn1152_out_dest_data_out_67_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0(BITSHIFT,8680)@766
    assign i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0_q = i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5(BITSHIFT,7361)@766
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_9_cnn1150_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5_q = i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0(BITSHIFT,8681)@766
    assign i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0_q = i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3(BITSHIFT,7359)@766
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_9_cnn1150_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3_q = i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1(ADD,7364)@766 + 1
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_9_cnn1150_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_9_cnn1150_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16970)@767
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0(BITSHIFT,8682)@766
    assign i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0_q = i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1(BITSHIFT,7357)@766
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_9_cnn1150_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1_q = i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0(BITSHIFT,8683)@766
    assign i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0_q = i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0(ADD,7363)@766 + 1
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_9_cnn1150_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_9_cnn1150_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16998)@767
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2(ADD,11086)@767 + 1
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17003)@767
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_0_1_q[69:69];

    // redist80_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17997)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist80_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist81_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17998)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist81_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2(ADD,11087)@768 + 1
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist81_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist81_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist80_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist80_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist602_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18519)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist602_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11088)@769
    assign i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p2_of_2_q, redist602_i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_9_cnn1150_mult_extender_x(BITJOIN,2627)@769
    assign i_add_ptr73_371_9_cnn1150_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_9_cnn1150_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_9_cnn1150_trunc_sel_x(BITSELECT,2629)@769
    assign i_add_ptr73_371_9_cnn1150_trunc_sel_x_b = i_add_ptr73_371_9_cnn1150_mult_extender_x_q[63:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0(BITSHIFT,8424)@765
    assign i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0_q = i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5(BITSHIFT,5441)@765
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_9_cnn1148_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5_q = i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0(BITSHIFT,8425)@765
    assign i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0_q = i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3(BITSHIFT,5439)@765
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_9_cnn1148_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3_q = i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1(ADD,5444)@765 + 1
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_9_cnn1148_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_9_cnn1148_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14666)@766
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0(BITSHIFT,8426)@765
    assign i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0_q = i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1(BITSHIFT,5437)@765
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_9_cnn1148_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1_q = i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0(BITSHIFT,8427)@765
    assign i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0_q = i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0(ADD,5443)@765 + 1
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_9_cnn1148_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_9_cnn1148_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14694)@766
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2(ADD,10382)@766 + 1
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14699)@766
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_0_1_q[69:69];

    // redist208_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18125)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist208_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist209_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18126)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist209_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2(ADD,10383)@767 + 1
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist209_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist209_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist208_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist208_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist666_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18583)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist666_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10384)@768
    assign i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p2_of_2_q, redist666_i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_9_cnn1148_mult_extender_x(BITJOIN,1987)@768
    assign i_add_ptr70_3_9_cnn1148_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_9_cnn1148_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_9_cnn1148_trunc_sel_x(BITSELECT,1989)@768
    assign i_add_ptr70_3_9_cnn1148_trunc_sel_x_b = i_add_ptr70_3_9_cnn1148_mult_extender_x_q[63:0];

    // c_i64_9gr(CONSTANT,50)
    assign c_i64_9gr_q = 64'b0000000000000000000000000000000000000000000000000000000000001001;

    // i_inc79_8_cnn1116(LOGICAL,547)@754
    assign i_inc79_8_cnn1116_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_9gr_q;

    // i_inc79_8_cnn1116_vt_select_2_merged_bit_select(BITSELECT,17890)@754
    assign i_inc79_8_cnn1116_vt_select_2_merged_bit_select_b = i_inc79_8_cnn1116_q[2:1];
    assign i_inc79_8_cnn1116_vt_select_2_merged_bit_select_c = i_inc79_8_cnn1116_q[63:4];

    // i_inc79_8_cnn1116_vt_join(BITJOIN,550)@754
    assign i_inc79_8_cnn1116_vt_join_q = {i_inc79_8_cnn1116_vt_select_2_merged_bit_select_c, VCC_q, i_inc79_8_cnn1116_vt_select_2_merged_bit_select_b, VCC_q};

    // i_mul65_9_cnn1117_bs1_merged_bit_select(BITSELECT,17891)@754
    assign i_mul65_9_cnn1117_bs1_merged_bit_select_b = i_inc79_8_cnn1116_vt_join_q[63:54];
    assign i_mul65_9_cnn1117_bs1_merged_bit_select_c = i_inc79_8_cnn1116_vt_join_q[53:36];
    assign i_mul65_9_cnn1117_bs1_merged_bit_select_d = i_inc79_8_cnn1116_vt_join_q[35:18];
    assign i_mul65_9_cnn1117_bs1_merged_bit_select_e = i_inc79_8_cnn1116_vt_join_q[17:0];

    // i_mul65_9_cnn1117_bjA2(BITJOIN,3198)@754
    assign i_mul65_9_cnn1117_bjA2_q = {GND_q, i_mul65_9_cnn1117_bs1_merged_bit_select_b};

    // i_mul65_9_cnn1117_im0_cma(CHAINMULTADD,17861)@754 + 5
    // out q@760
    assign i_mul65_9_cnn1117_im0_cma_reset = ~ (resetn);
    assign i_mul65_9_cnn1117_im0_cma_ena0 = 1'b1;
    assign i_mul65_9_cnn1117_im0_cma_ena1 = i_mul65_9_cnn1117_im0_cma_ena0;
    assign i_mul65_9_cnn1117_im0_cma_ena2 = i_mul65_9_cnn1117_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_im0_cma_ah[0] <= i_mul65_9_cnn1117_bjA2_q;
        end
    end

    assign i_mul65_9_cnn1117_im0_cma_a0 = i_mul65_9_cnn1117_im0_cma_ah[0];
    assign i_mul65_9_cnn1117_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_9_cnn1117_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_9_cnn1117_im0_cma_ena2, i_mul65_9_cnn1117_im0_cma_ena1, i_mul65_9_cnn1117_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_9_cnn1117_im0_cma_a0),
        .coefsela(i_mul65_9_cnn1117_im0_cma_c0),
        .resulta(i_mul65_9_cnn1117_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_9_cnn1117_im0_cma_delay ( .xin(i_mul65_9_cnn1117_im0_cma_s0), .xout(i_mul65_9_cnn1117_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_9_cnn1117_im0_cma_q = i_mul65_9_cnn1117_im0_cma_qq[21:0];

    // redist7_i_mul65_9_cnn1117_im0_cma_q_1(DELAY,17924)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist7_i_mul65_9_cnn1117_im0_cma_q_1_q <= i_mul65_9_cnn1117_im0_cma_q;
        end
    end

    // i_mul65_9_cnn1117_sums_align_5(BITSHIFT,3221)@761
    assign i_mul65_9_cnn1117_sums_align_5_qint = { redist7_i_mul65_9_cnn1117_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_9_cnn1117_sums_align_5_q = i_mul65_9_cnn1117_sums_align_5_qint[74:0];

    // i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11975)@761
    assign i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_9_cnn1117_sums_align_5_q[69:0];

    // i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11962)@761
    assign i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_9_cnn1117_sums_align_3_q[64:64];

    // i_mul65_9_cnn1117_bjA7(BITJOIN,3203)@754
    assign i_mul65_9_cnn1117_bjA7_q = {GND_q, i_mul65_9_cnn1117_bs1_merged_bit_select_c};

    // i_mul65_9_cnn1117_im5_cma(CHAINMULTADD,17862)@754 + 5
    // out q@760
    assign i_mul65_9_cnn1117_im5_cma_reset = ~ (resetn);
    assign i_mul65_9_cnn1117_im5_cma_ena0 = 1'b1;
    assign i_mul65_9_cnn1117_im5_cma_ena1 = i_mul65_9_cnn1117_im5_cma_ena0;
    assign i_mul65_9_cnn1117_im5_cma_ena2 = i_mul65_9_cnn1117_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_im5_cma_ah[0] <= i_mul65_9_cnn1117_bjA7_q;
        end
    end

    assign i_mul65_9_cnn1117_im5_cma_a0 = i_mul65_9_cnn1117_im5_cma_ah[0];
    assign i_mul65_9_cnn1117_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_9_cnn1117_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_9_cnn1117_im5_cma_ena2, i_mul65_9_cnn1117_im5_cma_ena1, i_mul65_9_cnn1117_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_9_cnn1117_im5_cma_a0),
        .coefsela(i_mul65_9_cnn1117_im5_cma_c0),
        .resulta(i_mul65_9_cnn1117_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_9_cnn1117_im5_cma_delay ( .xin(i_mul65_9_cnn1117_im5_cma_s0), .xout(i_mul65_9_cnn1117_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_9_cnn1117_im5_cma_q = i_mul65_9_cnn1117_im5_cma_qq[29:0];

    // redist6_i_mul65_9_cnn1117_im5_cma_q_1(DELAY,17923)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist6_i_mul65_9_cnn1117_im5_cma_q_1_q <= i_mul65_9_cnn1117_im5_cma_q;
        end
    end

    // i_mul65_9_cnn1117_sums_align_3(BITSHIFT,3219)@761
    assign i_mul65_9_cnn1117_sums_align_3_qint = { redist6_i_mul65_9_cnn1117_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_9_cnn1117_sums_align_3_q = i_mul65_9_cnn1117_sums_align_3_qint[64:0];

    // i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11967)@761
    assign i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_align_3_q};

    // i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2(ADD,9546)@761 + 1
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_q = i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11981)@762
    assign i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_9_cnn1117_sums_result_add_0_0_q[47:47];

    // i_mul65_9_cnn1117_bjA12(BITJOIN,3208)@754
    assign i_mul65_9_cnn1117_bjA12_q = {GND_q, i_mul65_9_cnn1117_bs1_merged_bit_select_d};

    // i_mul65_9_cnn1117_im10_cma(CHAINMULTADD,17863)@754 + 5
    // out q@760
    assign i_mul65_9_cnn1117_im10_cma_reset = ~ (resetn);
    assign i_mul65_9_cnn1117_im10_cma_ena0 = 1'b1;
    assign i_mul65_9_cnn1117_im10_cma_ena1 = i_mul65_9_cnn1117_im10_cma_ena0;
    assign i_mul65_9_cnn1117_im10_cma_ena2 = i_mul65_9_cnn1117_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_im10_cma_ah[0] <= i_mul65_9_cnn1117_bjA12_q;
        end
    end

    assign i_mul65_9_cnn1117_im10_cma_a0 = i_mul65_9_cnn1117_im10_cma_ah[0];
    assign i_mul65_9_cnn1117_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_9_cnn1117_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_9_cnn1117_im10_cma_ena2, i_mul65_9_cnn1117_im10_cma_ena1, i_mul65_9_cnn1117_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_9_cnn1117_im10_cma_a0),
        .coefsela(i_mul65_9_cnn1117_im10_cma_c0),
        .resulta(i_mul65_9_cnn1117_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_9_cnn1117_im10_cma_delay ( .xin(i_mul65_9_cnn1117_im10_cma_s0), .xout(i_mul65_9_cnn1117_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_9_cnn1117_im10_cma_q = i_mul65_9_cnn1117_im10_cma_qq[29:0];

    // redist5_i_mul65_9_cnn1117_im10_cma_q_1(DELAY,17922)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist5_i_mul65_9_cnn1117_im10_cma_q_1_q <= i_mul65_9_cnn1117_im10_cma_q;
        end
    end

    // i_mul65_9_cnn1117_sums_align_1(BITSHIFT,3217)@761
    assign i_mul65_9_cnn1117_sums_align_1_qint = { redist5_i_mul65_9_cnn1117_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_9_cnn1117_sums_align_1_q = i_mul65_9_cnn1117_sums_align_1_qint[46:0];

    // i_mul65_9_cnn1117_bjA17(BITJOIN,3213)@754
    assign i_mul65_9_cnn1117_bjA17_q = {GND_q, i_mul65_9_cnn1117_bs1_merged_bit_select_e};

    // i_mul65_9_cnn1117_im15_cma(CHAINMULTADD,17864)@754 + 5
    // out q@760
    assign i_mul65_9_cnn1117_im15_cma_reset = ~ (resetn);
    assign i_mul65_9_cnn1117_im15_cma_ena0 = 1'b1;
    assign i_mul65_9_cnn1117_im15_cma_ena1 = i_mul65_9_cnn1117_im15_cma_ena0;
    assign i_mul65_9_cnn1117_im15_cma_ena2 = i_mul65_9_cnn1117_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_im15_cma_ah[0] <= i_mul65_9_cnn1117_bjA17_q;
        end
    end

    assign i_mul65_9_cnn1117_im15_cma_a0 = i_mul65_9_cnn1117_im15_cma_ah[0];
    assign i_mul65_9_cnn1117_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_9_cnn1117_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_9_cnn1117_im15_cma_ena2, i_mul65_9_cnn1117_im15_cma_ena1, i_mul65_9_cnn1117_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_9_cnn1117_im15_cma_a0),
        .coefsela(i_mul65_9_cnn1117_im15_cma_c0),
        .resulta(i_mul65_9_cnn1117_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_9_cnn1117_im15_cma_delay ( .xin(i_mul65_9_cnn1117_im15_cma_s0), .xout(i_mul65_9_cnn1117_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_9_cnn1117_im15_cma_q = i_mul65_9_cnn1117_im15_cma_qq[29:0];

    // redist4_i_mul65_9_cnn1117_im15_cma_q_1(DELAY,17921)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist4_i_mul65_9_cnn1117_im15_cma_q_1_q <= i_mul65_9_cnn1117_im15_cma_q;
        end
    end

    // i_mul65_9_cnn1117_sums_result_add_0_0(ADD,3223)@761 + 1
    assign i_mul65_9_cnn1117_sums_result_add_0_0_a = {{18{redist4_i_mul65_9_cnn1117_im15_cma_q_1_q[29]}}, redist4_i_mul65_9_cnn1117_im15_cma_q_1_q};
    assign i_mul65_9_cnn1117_sums_result_add_0_0_b = {{1{i_mul65_9_cnn1117_sums_align_1_q[46]}}, i_mul65_9_cnn1117_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_sums_result_add_0_0_o <= $signed(i_mul65_9_cnn1117_sums_result_add_0_0_a) + $signed(i_mul65_9_cnn1117_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_9_cnn1117_sums_result_add_0_0_q = i_mul65_9_cnn1117_sums_result_add_0_0_o[47:0];

    // i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12003)@762
    assign i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_9_cnn1117_sums_result_add_0_0_q};

    // i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2(ADD,9557)@762 + 1
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_q = i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,12015)@763
    assign i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11978)@761
    assign i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_9_cnn1117_sums_align_5_q[74:74];

    // redist376_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18293)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist376_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11977)@761
    assign i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_9_cnn1117_sums_align_5_q[74:70];

    // redist377_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18294)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist377_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11979)@762
    assign i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist376_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist377_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18295)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11974)@762
    assign i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist378_i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2(ADD,9547)@762 + 1
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_cin = i_mul65_9_cnn1117_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_9_cnn1117_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_q = i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,12016)@763
    assign i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_9_cnn1117_sums_result_add_0_1_p2_of_2_q};

    // redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18286)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,12011)@763
    assign i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist369_i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2(ADD,9558)@763 + 1
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_cin = i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_9_cnn1117_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_q = i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist740_i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_q_1(DELAY,18657)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist740_i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_9_cnn1117_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9559)@764
    assign i_mul65_9_cnn1117_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_9_cnn1117_sums_result_add_1_0_p2_of_2_q, redist740_i_mul65_9_cnn1117_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_9_cnn1117_extender_x(BITJOIN,2743)@764
    assign i_mul65_9_cnn1117_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_9_cnn1117_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_9_cnn1117_sel_x(BITSELECT,1061)@764
    assign bgTrunc_i_mul65_9_cnn1117_sel_x_b = i_mul65_9_cnn1117_extender_x_q[63:0];

    // i_mul65_9_cnn1117_vt_select_63(BITSELECT,1028)@764
    assign i_mul65_9_cnn1117_vt_select_63_b = bgTrunc_i_mul65_9_cnn1117_sel_x_b[63:1];

    // i_mul65_9_cnn1117_vt_join(BITJOIN,1027)@764
    assign i_mul65_9_cnn1117_vt_join_q = {i_mul65_9_cnn1117_vt_select_63_b, VCC_q};

    // i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select(BITSELECT,17908)@764
    assign i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_b = i_mul65_9_cnn1117_vt_join_q[63:54];
    assign i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_c = i_mul65_9_cnn1117_vt_join_q[53:36];
    assign i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_d = i_mul65_9_cnn1117_vt_join_q[35:18];
    assign i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_e = i_mul65_9_cnn1117_vt_join_q[17:0];

    // i_add_ptr66_9_cnn1122_mult_x_bjA2(BITJOIN,3708)@764
    assign i_add_ptr66_9_cnn1122_mult_x_bjA2_q = {GND_q, i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_9_cnn1122_mult_x_im0_shift0(BITSHIFT,8196)@764
    assign i_add_ptr66_9_cnn1122_mult_x_im0_shift0_qint = { i_add_ptr66_9_cnn1122_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_9_cnn1122_mult_x_im0_shift0_q = i_add_ptr66_9_cnn1122_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_align_5(BITSHIFT,3731)@764
    assign i_add_ptr66_9_cnn1122_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_9_cnn1122_mult_x_im0_shift0_q[12]}}, i_add_ptr66_9_cnn1122_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_9_cnn1122_mult_x_sums_align_5_q = i_add_ptr66_9_cnn1122_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_9_cnn1122_mult_x_bjA7(BITJOIN,3713)@764
    assign i_add_ptr66_9_cnn1122_mult_x_bjA7_q = {GND_q, i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_9_cnn1122_mult_x_im5_shift0(BITSHIFT,8197)@764
    assign i_add_ptr66_9_cnn1122_mult_x_im5_shift0_qint = { i_add_ptr66_9_cnn1122_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_9_cnn1122_mult_x_im5_shift0_q = i_add_ptr66_9_cnn1122_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_align_3(BITSHIFT,3729)@764
    assign i_add_ptr66_9_cnn1122_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_9_cnn1122_mult_x_im5_shift0_q[20]}}, i_add_ptr66_9_cnn1122_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_9_cnn1122_mult_x_sums_align_3_q = i_add_ptr66_9_cnn1122_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1(ADD,3734)@764 + 1
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_9_cnn1122_mult_x_sums_align_3_q[58]}}, i_add_ptr66_9_cnn1122_mult_x_sums_align_3_q};
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_9_cnn1122_mult_x_sums_align_5_q[68]}}, i_add_ptr66_9_cnn1122_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_q = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12614)@765
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_9_cnn1122_mult_x_bjA12(BITJOIN,3718)@764
    assign i_add_ptr66_9_cnn1122_mult_x_bjA12_q = {GND_q, i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_9_cnn1122_mult_x_im10_shift0(BITSHIFT,8198)@764
    assign i_add_ptr66_9_cnn1122_mult_x_im10_shift0_qint = { i_add_ptr66_9_cnn1122_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_9_cnn1122_mult_x_im10_shift0_q = i_add_ptr66_9_cnn1122_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_align_1(BITSHIFT,3727)@764
    assign i_add_ptr66_9_cnn1122_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_9_cnn1122_mult_x_im10_shift0_q[20]}}, i_add_ptr66_9_cnn1122_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_9_cnn1122_mult_x_sums_align_1_q = i_add_ptr66_9_cnn1122_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_9_cnn1122_mult_x_bjA17(BITJOIN,3723)@764
    assign i_add_ptr66_9_cnn1122_mult_x_bjA17_q = {GND_q, i_add_ptr66_9_cnn1122_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_9_cnn1122_mult_x_im15_shift0(BITSHIFT,8199)@764
    assign i_add_ptr66_9_cnn1122_mult_x_im15_shift0_qint = { i_add_ptr66_9_cnn1122_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_9_cnn1122_mult_x_im15_shift0_q = i_add_ptr66_9_cnn1122_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0(ADD,3733)@764 + 1
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_9_cnn1122_mult_x_im15_shift0_q[20]}}, i_add_ptr66_9_cnn1122_mult_x_im15_shift0_q};
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_9_cnn1122_mult_x_sums_align_1_q[40]}}, i_add_ptr66_9_cnn1122_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_q = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12642)@765
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2(ADD,9755)@765 + 1
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12647)@765
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_0_1_q[69:69];

    // redist322_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18239)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist322_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist323_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18240)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist323_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2(ADD,9756)@766 + 1
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist323_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist323_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist322_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist322_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist723_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18640)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist723_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9757)@767
    assign i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p2_of_2_q, redist723_i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_9_cnn1122_mult_extender_x(BITJOIN,1417)@767
    assign i_add_ptr66_9_cnn1122_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_9_cnn1122_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_9_cnn1122_trunc_sel_x(BITSELECT,1419)@767
    assign i_add_ptr66_9_cnn1122_trunc_sel_x_b = i_add_ptr66_9_cnn1122_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118(BLACKBOX,678)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_1119 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_select_63(BITSELECT,681)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_join(BITJOIN,680)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_9_cnn1122_add_x(ADD,1411)@767
    assign i_add_ptr66_9_cnn1122_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer13_cnn1118_vt_join_q};
    assign i_add_ptr66_9_cnn1122_add_x_b = {1'b0, i_add_ptr66_9_cnn1122_trunc_sel_x_b};
    assign i_add_ptr66_9_cnn1122_add_x_o = $unsigned(i_add_ptr66_9_cnn1122_add_x_a) + $unsigned(i_add_ptr66_9_cnn1122_add_x_b);
    assign i_add_ptr66_9_cnn1122_add_x_q = i_add_ptr66_9_cnn1122_add_x_o[64:0];

    // i_add_ptr66_9_cnn1122_dupName_0_trunc_sel_x(BITSELECT,1420)@767
    assign i_add_ptr66_9_cnn1122_dupName_0_trunc_sel_x_b = i_add_ptr66_9_cnn1122_add_x_q[63:0];

    // i_add_ptr66_9_cnn1121_vt_select_63(BITSELECT,96)@767
    assign i_add_ptr66_9_cnn1121_vt_select_63_b = i_add_ptr66_9_cnn1122_dupName_0_trunc_sel_x_b[63:3];

    // redist864_i_add_ptr66_9_cnn1121_vt_select_63_b_1(DELAY,18781)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist864_i_add_ptr66_9_cnn1121_vt_select_63_b_1_q <= i_add_ptr66_9_cnn1121_vt_select_63_b;
        end
    end

    // i_add_ptr66_9_cnn1121_vt_join(BITJOIN,95)@768
    assign i_add_ptr66_9_cnn1121_vt_join_q = {redist864_i_add_ptr66_9_cnn1121_vt_select_63_b_1_q, i_add_ptr66_13_cnn1277_vt_const_2_q};

    // i_add_ptr70_3_9_cnn1148_add_x(ADD,1981)@768
    assign i_add_ptr70_3_9_cnn1148_add_x_a = {1'b0, i_add_ptr66_9_cnn1121_vt_join_q};
    assign i_add_ptr70_3_9_cnn1148_add_x_b = {1'b0, i_add_ptr70_3_9_cnn1148_trunc_sel_x_b};
    assign i_add_ptr70_3_9_cnn1148_add_x_o = $unsigned(i_add_ptr70_3_9_cnn1148_add_x_a) + $unsigned(i_add_ptr70_3_9_cnn1148_add_x_b);
    assign i_add_ptr70_3_9_cnn1148_add_x_q = i_add_ptr70_3_9_cnn1148_add_x_o[64:0];

    // i_add_ptr70_3_9_cnn1148_dupName_0_trunc_sel_x(BITSELECT,1990)@768
    assign i_add_ptr70_3_9_cnn1148_dupName_0_trunc_sel_x_b = i_add_ptr70_3_9_cnn1148_add_x_q[63:0];

    // i_add_ptr70_3_9_cnn1147_vt_select_63(BITSELECT,267)@768
    assign i_add_ptr70_3_9_cnn1147_vt_select_63_b = i_add_ptr70_3_9_cnn1148_dupName_0_trunc_sel_x_b[63:2];

    // redist807_i_add_ptr70_3_9_cnn1147_vt_select_63_b_1(DELAY,18724)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist807_i_add_ptr70_3_9_cnn1147_vt_select_63_b_1_q <= i_add_ptr70_3_9_cnn1147_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_9_cnn1147_vt_join(BITJOIN,266)@769
    assign i_add_ptr70_3_9_cnn1147_vt_join_q = {redist807_i_add_ptr70_3_9_cnn1147_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_9_cnn1150_add_x(ADD,2621)@769
    assign i_add_ptr73_371_9_cnn1150_add_x_a = {1'b0, i_add_ptr70_3_9_cnn1147_vt_join_q};
    assign i_add_ptr73_371_9_cnn1150_add_x_b = {1'b0, i_add_ptr73_371_9_cnn1150_trunc_sel_x_b};
    assign i_add_ptr73_371_9_cnn1150_add_x_o = $unsigned(i_add_ptr73_371_9_cnn1150_add_x_a) + $unsigned(i_add_ptr73_371_9_cnn1150_add_x_b);
    assign i_add_ptr73_371_9_cnn1150_add_x_q = i_add_ptr73_371_9_cnn1150_add_x_o[64:0];

    // i_add_ptr73_371_9_cnn1150_dupName_0_trunc_sel_x(BITSELECT,2630)@769
    assign i_add_ptr73_371_9_cnn1150_dupName_0_trunc_sel_x_b = i_add_ptr73_371_9_cnn1150_add_x_q[63:0];

    // i_add_ptr73_371_9_cnn1149_vt_select_63(BITSELECT,459)@769
    assign i_add_ptr73_371_9_cnn1149_vt_select_63_b = i_add_ptr73_371_9_cnn1150_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_9_cnn1149_vt_join(BITJOIN,458)@769
    assign i_add_ptr73_371_9_cnn1149_vt_join_q = {i_add_ptr73_371_9_cnn1149_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_select_63(BITSELECT,866)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_select_63_b = i_add_ptr73_371_9_cnn1149_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_join(BITJOIN,865)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn147_cnn1144(BLACKBOX,611)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_147_cnn1145 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn147_cnn1144 (
        .in_intel_reserved_ffwd_66_0(in_intel_reserved_ffwd_66_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_66_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn147_cnn1144_out_dest_data_out_66_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0(BITSHIFT,8608)@766
    assign i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0_q = i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5(BITSHIFT,6821)@766
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_9_cnn1142_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5_q = i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0(BITSHIFT,8609)@766
    assign i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0_q = i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3(BITSHIFT,6819)@766
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_9_cnn1142_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3_q = i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1(ADD,6824)@766 + 1
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_9_cnn1142_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_9_cnn1142_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16322)@767
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0(BITSHIFT,8610)@766
    assign i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0_q = i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1(BITSHIFT,6817)@766
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_9_cnn1142_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1_q = i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0(BITSHIFT,8611)@766
    assign i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0_q = i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0(ADD,6823)@766 + 1
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_9_cnn1142_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_9_cnn1142_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16350)@767
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2(ADD,10888)@767 + 1
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16355)@767
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_0_1_q[69:69];

    // redist116_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18033)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist116_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist117_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18034)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist117_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2(ADD,10889)@768 + 1
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist117_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist117_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist116_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist116_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist620_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18537)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist620_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10890)@769
    assign i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p2_of_2_q, redist620_i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_9_cnn1142_mult_extender_x(BITJOIN,2447)@769
    assign i_add_ptr73_270_9_cnn1142_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_9_cnn1142_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_9_cnn1142_trunc_sel_x(BITSELECT,2449)@769
    assign i_add_ptr73_270_9_cnn1142_trunc_sel_x_b = i_add_ptr73_270_9_cnn1142_mult_extender_x_q[63:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0(BITSHIFT,8356)@765
    assign i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0_q = i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5(BITSHIFT,4931)@765
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_9_cnn1140_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5_q = i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0(BITSHIFT,8357)@765
    assign i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0_q = i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3(BITSHIFT,4929)@765
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_9_cnn1140_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3_q = i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1(ADD,4934)@765 + 1
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_9_cnn1140_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_9_cnn1140_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14054)@766
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0(BITSHIFT,8358)@765
    assign i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0_q = i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1(BITSHIFT,4927)@765
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_9_cnn1140_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1_q = i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0(BITSHIFT,8359)@765
    assign i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0_q = i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0(ADD,4933)@765 + 1
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_9_cnn1140_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_9_cnn1140_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14082)@766
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2(ADD,10195)@766 + 1
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14087)@766
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_0_1_q[69:69];

    // redist242_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18159)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist242_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist243_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18160)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist243_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2(ADD,10196)@767 + 1
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist243_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist243_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist242_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist242_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist683_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18600)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist683_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10197)@768
    assign i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p2_of_2_q, redist683_i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_9_cnn1140_mult_extender_x(BITJOIN,1817)@768
    assign i_add_ptr70_2_9_cnn1140_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_9_cnn1140_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_9_cnn1140_trunc_sel_x(BITSELECT,1819)@768
    assign i_add_ptr70_2_9_cnn1140_trunc_sel_x_b = i_add_ptr70_2_9_cnn1140_mult_extender_x_q[63:0];

    // i_add_ptr70_2_9_cnn1140_add_x(ADD,1811)@768
    assign i_add_ptr70_2_9_cnn1140_add_x_a = {1'b0, i_add_ptr66_9_cnn1121_vt_join_q};
    assign i_add_ptr70_2_9_cnn1140_add_x_b = {1'b0, i_add_ptr70_2_9_cnn1140_trunc_sel_x_b};
    assign i_add_ptr70_2_9_cnn1140_add_x_o = $unsigned(i_add_ptr70_2_9_cnn1140_add_x_a) + $unsigned(i_add_ptr70_2_9_cnn1140_add_x_b);
    assign i_add_ptr70_2_9_cnn1140_add_x_q = i_add_ptr70_2_9_cnn1140_add_x_o[64:0];

    // i_add_ptr70_2_9_cnn1140_dupName_0_trunc_sel_x(BITSELECT,1820)@768
    assign i_add_ptr70_2_9_cnn1140_dupName_0_trunc_sel_x_b = i_add_ptr70_2_9_cnn1140_add_x_q[63:0];

    // i_add_ptr70_2_9_cnn1139_vt_select_63(BITSELECT,216)@768
    assign i_add_ptr70_2_9_cnn1139_vt_select_63_b = i_add_ptr70_2_9_cnn1140_dupName_0_trunc_sel_x_b[63:2];

    // redist824_i_add_ptr70_2_9_cnn1139_vt_select_63_b_1(DELAY,18741)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist824_i_add_ptr70_2_9_cnn1139_vt_select_63_b_1_q <= i_add_ptr70_2_9_cnn1139_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_9_cnn1139_vt_join(BITJOIN,215)@769
    assign i_add_ptr70_2_9_cnn1139_vt_join_q = {redist824_i_add_ptr70_2_9_cnn1139_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_9_cnn1142_add_x(ADD,2441)@769
    assign i_add_ptr73_270_9_cnn1142_add_x_a = {1'b0, i_add_ptr70_2_9_cnn1139_vt_join_q};
    assign i_add_ptr73_270_9_cnn1142_add_x_b = {1'b0, i_add_ptr73_270_9_cnn1142_trunc_sel_x_b};
    assign i_add_ptr73_270_9_cnn1142_add_x_o = $unsigned(i_add_ptr73_270_9_cnn1142_add_x_a) + $unsigned(i_add_ptr73_270_9_cnn1142_add_x_b);
    assign i_add_ptr73_270_9_cnn1142_add_x_q = i_add_ptr73_270_9_cnn1142_add_x_o[64:0];

    // i_add_ptr73_270_9_cnn1142_dupName_0_trunc_sel_x(BITSELECT,2450)@769
    assign i_add_ptr73_270_9_cnn1142_dupName_0_trunc_sel_x_b = i_add_ptr73_270_9_cnn1142_add_x_q[63:0];

    // i_add_ptr73_270_9_cnn1141_vt_select_63(BITSELECT,405)@769
    assign i_add_ptr73_270_9_cnn1141_vt_select_63_b = i_add_ptr73_270_9_cnn1142_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_9_cnn1141_vt_join(BITJOIN,404)@769
    assign i_add_ptr73_270_9_cnn1141_vt_join_q = {i_add_ptr73_270_9_cnn1141_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_select_63(BITSELECT,858)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_select_63_b = i_add_ptr73_270_9_cnn1141_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_join(BITJOIN,857)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn146_cnn1136(BLACKBOX,610)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_146_cnn1137 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn146_cnn1136 (
        .in_intel_reserved_ffwd_65_0(in_intel_reserved_ffwd_65_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_65_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn146_cnn1136_out_dest_data_out_65_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0(BITSHIFT,8540)@766
    assign i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0_q = i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5(BITSHIFT,6311)@766
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_9_cnn1134_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5_q = i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0(BITSHIFT,8541)@766
    assign i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0_q = i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3(BITSHIFT,6309)@766
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_9_cnn1134_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3_q = i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1(ADD,6314)@766 + 1
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_9_cnn1134_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_9_cnn1134_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15710)@767
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0(BITSHIFT,8542)@766
    assign i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0_q = i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1(BITSHIFT,6307)@766
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_9_cnn1134_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1_q = i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0(BITSHIFT,8543)@766
    assign i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0_q = i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0(ADD,6313)@766 + 1
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_9_cnn1134_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_9_cnn1134_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15738)@767
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2(ADD,10701)@767 + 1
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15743)@767
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_0_1_q[69:69];

    // redist150_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18067)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist150_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist151_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18068)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist151_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2(ADD,10702)@768 + 1
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist151_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist151_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist150_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist150_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist637_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18554)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist637_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10703)@769
    assign i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p2_of_2_q, redist637_i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_9_cnn1134_mult_extender_x(BITJOIN,2277)@769
    assign i_add_ptr73_169_9_cnn1134_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_9_cnn1134_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_9_cnn1134_trunc_sel_x(BITSELECT,2279)@769
    assign i_add_ptr73_169_9_cnn1134_trunc_sel_x_b = i_add_ptr73_169_9_cnn1134_mult_extender_x_q[63:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0(BITSHIFT,8288)@765
    assign i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0_q = i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5(BITSHIFT,4421)@765
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_9_cnn1132_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5_q = i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0(BITSHIFT,8289)@765
    assign i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0_q = i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3(BITSHIFT,4419)@765
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_9_cnn1132_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3_q = i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1(ADD,4424)@765 + 1
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_9_cnn1132_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_9_cnn1132_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13442)@766
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0(BITSHIFT,8290)@765
    assign i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0_q = i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1(BITSHIFT,4417)@765
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_9_cnn1132_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1_q = i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0(BITSHIFT,8291)@765
    assign i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0_q = i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0(ADD,4423)@765 + 1
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_9_cnn1132_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_9_cnn1132_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13470)@766
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2(ADD,10008)@766 + 1
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13475)@766
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_0_1_q[69:69];

    // redist276_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18193)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist276_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist277_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18194)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist277_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2(ADD,10009)@767 + 1
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist277_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist277_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist276_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist276_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist700_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18617)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist700_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10010)@768
    assign i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p2_of_2_q, redist700_i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_9_cnn1132_mult_extender_x(BITJOIN,1647)@768
    assign i_add_ptr70_1_9_cnn1132_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_9_cnn1132_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_9_cnn1132_trunc_sel_x(BITSELECT,1649)@768
    assign i_add_ptr70_1_9_cnn1132_trunc_sel_x_b = i_add_ptr70_1_9_cnn1132_mult_extender_x_q[63:0];

    // i_add_ptr70_1_9_cnn1132_add_x(ADD,1641)@768
    assign i_add_ptr70_1_9_cnn1132_add_x_a = {1'b0, i_add_ptr66_9_cnn1121_vt_join_q};
    assign i_add_ptr70_1_9_cnn1132_add_x_b = {1'b0, i_add_ptr70_1_9_cnn1132_trunc_sel_x_b};
    assign i_add_ptr70_1_9_cnn1132_add_x_o = $unsigned(i_add_ptr70_1_9_cnn1132_add_x_a) + $unsigned(i_add_ptr70_1_9_cnn1132_add_x_b);
    assign i_add_ptr70_1_9_cnn1132_add_x_q = i_add_ptr70_1_9_cnn1132_add_x_o[64:0];

    // i_add_ptr70_1_9_cnn1132_dupName_0_trunc_sel_x(BITSELECT,1650)@768
    assign i_add_ptr70_1_9_cnn1132_dupName_0_trunc_sel_x_b = i_add_ptr70_1_9_cnn1132_add_x_q[63:0];

    // i_add_ptr70_1_9_cnn1131_vt_select_63(BITSELECT,165)@768
    assign i_add_ptr70_1_9_cnn1131_vt_select_63_b = i_add_ptr70_1_9_cnn1132_dupName_0_trunc_sel_x_b[63:2];

    // redist841_i_add_ptr70_1_9_cnn1131_vt_select_63_b_1(DELAY,18758)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist841_i_add_ptr70_1_9_cnn1131_vt_select_63_b_1_q <= i_add_ptr70_1_9_cnn1131_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_9_cnn1131_vt_join(BITJOIN,164)@769
    assign i_add_ptr70_1_9_cnn1131_vt_join_q = {redist841_i_add_ptr70_1_9_cnn1131_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_9_cnn1134_add_x(ADD,2271)@769
    assign i_add_ptr73_169_9_cnn1134_add_x_a = {1'b0, i_add_ptr70_1_9_cnn1131_vt_join_q};
    assign i_add_ptr73_169_9_cnn1134_add_x_b = {1'b0, i_add_ptr73_169_9_cnn1134_trunc_sel_x_b};
    assign i_add_ptr73_169_9_cnn1134_add_x_o = $unsigned(i_add_ptr73_169_9_cnn1134_add_x_a) + $unsigned(i_add_ptr73_169_9_cnn1134_add_x_b);
    assign i_add_ptr73_169_9_cnn1134_add_x_q = i_add_ptr73_169_9_cnn1134_add_x_o[64:0];

    // i_add_ptr73_169_9_cnn1134_dupName_0_trunc_sel_x(BITSELECT,2280)@769
    assign i_add_ptr73_169_9_cnn1134_dupName_0_trunc_sel_x_b = i_add_ptr73_169_9_cnn1134_add_x_q[63:0];

    // i_add_ptr73_169_9_cnn1133_vt_select_63(BITSELECT,354)@769
    assign i_add_ptr73_169_9_cnn1133_vt_select_63_b = i_add_ptr73_169_9_cnn1134_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_9_cnn1133_vt_join(BITJOIN,353)@769
    assign i_add_ptr73_169_9_cnn1133_vt_join_q = {i_add_ptr73_169_9_cnn1133_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_select_63(BITSELECT,854)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_select_63_b = i_add_ptr73_169_9_cnn1133_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_join(BITJOIN,853)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn145_cnn1128(BLACKBOX,609)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_145_cnn1129 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn145_cnn1128 (
        .in_intel_reserved_ffwd_64_0(in_intel_reserved_ffwd_64_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_64_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn145_cnn1128_out_dest_data_out_64_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_9_cnn1126_mult_x_im0_shift0(BITSHIFT,8708)@766
    assign i_add_ptr73_9_cnn1126_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_9_cnn1126_mult_x_im0_shift0_q = i_add_ptr73_9_cnn1126_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_align_5(BITSHIFT,7571)@766
    assign i_add_ptr73_9_cnn1126_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_9_cnn1126_mult_x_im0_shift0_q[12]}}, i_add_ptr73_9_cnn1126_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_9_cnn1126_mult_x_sums_align_5_q = i_add_ptr73_9_cnn1126_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_9_cnn1126_mult_x_im5_shift0(BITSHIFT,8709)@766
    assign i_add_ptr73_9_cnn1126_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_9_cnn1126_mult_x_im5_shift0_q = i_add_ptr73_9_cnn1126_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_align_3(BITSHIFT,7569)@766
    assign i_add_ptr73_9_cnn1126_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_9_cnn1126_mult_x_im5_shift0_q[20]}}, i_add_ptr73_9_cnn1126_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_9_cnn1126_mult_x_sums_align_3_q = i_add_ptr73_9_cnn1126_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1(ADD,7574)@766 + 1
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_9_cnn1126_mult_x_sums_align_3_q[58]}}, i_add_ptr73_9_cnn1126_mult_x_sums_align_3_q};
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_9_cnn1126_mult_x_sums_align_5_q[68]}}, i_add_ptr73_9_cnn1126_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_q = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17222)@767
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_9_cnn1126_mult_x_im10_shift0(BITSHIFT,8710)@766
    assign i_add_ptr73_9_cnn1126_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_9_cnn1126_mult_x_im10_shift0_q = i_add_ptr73_9_cnn1126_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_align_1(BITSHIFT,7567)@766
    assign i_add_ptr73_9_cnn1126_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_9_cnn1126_mult_x_im10_shift0_q[20]}}, i_add_ptr73_9_cnn1126_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_9_cnn1126_mult_x_sums_align_1_q = i_add_ptr73_9_cnn1126_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_9_cnn1126_mult_x_im15_shift0(BITSHIFT,8711)@766
    assign i_add_ptr73_9_cnn1126_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_9_cnn1126_mult_x_im15_shift0_q = i_add_ptr73_9_cnn1126_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0(ADD,7573)@766 + 1
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_9_cnn1126_mult_x_im15_shift0_q[20]}}, i_add_ptr73_9_cnn1126_mult_x_im15_shift0_q};
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_9_cnn1126_mult_x_sums_align_1_q[40]}}, i_add_ptr73_9_cnn1126_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_q = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17250)@767
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2(ADD,11163)@767 + 1
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17255)@767
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_0_1_q[69:69];

    // redist66_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17983)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist66_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist67_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17984)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist67_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2(ADD,11164)@768 + 1
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist67_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist67_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist66_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist66_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist595_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18512)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist595_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11165)@769
    assign i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p2_of_2_q, redist595_i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_9_cnn1126_mult_extender_x(BITJOIN,2697)@769
    assign i_add_ptr73_9_cnn1126_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_9_cnn1126_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_9_cnn1126_trunc_sel_x(BITSELECT,2699)@769
    assign i_add_ptr73_9_cnn1126_trunc_sel_x_b = i_add_ptr73_9_cnn1126_mult_extender_x_q[63:0];

    // i_add_ptr70_9_cnn1124_mult_x_im0_shift0(BITSHIFT,8452)@765
    assign i_add_ptr70_9_cnn1124_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_9_cnn1124_mult_x_im0_shift0_q = i_add_ptr70_9_cnn1124_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_align_5(BITSHIFT,5651)@765
    assign i_add_ptr70_9_cnn1124_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_9_cnn1124_mult_x_im0_shift0_q[12]}}, i_add_ptr70_9_cnn1124_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_9_cnn1124_mult_x_sums_align_5_q = i_add_ptr70_9_cnn1124_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_9_cnn1124_mult_x_im5_shift0(BITSHIFT,8453)@765
    assign i_add_ptr70_9_cnn1124_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_9_cnn1124_mult_x_im5_shift0_q = i_add_ptr70_9_cnn1124_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_align_3(BITSHIFT,5649)@765
    assign i_add_ptr70_9_cnn1124_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_9_cnn1124_mult_x_im5_shift0_q[20]}}, i_add_ptr70_9_cnn1124_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_9_cnn1124_mult_x_sums_align_3_q = i_add_ptr70_9_cnn1124_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1(ADD,5654)@765 + 1
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_9_cnn1124_mult_x_sums_align_3_q[58]}}, i_add_ptr70_9_cnn1124_mult_x_sums_align_3_q};
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_9_cnn1124_mult_x_sums_align_5_q[68]}}, i_add_ptr70_9_cnn1124_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_q = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14918)@766
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_9_cnn1124_mult_x_im10_shift0(BITSHIFT,8454)@765
    assign i_add_ptr70_9_cnn1124_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_9_cnn1124_mult_x_im10_shift0_q = i_add_ptr70_9_cnn1124_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_align_1(BITSHIFT,5647)@765
    assign i_add_ptr70_9_cnn1124_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_9_cnn1124_mult_x_im10_shift0_q[20]}}, i_add_ptr70_9_cnn1124_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_9_cnn1124_mult_x_sums_align_1_q = i_add_ptr70_9_cnn1124_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_9_cnn1124_mult_x_im15_shift0(BITSHIFT,8455)@765
    assign i_add_ptr70_9_cnn1124_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_9_cnn1124_mult_x_im15_shift0_q = i_add_ptr70_9_cnn1124_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0(ADD,5653)@765 + 1
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_9_cnn1124_mult_x_im15_shift0_q[20]}}, i_add_ptr70_9_cnn1124_mult_x_im15_shift0_q};
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_9_cnn1124_mult_x_sums_align_1_q[40]}}, i_add_ptr70_9_cnn1124_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_q = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14946)@766
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2(ADD,10459)@766 + 1
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14951)@766
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_0_1_q[69:69];

    // redist194_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18111)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist194_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist195_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18112)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist195_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2(ADD,10460)@767 + 1
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist195_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist195_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist194_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist194_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist659_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18576)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist659_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10461)@768
    assign i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p2_of_2_q, redist659_i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_9_cnn1124_mult_extender_x(BITJOIN,2057)@768
    assign i_add_ptr70_9_cnn1124_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_9_cnn1124_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_9_cnn1124_trunc_sel_x(BITSELECT,2059)@768
    assign i_add_ptr70_9_cnn1124_trunc_sel_x_b = i_add_ptr70_9_cnn1124_mult_extender_x_q[63:0];

    // i_add_ptr70_9_cnn1124_add_x(ADD,2051)@768
    assign i_add_ptr70_9_cnn1124_add_x_a = {1'b0, i_add_ptr66_9_cnn1121_vt_join_q};
    assign i_add_ptr70_9_cnn1124_add_x_b = {1'b0, i_add_ptr70_9_cnn1124_trunc_sel_x_b};
    assign i_add_ptr70_9_cnn1124_add_x_o = $unsigned(i_add_ptr70_9_cnn1124_add_x_a) + $unsigned(i_add_ptr70_9_cnn1124_add_x_b);
    assign i_add_ptr70_9_cnn1124_add_x_q = i_add_ptr70_9_cnn1124_add_x_o[64:0];

    // i_add_ptr70_9_cnn1124_dupName_0_trunc_sel_x(BITSELECT,2060)@768
    assign i_add_ptr70_9_cnn1124_dupName_0_trunc_sel_x_b = i_add_ptr70_9_cnn1124_add_x_q[63:0];

    // i_add_ptr70_9_cnn1123_vt_select_63(BITSELECT,288)@768
    assign i_add_ptr70_9_cnn1123_vt_select_63_b = i_add_ptr70_9_cnn1124_dupName_0_trunc_sel_x_b[63:2];

    // redist800_i_add_ptr70_9_cnn1123_vt_select_63_b_1(DELAY,18717)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist800_i_add_ptr70_9_cnn1123_vt_select_63_b_1_q <= i_add_ptr70_9_cnn1123_vt_select_63_b;
        end
    end

    // i_add_ptr70_9_cnn1123_vt_join(BITJOIN,287)@769
    assign i_add_ptr70_9_cnn1123_vt_join_q = {redist800_i_add_ptr70_9_cnn1123_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_9_cnn1126_add_x(ADD,2691)@769
    assign i_add_ptr73_9_cnn1126_add_x_a = {1'b0, i_add_ptr70_9_cnn1123_vt_join_q};
    assign i_add_ptr73_9_cnn1126_add_x_b = {1'b0, i_add_ptr73_9_cnn1126_trunc_sel_x_b};
    assign i_add_ptr73_9_cnn1126_add_x_o = $unsigned(i_add_ptr73_9_cnn1126_add_x_a) + $unsigned(i_add_ptr73_9_cnn1126_add_x_b);
    assign i_add_ptr73_9_cnn1126_add_x_q = i_add_ptr73_9_cnn1126_add_x_o[64:0];

    // i_add_ptr73_9_cnn1126_dupName_0_trunc_sel_x(BITSELECT,2700)@769
    assign i_add_ptr73_9_cnn1126_dupName_0_trunc_sel_x_b = i_add_ptr73_9_cnn1126_add_x_q[63:0];

    // i_add_ptr73_9_cnn1125_vt_select_63(BITSELECT,480)@769
    assign i_add_ptr73_9_cnn1125_vt_select_63_b = i_add_ptr73_9_cnn1126_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_9_cnn1125_vt_join(BITJOIN,479)@769
    assign i_add_ptr73_9_cnn1125_vt_join_q = {i_add_ptr73_9_cnn1125_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_select_63(BITSELECT,850)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_select_63_b = i_add_ptr73_9_cnn1125_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_join(BITJOIN,849)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn144_cnn1113(BLACKBOX,608)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_144_cnn1114 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn144_cnn1113 (
        .in_intel_reserved_ffwd_63_0(in_intel_reserved_ffwd_63_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_63_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn144_cnn1113_out_dest_data_out_63_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0(BITSHIFT,8676)@766
    assign i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0_q = i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5(BITSHIFT,7331)@766
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_8_cnn1111_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5_q = i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0(BITSHIFT,8677)@766
    assign i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0_q = i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3(BITSHIFT,7329)@766
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_8_cnn1111_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3_q = i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1(ADD,7334)@766 + 1
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_8_cnn1111_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_8_cnn1111_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16934)@767
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0(BITSHIFT,8678)@766
    assign i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0_q = i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1(BITSHIFT,7327)@766
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_8_cnn1111_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1_q = i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0(BITSHIFT,8679)@766
    assign i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0_q = i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0(ADD,7333)@766 + 1
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_8_cnn1111_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_8_cnn1111_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16962)@767
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2(ADD,11075)@767 + 1
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16967)@767
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_0_1_q[69:69];

    // redist82_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17999)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist82_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist83_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18000)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist83_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2(ADD,11076)@768 + 1
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist83_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist83_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist82_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist82_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist603_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18520)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist603_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11077)@769
    assign i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p2_of_2_q, redist603_i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_8_cnn1111_mult_extender_x(BITJOIN,2617)@769
    assign i_add_ptr73_371_8_cnn1111_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_8_cnn1111_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_8_cnn1111_trunc_sel_x(BITSELECT,2619)@769
    assign i_add_ptr73_371_8_cnn1111_trunc_sel_x_b = i_add_ptr73_371_8_cnn1111_mult_extender_x_q[63:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0(BITSHIFT,8420)@765
    assign i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0_q = i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5(BITSHIFT,5411)@765
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_8_cnn1109_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5_q = i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0(BITSHIFT,8421)@765
    assign i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0_q = i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3(BITSHIFT,5409)@765
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_8_cnn1109_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3_q = i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1(ADD,5414)@765 + 1
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_8_cnn1109_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_8_cnn1109_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14630)@766
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0(BITSHIFT,8422)@765
    assign i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0_q = i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1(BITSHIFT,5407)@765
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_8_cnn1109_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1_q = i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0(BITSHIFT,8423)@765
    assign i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0_q = i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0(ADD,5413)@765 + 1
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_8_cnn1109_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_8_cnn1109_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14658)@766
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2(ADD,10371)@766 + 1
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14663)@766
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_0_1_q[69:69];

    // redist210_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18127)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist210_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist211_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18128)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist211_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2(ADD,10372)@767 + 1
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist211_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist211_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist210_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist210_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist667_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18584)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist667_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10373)@768
    assign i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p2_of_2_q, redist667_i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_8_cnn1109_mult_extender_x(BITJOIN,1977)@768
    assign i_add_ptr70_3_8_cnn1109_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_8_cnn1109_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_8_cnn1109_trunc_sel_x(BITSELECT,1979)@768
    assign i_add_ptr70_3_8_cnn1109_trunc_sel_x_b = i_add_ptr70_3_8_cnn1109_mult_extender_x_q[63:0];

    // c_i64_8gr(CONSTANT,49)
    assign c_i64_8gr_q = 64'b0000000000000000000000000000000000000000000000000000000000001000;

    // i_inc79_7_cnn1077(LOGICAL,542)@754
    assign i_inc79_7_cnn1077_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_8gr_q;

    // i_inc79_7_cnn1077_vt_select_2_merged_bit_select(BITSELECT,17888)@754
    assign i_inc79_7_cnn1077_vt_select_2_merged_bit_select_b = i_inc79_7_cnn1077_q[2:0];
    assign i_inc79_7_cnn1077_vt_select_2_merged_bit_select_c = i_inc79_7_cnn1077_q[63:4];

    // i_inc79_7_cnn1077_vt_join(BITJOIN,544)@754
    assign i_inc79_7_cnn1077_vt_join_q = {i_inc79_7_cnn1077_vt_select_2_merged_bit_select_c, VCC_q, i_inc79_7_cnn1077_vt_select_2_merged_bit_select_b};

    // i_mul65_8_cnn1078_bs1_merged_bit_select(BITSELECT,17889)@754
    assign i_mul65_8_cnn1078_bs1_merged_bit_select_b = i_inc79_7_cnn1077_vt_join_q[63:54];
    assign i_mul65_8_cnn1078_bs1_merged_bit_select_c = i_inc79_7_cnn1077_vt_join_q[53:36];
    assign i_mul65_8_cnn1078_bs1_merged_bit_select_d = i_inc79_7_cnn1077_vt_join_q[35:18];
    assign i_mul65_8_cnn1078_bs1_merged_bit_select_e = i_inc79_7_cnn1077_vt_join_q[17:0];

    // i_mul65_8_cnn1078_bjA2(BITJOIN,3168)@754
    assign i_mul65_8_cnn1078_bjA2_q = {GND_q, i_mul65_8_cnn1078_bs1_merged_bit_select_b};

    // i_mul65_8_cnn1078_im0_cma(CHAINMULTADD,17857)@754 + 5
    // out q@760
    assign i_mul65_8_cnn1078_im0_cma_reset = ~ (resetn);
    assign i_mul65_8_cnn1078_im0_cma_ena0 = 1'b1;
    assign i_mul65_8_cnn1078_im0_cma_ena1 = i_mul65_8_cnn1078_im0_cma_ena0;
    assign i_mul65_8_cnn1078_im0_cma_ena2 = i_mul65_8_cnn1078_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_im0_cma_ah[0] <= i_mul65_8_cnn1078_bjA2_q;
        end
    end

    assign i_mul65_8_cnn1078_im0_cma_a0 = i_mul65_8_cnn1078_im0_cma_ah[0];
    assign i_mul65_8_cnn1078_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_8_cnn1078_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_8_cnn1078_im0_cma_ena2, i_mul65_8_cnn1078_im0_cma_ena1, i_mul65_8_cnn1078_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_8_cnn1078_im0_cma_a0),
        .coefsela(i_mul65_8_cnn1078_im0_cma_c0),
        .resulta(i_mul65_8_cnn1078_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_8_cnn1078_im0_cma_delay ( .xin(i_mul65_8_cnn1078_im0_cma_s0), .xout(i_mul65_8_cnn1078_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_8_cnn1078_im0_cma_q = i_mul65_8_cnn1078_im0_cma_qq[21:0];

    // redist11_i_mul65_8_cnn1078_im0_cma_q_1(DELAY,17928)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist11_i_mul65_8_cnn1078_im0_cma_q_1_q <= i_mul65_8_cnn1078_im0_cma_q;
        end
    end

    // i_mul65_8_cnn1078_sums_align_5(BITSHIFT,3191)@761
    assign i_mul65_8_cnn1078_sums_align_5_qint = { redist11_i_mul65_8_cnn1078_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_8_cnn1078_sums_align_5_q = i_mul65_8_cnn1078_sums_align_5_qint[74:0];

    // i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11919)@761
    assign i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_8_cnn1078_sums_align_5_q[69:0];

    // i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11906)@761
    assign i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_8_cnn1078_sums_align_3_q[64:64];

    // i_mul65_8_cnn1078_bjA7(BITJOIN,3173)@754
    assign i_mul65_8_cnn1078_bjA7_q = {GND_q, i_mul65_8_cnn1078_bs1_merged_bit_select_c};

    // i_mul65_8_cnn1078_im5_cma(CHAINMULTADD,17858)@754 + 5
    // out q@760
    assign i_mul65_8_cnn1078_im5_cma_reset = ~ (resetn);
    assign i_mul65_8_cnn1078_im5_cma_ena0 = 1'b1;
    assign i_mul65_8_cnn1078_im5_cma_ena1 = i_mul65_8_cnn1078_im5_cma_ena0;
    assign i_mul65_8_cnn1078_im5_cma_ena2 = i_mul65_8_cnn1078_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_im5_cma_ah[0] <= i_mul65_8_cnn1078_bjA7_q;
        end
    end

    assign i_mul65_8_cnn1078_im5_cma_a0 = i_mul65_8_cnn1078_im5_cma_ah[0];
    assign i_mul65_8_cnn1078_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_8_cnn1078_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_8_cnn1078_im5_cma_ena2, i_mul65_8_cnn1078_im5_cma_ena1, i_mul65_8_cnn1078_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_8_cnn1078_im5_cma_a0),
        .coefsela(i_mul65_8_cnn1078_im5_cma_c0),
        .resulta(i_mul65_8_cnn1078_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_8_cnn1078_im5_cma_delay ( .xin(i_mul65_8_cnn1078_im5_cma_s0), .xout(i_mul65_8_cnn1078_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_8_cnn1078_im5_cma_q = i_mul65_8_cnn1078_im5_cma_qq[29:0];

    // redist10_i_mul65_8_cnn1078_im5_cma_q_1(DELAY,17927)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist10_i_mul65_8_cnn1078_im5_cma_q_1_q <= i_mul65_8_cnn1078_im5_cma_q;
        end
    end

    // i_mul65_8_cnn1078_sums_align_3(BITSHIFT,3189)@761
    assign i_mul65_8_cnn1078_sums_align_3_qint = { redist10_i_mul65_8_cnn1078_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_8_cnn1078_sums_align_3_q = i_mul65_8_cnn1078_sums_align_3_qint[64:0];

    // i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11911)@761
    assign i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_align_3_q};

    // i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2(ADD,9524)@761 + 1
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_q = i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11925)@762
    assign i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_8_cnn1078_sums_result_add_0_0_q[47:47];

    // i_mul65_8_cnn1078_bjA12(BITJOIN,3178)@754
    assign i_mul65_8_cnn1078_bjA12_q = {GND_q, i_mul65_8_cnn1078_bs1_merged_bit_select_d};

    // i_mul65_8_cnn1078_im10_cma(CHAINMULTADD,17859)@754 + 5
    // out q@760
    assign i_mul65_8_cnn1078_im10_cma_reset = ~ (resetn);
    assign i_mul65_8_cnn1078_im10_cma_ena0 = 1'b1;
    assign i_mul65_8_cnn1078_im10_cma_ena1 = i_mul65_8_cnn1078_im10_cma_ena0;
    assign i_mul65_8_cnn1078_im10_cma_ena2 = i_mul65_8_cnn1078_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_im10_cma_ah[0] <= i_mul65_8_cnn1078_bjA12_q;
        end
    end

    assign i_mul65_8_cnn1078_im10_cma_a0 = i_mul65_8_cnn1078_im10_cma_ah[0];
    assign i_mul65_8_cnn1078_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_8_cnn1078_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_8_cnn1078_im10_cma_ena2, i_mul65_8_cnn1078_im10_cma_ena1, i_mul65_8_cnn1078_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_8_cnn1078_im10_cma_a0),
        .coefsela(i_mul65_8_cnn1078_im10_cma_c0),
        .resulta(i_mul65_8_cnn1078_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_8_cnn1078_im10_cma_delay ( .xin(i_mul65_8_cnn1078_im10_cma_s0), .xout(i_mul65_8_cnn1078_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_8_cnn1078_im10_cma_q = i_mul65_8_cnn1078_im10_cma_qq[29:0];

    // redist9_i_mul65_8_cnn1078_im10_cma_q_1(DELAY,17926)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist9_i_mul65_8_cnn1078_im10_cma_q_1_q <= i_mul65_8_cnn1078_im10_cma_q;
        end
    end

    // i_mul65_8_cnn1078_sums_align_1(BITSHIFT,3187)@761
    assign i_mul65_8_cnn1078_sums_align_1_qint = { redist9_i_mul65_8_cnn1078_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_8_cnn1078_sums_align_1_q = i_mul65_8_cnn1078_sums_align_1_qint[46:0];

    // i_mul65_8_cnn1078_bjA17(BITJOIN,3183)@754
    assign i_mul65_8_cnn1078_bjA17_q = {GND_q, i_mul65_8_cnn1078_bs1_merged_bit_select_e};

    // i_mul65_8_cnn1078_im15_cma(CHAINMULTADD,17860)@754 + 5
    // out q@760
    assign i_mul65_8_cnn1078_im15_cma_reset = ~ (resetn);
    assign i_mul65_8_cnn1078_im15_cma_ena0 = 1'b1;
    assign i_mul65_8_cnn1078_im15_cma_ena1 = i_mul65_8_cnn1078_im15_cma_ena0;
    assign i_mul65_8_cnn1078_im15_cma_ena2 = i_mul65_8_cnn1078_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_im15_cma_ah[0] <= i_mul65_8_cnn1078_bjA17_q;
        end
    end

    assign i_mul65_8_cnn1078_im15_cma_a0 = i_mul65_8_cnn1078_im15_cma_ah[0];
    assign i_mul65_8_cnn1078_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_8_cnn1078_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_8_cnn1078_im15_cma_ena2, i_mul65_8_cnn1078_im15_cma_ena1, i_mul65_8_cnn1078_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_8_cnn1078_im15_cma_a0),
        .coefsela(i_mul65_8_cnn1078_im15_cma_c0),
        .resulta(i_mul65_8_cnn1078_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_8_cnn1078_im15_cma_delay ( .xin(i_mul65_8_cnn1078_im15_cma_s0), .xout(i_mul65_8_cnn1078_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_8_cnn1078_im15_cma_q = i_mul65_8_cnn1078_im15_cma_qq[29:0];

    // redist8_i_mul65_8_cnn1078_im15_cma_q_1(DELAY,17925)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist8_i_mul65_8_cnn1078_im15_cma_q_1_q <= i_mul65_8_cnn1078_im15_cma_q;
        end
    end

    // i_mul65_8_cnn1078_sums_result_add_0_0(ADD,3193)@761 + 1
    assign i_mul65_8_cnn1078_sums_result_add_0_0_a = {{18{redist8_i_mul65_8_cnn1078_im15_cma_q_1_q[29]}}, redist8_i_mul65_8_cnn1078_im15_cma_q_1_q};
    assign i_mul65_8_cnn1078_sums_result_add_0_0_b = {{1{i_mul65_8_cnn1078_sums_align_1_q[46]}}, i_mul65_8_cnn1078_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_sums_result_add_0_0_o <= $signed(i_mul65_8_cnn1078_sums_result_add_0_0_a) + $signed(i_mul65_8_cnn1078_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_8_cnn1078_sums_result_add_0_0_q = i_mul65_8_cnn1078_sums_result_add_0_0_o[47:0];

    // i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11947)@762
    assign i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_8_cnn1078_sums_result_add_0_0_q};

    // i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2(ADD,9535)@762 + 1
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_q = i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11959)@763
    assign i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11922)@761
    assign i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_8_cnn1078_sums_align_5_q[74:74];

    // redist391_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18308)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist391_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11921)@761
    assign i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_8_cnn1078_sums_align_5_q[74:70];

    // redist392_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18309)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist392_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11923)@762
    assign i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist391_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist392_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18310)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11918)@762
    assign i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist393_i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2(ADD,9525)@762 + 1
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_cin = i_mul65_8_cnn1078_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_8_cnn1078_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_q = i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11960)@763
    assign i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_8_cnn1078_sums_result_add_0_1_p2_of_2_q};

    // redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18301)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11955)@763
    assign i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist384_i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2(ADD,9536)@763 + 1
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_cin = i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_8_cnn1078_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_q = i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist741_i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_q_1(DELAY,18658)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist741_i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_8_cnn1078_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9537)@764
    assign i_mul65_8_cnn1078_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_8_cnn1078_sums_result_add_1_0_p2_of_2_q, redist741_i_mul65_8_cnn1078_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_8_cnn1078_extender_x(BITJOIN,2741)@764
    assign i_mul65_8_cnn1078_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_8_cnn1078_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_8_cnn1078_sel_x(BITSELECT,1060)@764
    assign bgTrunc_i_mul65_8_cnn1078_sel_x_b = i_mul65_8_cnn1078_extender_x_q[63:0];

    // i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select(BITSELECT,17915)@764
    assign i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_8_cnn1078_sel_x_b[63:54];
    assign i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_8_cnn1078_sel_x_b[53:36];
    assign i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_8_cnn1078_sel_x_b[35:18];
    assign i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_8_cnn1078_sel_x_b[17:0];

    // i_add_ptr66_8_cnn1083_mult_x_bjA2(BITJOIN,3678)@764
    assign i_add_ptr66_8_cnn1083_mult_x_bjA2_q = {GND_q, i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_8_cnn1083_mult_x_im0_shift0(BITSHIFT,8192)@764
    assign i_add_ptr66_8_cnn1083_mult_x_im0_shift0_qint = { i_add_ptr66_8_cnn1083_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_8_cnn1083_mult_x_im0_shift0_q = i_add_ptr66_8_cnn1083_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_align_5(BITSHIFT,3701)@764
    assign i_add_ptr66_8_cnn1083_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_8_cnn1083_mult_x_im0_shift0_q[12]}}, i_add_ptr66_8_cnn1083_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_8_cnn1083_mult_x_sums_align_5_q = i_add_ptr66_8_cnn1083_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_8_cnn1083_mult_x_bjA7(BITJOIN,3683)@764
    assign i_add_ptr66_8_cnn1083_mult_x_bjA7_q = {GND_q, i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_8_cnn1083_mult_x_im5_shift0(BITSHIFT,8193)@764
    assign i_add_ptr66_8_cnn1083_mult_x_im5_shift0_qint = { i_add_ptr66_8_cnn1083_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_8_cnn1083_mult_x_im5_shift0_q = i_add_ptr66_8_cnn1083_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_align_3(BITSHIFT,3699)@764
    assign i_add_ptr66_8_cnn1083_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_8_cnn1083_mult_x_im5_shift0_q[20]}}, i_add_ptr66_8_cnn1083_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_8_cnn1083_mult_x_sums_align_3_q = i_add_ptr66_8_cnn1083_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1(ADD,3704)@764 + 1
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_8_cnn1083_mult_x_sums_align_3_q[58]}}, i_add_ptr66_8_cnn1083_mult_x_sums_align_3_q};
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_8_cnn1083_mult_x_sums_align_5_q[68]}}, i_add_ptr66_8_cnn1083_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_q = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12578)@765
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_8_cnn1083_mult_x_bjA12(BITJOIN,3688)@764
    assign i_add_ptr66_8_cnn1083_mult_x_bjA12_q = {GND_q, i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_8_cnn1083_mult_x_im10_shift0(BITSHIFT,8194)@764
    assign i_add_ptr66_8_cnn1083_mult_x_im10_shift0_qint = { i_add_ptr66_8_cnn1083_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_8_cnn1083_mult_x_im10_shift0_q = i_add_ptr66_8_cnn1083_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_align_1(BITSHIFT,3697)@764
    assign i_add_ptr66_8_cnn1083_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_8_cnn1083_mult_x_im10_shift0_q[20]}}, i_add_ptr66_8_cnn1083_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_8_cnn1083_mult_x_sums_align_1_q = i_add_ptr66_8_cnn1083_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_8_cnn1083_mult_x_bjA17(BITJOIN,3693)@764
    assign i_add_ptr66_8_cnn1083_mult_x_bjA17_q = {GND_q, i_add_ptr66_8_cnn1083_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_8_cnn1083_mult_x_im15_shift0(BITSHIFT,8195)@764
    assign i_add_ptr66_8_cnn1083_mult_x_im15_shift0_qint = { i_add_ptr66_8_cnn1083_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_8_cnn1083_mult_x_im15_shift0_q = i_add_ptr66_8_cnn1083_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0(ADD,3703)@764 + 1
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_8_cnn1083_mult_x_im15_shift0_q[20]}}, i_add_ptr66_8_cnn1083_mult_x_im15_shift0_q};
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_8_cnn1083_mult_x_sums_align_1_q[40]}}, i_add_ptr66_8_cnn1083_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_q = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12606)@765
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2(ADD,9744)@765 + 1
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12611)@765
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_0_1_q[69:69];

    // redist324_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18241)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist324_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist325_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18242)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist325_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2(ADD,9745)@766 + 1
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist325_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist325_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist324_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist324_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist724_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18641)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist724_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9746)@767
    assign i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p2_of_2_q, redist724_i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_8_cnn1083_mult_extender_x(BITJOIN,1407)@767
    assign i_add_ptr66_8_cnn1083_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_8_cnn1083_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_8_cnn1083_trunc_sel_x(BITSELECT,1409)@767
    assign i_add_ptr66_8_cnn1083_trunc_sel_x_b = i_add_ptr66_8_cnn1083_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079(BLACKBOX,674)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_1080 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_select_63(BITSELECT,677)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_join(BITJOIN,676)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_8_cnn1083_add_x(ADD,1401)@767
    assign i_add_ptr66_8_cnn1083_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer12_cnn1079_vt_join_q};
    assign i_add_ptr66_8_cnn1083_add_x_b = {1'b0, i_add_ptr66_8_cnn1083_trunc_sel_x_b};
    assign i_add_ptr66_8_cnn1083_add_x_o = $unsigned(i_add_ptr66_8_cnn1083_add_x_a) + $unsigned(i_add_ptr66_8_cnn1083_add_x_b);
    assign i_add_ptr66_8_cnn1083_add_x_q = i_add_ptr66_8_cnn1083_add_x_o[64:0];

    // i_add_ptr66_8_cnn1083_dupName_0_trunc_sel_x(BITSELECT,1410)@767
    assign i_add_ptr66_8_cnn1083_dupName_0_trunc_sel_x_b = i_add_ptr66_8_cnn1083_add_x_q[63:0];

    // i_add_ptr66_8_cnn1082_vt_select_63(BITSELECT,93)@767
    assign i_add_ptr66_8_cnn1082_vt_select_63_b = i_add_ptr66_8_cnn1083_dupName_0_trunc_sel_x_b[63:2];

    // redist865_i_add_ptr66_8_cnn1082_vt_select_63_b_1(DELAY,18782)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist865_i_add_ptr66_8_cnn1082_vt_select_63_b_1_q <= i_add_ptr66_8_cnn1082_vt_select_63_b;
        end
    end

    // i_add_ptr66_8_cnn1082_vt_join(BITJOIN,92)@768
    assign i_add_ptr66_8_cnn1082_vt_join_q = {redist865_i_add_ptr66_8_cnn1082_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_8_cnn1109_add_x(ADD,1971)@768
    assign i_add_ptr70_3_8_cnn1109_add_x_a = {1'b0, i_add_ptr66_8_cnn1082_vt_join_q};
    assign i_add_ptr70_3_8_cnn1109_add_x_b = {1'b0, i_add_ptr70_3_8_cnn1109_trunc_sel_x_b};
    assign i_add_ptr70_3_8_cnn1109_add_x_o = $unsigned(i_add_ptr70_3_8_cnn1109_add_x_a) + $unsigned(i_add_ptr70_3_8_cnn1109_add_x_b);
    assign i_add_ptr70_3_8_cnn1109_add_x_q = i_add_ptr70_3_8_cnn1109_add_x_o[64:0];

    // i_add_ptr70_3_8_cnn1109_dupName_0_trunc_sel_x(BITSELECT,1980)@768
    assign i_add_ptr70_3_8_cnn1109_dupName_0_trunc_sel_x_b = i_add_ptr70_3_8_cnn1109_add_x_q[63:0];

    // i_add_ptr70_3_8_cnn1108_vt_select_63(BITSELECT,264)@768
    assign i_add_ptr70_3_8_cnn1108_vt_select_63_b = i_add_ptr70_3_8_cnn1109_dupName_0_trunc_sel_x_b[63:2];

    // redist808_i_add_ptr70_3_8_cnn1108_vt_select_63_b_1(DELAY,18725)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist808_i_add_ptr70_3_8_cnn1108_vt_select_63_b_1_q <= i_add_ptr70_3_8_cnn1108_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_8_cnn1108_vt_join(BITJOIN,263)@769
    assign i_add_ptr70_3_8_cnn1108_vt_join_q = {redist808_i_add_ptr70_3_8_cnn1108_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_8_cnn1111_add_x(ADD,2611)@769
    assign i_add_ptr73_371_8_cnn1111_add_x_a = {1'b0, i_add_ptr70_3_8_cnn1108_vt_join_q};
    assign i_add_ptr73_371_8_cnn1111_add_x_b = {1'b0, i_add_ptr73_371_8_cnn1111_trunc_sel_x_b};
    assign i_add_ptr73_371_8_cnn1111_add_x_o = $unsigned(i_add_ptr73_371_8_cnn1111_add_x_a) + $unsigned(i_add_ptr73_371_8_cnn1111_add_x_b);
    assign i_add_ptr73_371_8_cnn1111_add_x_q = i_add_ptr73_371_8_cnn1111_add_x_o[64:0];

    // i_add_ptr73_371_8_cnn1111_dupName_0_trunc_sel_x(BITSELECT,2620)@769
    assign i_add_ptr73_371_8_cnn1111_dupName_0_trunc_sel_x_b = i_add_ptr73_371_8_cnn1111_add_x_q[63:0];

    // i_add_ptr73_371_8_cnn1110_vt_select_63(BITSELECT,456)@769
    assign i_add_ptr73_371_8_cnn1110_vt_select_63_b = i_add_ptr73_371_8_cnn1111_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_8_cnn1110_vt_join(BITJOIN,455)@769
    assign i_add_ptr73_371_8_cnn1110_vt_join_q = {i_add_ptr73_371_8_cnn1110_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_select_63(BITSELECT,846)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_select_63_b = i_add_ptr73_371_8_cnn1110_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_join(BITJOIN,845)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn143_cnn1105(BLACKBOX,607)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_143_cnn1106 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn143_cnn1105 (
        .in_intel_reserved_ffwd_62_0(in_intel_reserved_ffwd_62_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_62_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn143_cnn1105_out_dest_data_out_62_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0(BITSHIFT,8604)@766
    assign i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0_q = i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5(BITSHIFT,6791)@766
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_8_cnn1103_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5_q = i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0(BITSHIFT,8605)@766
    assign i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0_q = i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3(BITSHIFT,6789)@766
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_8_cnn1103_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3_q = i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1(ADD,6794)@766 + 1
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_8_cnn1103_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_8_cnn1103_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16286)@767
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0(BITSHIFT,8606)@766
    assign i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0_q = i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1(BITSHIFT,6787)@766
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_8_cnn1103_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1_q = i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0(BITSHIFT,8607)@766
    assign i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0_q = i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0(ADD,6793)@766 + 1
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_8_cnn1103_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_8_cnn1103_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16314)@767
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2(ADD,10877)@767 + 1
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16319)@767
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_0_1_q[69:69];

    // redist118_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18035)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist118_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist119_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18036)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist119_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2(ADD,10878)@768 + 1
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist119_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist119_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist118_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist118_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist621_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18538)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist621_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10879)@769
    assign i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p2_of_2_q, redist621_i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_8_cnn1103_mult_extender_x(BITJOIN,2437)@769
    assign i_add_ptr73_270_8_cnn1103_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_8_cnn1103_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_8_cnn1103_trunc_sel_x(BITSELECT,2439)@769
    assign i_add_ptr73_270_8_cnn1103_trunc_sel_x_b = i_add_ptr73_270_8_cnn1103_mult_extender_x_q[63:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0(BITSHIFT,8352)@765
    assign i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0_q = i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5(BITSHIFT,4901)@765
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_8_cnn1101_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5_q = i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0(BITSHIFT,8353)@765
    assign i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0_q = i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3(BITSHIFT,4899)@765
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_8_cnn1101_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3_q = i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1(ADD,4904)@765 + 1
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_8_cnn1101_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_8_cnn1101_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14018)@766
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0(BITSHIFT,8354)@765
    assign i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0_q = i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1(BITSHIFT,4897)@765
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_8_cnn1101_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1_q = i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0(BITSHIFT,8355)@765
    assign i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0_q = i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0(ADD,4903)@765 + 1
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_8_cnn1101_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_8_cnn1101_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14046)@766
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2(ADD,10184)@766 + 1
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14051)@766
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_0_1_q[69:69];

    // redist244_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18161)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist244_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist245_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18162)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist245_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2(ADD,10185)@767 + 1
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist245_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist245_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist244_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist244_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist684_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18601)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist684_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10186)@768
    assign i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p2_of_2_q, redist684_i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_8_cnn1101_mult_extender_x(BITJOIN,1807)@768
    assign i_add_ptr70_2_8_cnn1101_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_8_cnn1101_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_8_cnn1101_trunc_sel_x(BITSELECT,1809)@768
    assign i_add_ptr70_2_8_cnn1101_trunc_sel_x_b = i_add_ptr70_2_8_cnn1101_mult_extender_x_q[63:0];

    // i_add_ptr70_2_8_cnn1101_add_x(ADD,1801)@768
    assign i_add_ptr70_2_8_cnn1101_add_x_a = {1'b0, i_add_ptr66_8_cnn1082_vt_join_q};
    assign i_add_ptr70_2_8_cnn1101_add_x_b = {1'b0, i_add_ptr70_2_8_cnn1101_trunc_sel_x_b};
    assign i_add_ptr70_2_8_cnn1101_add_x_o = $unsigned(i_add_ptr70_2_8_cnn1101_add_x_a) + $unsigned(i_add_ptr70_2_8_cnn1101_add_x_b);
    assign i_add_ptr70_2_8_cnn1101_add_x_q = i_add_ptr70_2_8_cnn1101_add_x_o[64:0];

    // i_add_ptr70_2_8_cnn1101_dupName_0_trunc_sel_x(BITSELECT,1810)@768
    assign i_add_ptr70_2_8_cnn1101_dupName_0_trunc_sel_x_b = i_add_ptr70_2_8_cnn1101_add_x_q[63:0];

    // i_add_ptr70_2_8_cnn1100_vt_select_63(BITSELECT,213)@768
    assign i_add_ptr70_2_8_cnn1100_vt_select_63_b = i_add_ptr70_2_8_cnn1101_dupName_0_trunc_sel_x_b[63:2];

    // redist825_i_add_ptr70_2_8_cnn1100_vt_select_63_b_1(DELAY,18742)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist825_i_add_ptr70_2_8_cnn1100_vt_select_63_b_1_q <= i_add_ptr70_2_8_cnn1100_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_8_cnn1100_vt_join(BITJOIN,212)@769
    assign i_add_ptr70_2_8_cnn1100_vt_join_q = {redist825_i_add_ptr70_2_8_cnn1100_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_8_cnn1103_add_x(ADD,2431)@769
    assign i_add_ptr73_270_8_cnn1103_add_x_a = {1'b0, i_add_ptr70_2_8_cnn1100_vt_join_q};
    assign i_add_ptr73_270_8_cnn1103_add_x_b = {1'b0, i_add_ptr73_270_8_cnn1103_trunc_sel_x_b};
    assign i_add_ptr73_270_8_cnn1103_add_x_o = $unsigned(i_add_ptr73_270_8_cnn1103_add_x_a) + $unsigned(i_add_ptr73_270_8_cnn1103_add_x_b);
    assign i_add_ptr73_270_8_cnn1103_add_x_q = i_add_ptr73_270_8_cnn1103_add_x_o[64:0];

    // i_add_ptr73_270_8_cnn1103_dupName_0_trunc_sel_x(BITSELECT,2440)@769
    assign i_add_ptr73_270_8_cnn1103_dupName_0_trunc_sel_x_b = i_add_ptr73_270_8_cnn1103_add_x_q[63:0];

    // i_add_ptr73_270_8_cnn1102_vt_select_63(BITSELECT,402)@769
    assign i_add_ptr73_270_8_cnn1102_vt_select_63_b = i_add_ptr73_270_8_cnn1103_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_8_cnn1102_vt_join(BITJOIN,401)@769
    assign i_add_ptr73_270_8_cnn1102_vt_join_q = {i_add_ptr73_270_8_cnn1102_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_select_63(BITSELECT,842)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_select_63_b = i_add_ptr73_270_8_cnn1102_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_join(BITJOIN,841)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn142_cnn1097(BLACKBOX,606)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_142_cnn1098 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn142_cnn1097 (
        .in_intel_reserved_ffwd_61_0(in_intel_reserved_ffwd_61_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_61_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn142_cnn1097_out_dest_data_out_61_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0(BITSHIFT,8536)@766
    assign i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0_q = i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5(BITSHIFT,6281)@766
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_8_cnn1095_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5_q = i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0(BITSHIFT,8537)@766
    assign i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0_q = i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3(BITSHIFT,6279)@766
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_8_cnn1095_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3_q = i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1(ADD,6284)@766 + 1
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_8_cnn1095_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_8_cnn1095_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15674)@767
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0(BITSHIFT,8538)@766
    assign i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0_q = i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1(BITSHIFT,6277)@766
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_8_cnn1095_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1_q = i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0(BITSHIFT,8539)@766
    assign i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0_q = i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0(ADD,6283)@766 + 1
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_8_cnn1095_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_8_cnn1095_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15702)@767
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2(ADD,10690)@767 + 1
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15707)@767
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_0_1_q[69:69];

    // redist152_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18069)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist152_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist153_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18070)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist153_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2(ADD,10691)@768 + 1
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist153_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist153_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist152_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist152_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist638_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18555)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist638_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10692)@769
    assign i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p2_of_2_q, redist638_i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_8_cnn1095_mult_extender_x(BITJOIN,2267)@769
    assign i_add_ptr73_169_8_cnn1095_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_8_cnn1095_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_8_cnn1095_trunc_sel_x(BITSELECT,2269)@769
    assign i_add_ptr73_169_8_cnn1095_trunc_sel_x_b = i_add_ptr73_169_8_cnn1095_mult_extender_x_q[63:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0(BITSHIFT,8284)@765
    assign i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0_q = i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5(BITSHIFT,4391)@765
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_8_cnn1093_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5_q = i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0(BITSHIFT,8285)@765
    assign i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0_q = i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3(BITSHIFT,4389)@765
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_8_cnn1093_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3_q = i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1(ADD,4394)@765 + 1
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_8_cnn1093_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_8_cnn1093_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13406)@766
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0(BITSHIFT,8286)@765
    assign i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0_q = i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1(BITSHIFT,4387)@765
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_8_cnn1093_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1_q = i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0(BITSHIFT,8287)@765
    assign i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0_q = i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0(ADD,4393)@765 + 1
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_8_cnn1093_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_8_cnn1093_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13434)@766
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2(ADD,9997)@766 + 1
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13439)@766
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_0_1_q[69:69];

    // redist278_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18195)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist278_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist279_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18196)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist279_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2(ADD,9998)@767 + 1
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist279_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist279_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist278_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist278_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist701_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18618)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist701_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9999)@768
    assign i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p2_of_2_q, redist701_i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_8_cnn1093_mult_extender_x(BITJOIN,1637)@768
    assign i_add_ptr70_1_8_cnn1093_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_8_cnn1093_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_8_cnn1093_trunc_sel_x(BITSELECT,1639)@768
    assign i_add_ptr70_1_8_cnn1093_trunc_sel_x_b = i_add_ptr70_1_8_cnn1093_mult_extender_x_q[63:0];

    // i_add_ptr70_1_8_cnn1093_add_x(ADD,1631)@768
    assign i_add_ptr70_1_8_cnn1093_add_x_a = {1'b0, i_add_ptr66_8_cnn1082_vt_join_q};
    assign i_add_ptr70_1_8_cnn1093_add_x_b = {1'b0, i_add_ptr70_1_8_cnn1093_trunc_sel_x_b};
    assign i_add_ptr70_1_8_cnn1093_add_x_o = $unsigned(i_add_ptr70_1_8_cnn1093_add_x_a) + $unsigned(i_add_ptr70_1_8_cnn1093_add_x_b);
    assign i_add_ptr70_1_8_cnn1093_add_x_q = i_add_ptr70_1_8_cnn1093_add_x_o[64:0];

    // i_add_ptr70_1_8_cnn1093_dupName_0_trunc_sel_x(BITSELECT,1640)@768
    assign i_add_ptr70_1_8_cnn1093_dupName_0_trunc_sel_x_b = i_add_ptr70_1_8_cnn1093_add_x_q[63:0];

    // i_add_ptr70_1_8_cnn1092_vt_select_63(BITSELECT,162)@768
    assign i_add_ptr70_1_8_cnn1092_vt_select_63_b = i_add_ptr70_1_8_cnn1093_dupName_0_trunc_sel_x_b[63:2];

    // redist842_i_add_ptr70_1_8_cnn1092_vt_select_63_b_1(DELAY,18759)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist842_i_add_ptr70_1_8_cnn1092_vt_select_63_b_1_q <= i_add_ptr70_1_8_cnn1092_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_8_cnn1092_vt_join(BITJOIN,161)@769
    assign i_add_ptr70_1_8_cnn1092_vt_join_q = {redist842_i_add_ptr70_1_8_cnn1092_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_8_cnn1095_add_x(ADD,2261)@769
    assign i_add_ptr73_169_8_cnn1095_add_x_a = {1'b0, i_add_ptr70_1_8_cnn1092_vt_join_q};
    assign i_add_ptr73_169_8_cnn1095_add_x_b = {1'b0, i_add_ptr73_169_8_cnn1095_trunc_sel_x_b};
    assign i_add_ptr73_169_8_cnn1095_add_x_o = $unsigned(i_add_ptr73_169_8_cnn1095_add_x_a) + $unsigned(i_add_ptr73_169_8_cnn1095_add_x_b);
    assign i_add_ptr73_169_8_cnn1095_add_x_q = i_add_ptr73_169_8_cnn1095_add_x_o[64:0];

    // i_add_ptr73_169_8_cnn1095_dupName_0_trunc_sel_x(BITSELECT,2270)@769
    assign i_add_ptr73_169_8_cnn1095_dupName_0_trunc_sel_x_b = i_add_ptr73_169_8_cnn1095_add_x_q[63:0];

    // i_add_ptr73_169_8_cnn1094_vt_select_63(BITSELECT,351)@769
    assign i_add_ptr73_169_8_cnn1094_vt_select_63_b = i_add_ptr73_169_8_cnn1095_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_8_cnn1094_vt_join(BITJOIN,350)@769
    assign i_add_ptr73_169_8_cnn1094_vt_join_q = {i_add_ptr73_169_8_cnn1094_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_select_63(BITSELECT,838)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_select_63_b = i_add_ptr73_169_8_cnn1094_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_join(BITJOIN,837)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn141_cnn1089(BLACKBOX,605)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_141_cnn1090 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn141_cnn1089 (
        .in_intel_reserved_ffwd_60_0(in_intel_reserved_ffwd_60_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_60_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn141_cnn1089_out_dest_data_out_60_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_8_cnn1087_mult_x_im0_shift0(BITSHIFT,8704)@766
    assign i_add_ptr73_8_cnn1087_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_8_cnn1087_mult_x_im0_shift0_q = i_add_ptr73_8_cnn1087_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_align_5(BITSHIFT,7541)@766
    assign i_add_ptr73_8_cnn1087_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_8_cnn1087_mult_x_im0_shift0_q[12]}}, i_add_ptr73_8_cnn1087_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_8_cnn1087_mult_x_sums_align_5_q = i_add_ptr73_8_cnn1087_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_8_cnn1087_mult_x_im5_shift0(BITSHIFT,8705)@766
    assign i_add_ptr73_8_cnn1087_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_8_cnn1087_mult_x_im5_shift0_q = i_add_ptr73_8_cnn1087_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_align_3(BITSHIFT,7539)@766
    assign i_add_ptr73_8_cnn1087_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_8_cnn1087_mult_x_im5_shift0_q[20]}}, i_add_ptr73_8_cnn1087_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_8_cnn1087_mult_x_sums_align_3_q = i_add_ptr73_8_cnn1087_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1(ADD,7544)@766 + 1
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_8_cnn1087_mult_x_sums_align_3_q[58]}}, i_add_ptr73_8_cnn1087_mult_x_sums_align_3_q};
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_8_cnn1087_mult_x_sums_align_5_q[68]}}, i_add_ptr73_8_cnn1087_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_q = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17186)@767
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_8_cnn1087_mult_x_im10_shift0(BITSHIFT,8706)@766
    assign i_add_ptr73_8_cnn1087_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_8_cnn1087_mult_x_im10_shift0_q = i_add_ptr73_8_cnn1087_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_align_1(BITSHIFT,7537)@766
    assign i_add_ptr73_8_cnn1087_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_8_cnn1087_mult_x_im10_shift0_q[20]}}, i_add_ptr73_8_cnn1087_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_8_cnn1087_mult_x_sums_align_1_q = i_add_ptr73_8_cnn1087_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_8_cnn1087_mult_x_im15_shift0(BITSHIFT,8707)@766
    assign i_add_ptr73_8_cnn1087_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_8_cnn1087_mult_x_im15_shift0_q = i_add_ptr73_8_cnn1087_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0(ADD,7543)@766 + 1
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_8_cnn1087_mult_x_im15_shift0_q[20]}}, i_add_ptr73_8_cnn1087_mult_x_im15_shift0_q};
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_8_cnn1087_mult_x_sums_align_1_q[40]}}, i_add_ptr73_8_cnn1087_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_q = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17214)@767
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2(ADD,11152)@767 + 1
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17219)@767
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_0_1_q[69:69];

    // redist68_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17985)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist68_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist69_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17986)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist69_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2(ADD,11153)@768 + 1
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist69_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist69_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist68_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist68_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist596_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18513)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist596_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11154)@769
    assign i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p2_of_2_q, redist596_i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_8_cnn1087_mult_extender_x(BITJOIN,2687)@769
    assign i_add_ptr73_8_cnn1087_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_8_cnn1087_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_8_cnn1087_trunc_sel_x(BITSELECT,2689)@769
    assign i_add_ptr73_8_cnn1087_trunc_sel_x_b = i_add_ptr73_8_cnn1087_mult_extender_x_q[63:0];

    // i_add_ptr70_8_cnn1085_mult_x_im0_shift0(BITSHIFT,8448)@765
    assign i_add_ptr70_8_cnn1085_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_8_cnn1085_mult_x_im0_shift0_q = i_add_ptr70_8_cnn1085_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_align_5(BITSHIFT,5621)@765
    assign i_add_ptr70_8_cnn1085_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_8_cnn1085_mult_x_im0_shift0_q[12]}}, i_add_ptr70_8_cnn1085_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_8_cnn1085_mult_x_sums_align_5_q = i_add_ptr70_8_cnn1085_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_8_cnn1085_mult_x_im5_shift0(BITSHIFT,8449)@765
    assign i_add_ptr70_8_cnn1085_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_8_cnn1085_mult_x_im5_shift0_q = i_add_ptr70_8_cnn1085_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_align_3(BITSHIFT,5619)@765
    assign i_add_ptr70_8_cnn1085_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_8_cnn1085_mult_x_im5_shift0_q[20]}}, i_add_ptr70_8_cnn1085_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_8_cnn1085_mult_x_sums_align_3_q = i_add_ptr70_8_cnn1085_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1(ADD,5624)@765 + 1
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_8_cnn1085_mult_x_sums_align_3_q[58]}}, i_add_ptr70_8_cnn1085_mult_x_sums_align_3_q};
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_8_cnn1085_mult_x_sums_align_5_q[68]}}, i_add_ptr70_8_cnn1085_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_q = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14882)@766
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_8_cnn1085_mult_x_im10_shift0(BITSHIFT,8450)@765
    assign i_add_ptr70_8_cnn1085_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_8_cnn1085_mult_x_im10_shift0_q = i_add_ptr70_8_cnn1085_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_align_1(BITSHIFT,5617)@765
    assign i_add_ptr70_8_cnn1085_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_8_cnn1085_mult_x_im10_shift0_q[20]}}, i_add_ptr70_8_cnn1085_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_8_cnn1085_mult_x_sums_align_1_q = i_add_ptr70_8_cnn1085_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_8_cnn1085_mult_x_im15_shift0(BITSHIFT,8451)@765
    assign i_add_ptr70_8_cnn1085_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_8_cnn1085_mult_x_im15_shift0_q = i_add_ptr70_8_cnn1085_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0(ADD,5623)@765 + 1
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_8_cnn1085_mult_x_im15_shift0_q[20]}}, i_add_ptr70_8_cnn1085_mult_x_im15_shift0_q};
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_8_cnn1085_mult_x_sums_align_1_q[40]}}, i_add_ptr70_8_cnn1085_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_q = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14910)@766
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2(ADD,10448)@766 + 1
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14915)@766
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_0_1_q[69:69];

    // redist196_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18113)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist196_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist197_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18114)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist197_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2(ADD,10449)@767 + 1
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist197_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist197_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist196_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist196_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist660_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18577)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist660_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10450)@768
    assign i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p2_of_2_q, redist660_i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_8_cnn1085_mult_extender_x(BITJOIN,2047)@768
    assign i_add_ptr70_8_cnn1085_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_8_cnn1085_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_8_cnn1085_trunc_sel_x(BITSELECT,2049)@768
    assign i_add_ptr70_8_cnn1085_trunc_sel_x_b = i_add_ptr70_8_cnn1085_mult_extender_x_q[63:0];

    // i_add_ptr70_8_cnn1085_add_x(ADD,2041)@768
    assign i_add_ptr70_8_cnn1085_add_x_a = {1'b0, i_add_ptr66_8_cnn1082_vt_join_q};
    assign i_add_ptr70_8_cnn1085_add_x_b = {1'b0, i_add_ptr70_8_cnn1085_trunc_sel_x_b};
    assign i_add_ptr70_8_cnn1085_add_x_o = $unsigned(i_add_ptr70_8_cnn1085_add_x_a) + $unsigned(i_add_ptr70_8_cnn1085_add_x_b);
    assign i_add_ptr70_8_cnn1085_add_x_q = i_add_ptr70_8_cnn1085_add_x_o[64:0];

    // i_add_ptr70_8_cnn1085_dupName_0_trunc_sel_x(BITSELECT,2050)@768
    assign i_add_ptr70_8_cnn1085_dupName_0_trunc_sel_x_b = i_add_ptr70_8_cnn1085_add_x_q[63:0];

    // i_add_ptr70_8_cnn1084_vt_select_63(BITSELECT,285)@768
    assign i_add_ptr70_8_cnn1084_vt_select_63_b = i_add_ptr70_8_cnn1085_dupName_0_trunc_sel_x_b[63:2];

    // redist801_i_add_ptr70_8_cnn1084_vt_select_63_b_1(DELAY,18718)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist801_i_add_ptr70_8_cnn1084_vt_select_63_b_1_q <= i_add_ptr70_8_cnn1084_vt_select_63_b;
        end
    end

    // i_add_ptr70_8_cnn1084_vt_join(BITJOIN,284)@769
    assign i_add_ptr70_8_cnn1084_vt_join_q = {redist801_i_add_ptr70_8_cnn1084_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_8_cnn1087_add_x(ADD,2681)@769
    assign i_add_ptr73_8_cnn1087_add_x_a = {1'b0, i_add_ptr70_8_cnn1084_vt_join_q};
    assign i_add_ptr73_8_cnn1087_add_x_b = {1'b0, i_add_ptr73_8_cnn1087_trunc_sel_x_b};
    assign i_add_ptr73_8_cnn1087_add_x_o = $unsigned(i_add_ptr73_8_cnn1087_add_x_a) + $unsigned(i_add_ptr73_8_cnn1087_add_x_b);
    assign i_add_ptr73_8_cnn1087_add_x_q = i_add_ptr73_8_cnn1087_add_x_o[64:0];

    // i_add_ptr73_8_cnn1087_dupName_0_trunc_sel_x(BITSELECT,2690)@769
    assign i_add_ptr73_8_cnn1087_dupName_0_trunc_sel_x_b = i_add_ptr73_8_cnn1087_add_x_q[63:0];

    // i_add_ptr73_8_cnn1086_vt_select_63(BITSELECT,477)@769
    assign i_add_ptr73_8_cnn1086_vt_select_63_b = i_add_ptr73_8_cnn1087_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_8_cnn1086_vt_join(BITJOIN,476)@769
    assign i_add_ptr73_8_cnn1086_vt_join_q = {i_add_ptr73_8_cnn1086_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_select_63(BITSELECT,834)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_select_63_b = i_add_ptr73_8_cnn1086_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_join(BITJOIN,833)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn140_cnn1074(BLACKBOX,604)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_140_cnn1075 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn140_cnn1074 (
        .in_intel_reserved_ffwd_59_0(in_intel_reserved_ffwd_59_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_59_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn140_cnn1074_out_dest_data_out_59_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0(BITSHIFT,8672)@766
    assign i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0_q = i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5(BITSHIFT,7301)@766
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_7_cnn1072_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5_q = i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0(BITSHIFT,8673)@766
    assign i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0_q = i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3(BITSHIFT,7299)@766
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_7_cnn1072_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3_q = i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1(ADD,7304)@766 + 1
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_7_cnn1072_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_7_cnn1072_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16898)@767
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0(BITSHIFT,8674)@766
    assign i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0_q = i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1(BITSHIFT,7297)@766
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_7_cnn1072_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1_q = i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0(BITSHIFT,8675)@766
    assign i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0_q = i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0(ADD,7303)@766 + 1
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_7_cnn1072_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_7_cnn1072_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16926)@767
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2(ADD,11064)@767 + 1
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16931)@767
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_0_1_q[69:69];

    // redist84_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18001)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist84_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist85_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18002)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist85_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2(ADD,11065)@768 + 1
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist85_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist85_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist84_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist84_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist604_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18521)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist604_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11066)@769
    assign i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p2_of_2_q, redist604_i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_7_cnn1072_mult_extender_x(BITJOIN,2607)@769
    assign i_add_ptr73_371_7_cnn1072_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_7_cnn1072_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_7_cnn1072_trunc_sel_x(BITSELECT,2609)@769
    assign i_add_ptr73_371_7_cnn1072_trunc_sel_x_b = i_add_ptr73_371_7_cnn1072_mult_extender_x_q[63:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0(BITSHIFT,8416)@765
    assign i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0_q = i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5(BITSHIFT,5381)@765
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_7_cnn1070_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5_q = i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0(BITSHIFT,8417)@765
    assign i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0_q = i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3(BITSHIFT,5379)@765
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_7_cnn1070_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3_q = i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1(ADD,5384)@765 + 1
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_7_cnn1070_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_7_cnn1070_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14594)@766
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0(BITSHIFT,8418)@765
    assign i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0_q = i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1(BITSHIFT,5377)@765
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_7_cnn1070_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1_q = i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0(BITSHIFT,8419)@765
    assign i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0_q = i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0(ADD,5383)@765 + 1
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_7_cnn1070_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_7_cnn1070_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14622)@766
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2(ADD,10360)@766 + 1
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14627)@766
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_0_1_q[69:69];

    // redist212_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18129)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist212_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist213_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18130)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist213_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2(ADD,10361)@767 + 1
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist213_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist213_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist212_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist212_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist668_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18585)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist668_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10362)@768
    assign i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p2_of_2_q, redist668_i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_7_cnn1070_mult_extender_x(BITJOIN,1967)@768
    assign i_add_ptr70_3_7_cnn1070_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_7_cnn1070_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_7_cnn1070_trunc_sel_x(BITSELECT,1969)@768
    assign i_add_ptr70_3_7_cnn1070_trunc_sel_x_b = i_add_ptr70_3_7_cnn1070_mult_extender_x_q[63:0];

    // c_i64_7gr(CONSTANT,48)
    assign c_i64_7gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000111;

    // i_inc79_6_cnn1038(LOGICAL,538)@754
    assign i_inc79_6_cnn1038_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_7gr_q;

    // i_inc79_6_cnn1038_vt_select_63(BITSELECT,541)@754
    assign i_inc79_6_cnn1038_vt_select_63_b = i_inc79_6_cnn1038_q[63:3];

    // i_inc79_6_cnn1038_vt_join(BITJOIN,540)@754
    assign i_inc79_6_cnn1038_vt_join_q = {i_inc79_6_cnn1038_vt_select_63_b, i_inc79_13_cnn1311_vt_const_3_q};

    // i_mul65_7_cnn1039_bs1_merged_bit_select(BITSELECT,17887)@754
    assign i_mul65_7_cnn1039_bs1_merged_bit_select_b = i_inc79_6_cnn1038_vt_join_q[63:54];
    assign i_mul65_7_cnn1039_bs1_merged_bit_select_c = i_inc79_6_cnn1038_vt_join_q[53:36];
    assign i_mul65_7_cnn1039_bs1_merged_bit_select_d = i_inc79_6_cnn1038_vt_join_q[35:18];
    assign i_mul65_7_cnn1039_bs1_merged_bit_select_e = i_inc79_6_cnn1038_vt_join_q[17:0];

    // i_mul65_7_cnn1039_bjA2(BITJOIN,3138)@754
    assign i_mul65_7_cnn1039_bjA2_q = {GND_q, i_mul65_7_cnn1039_bs1_merged_bit_select_b};

    // i_mul65_7_cnn1039_im0_cma(CHAINMULTADD,17853)@754 + 5
    // out q@760
    assign i_mul65_7_cnn1039_im0_cma_reset = ~ (resetn);
    assign i_mul65_7_cnn1039_im0_cma_ena0 = 1'b1;
    assign i_mul65_7_cnn1039_im0_cma_ena1 = i_mul65_7_cnn1039_im0_cma_ena0;
    assign i_mul65_7_cnn1039_im0_cma_ena2 = i_mul65_7_cnn1039_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_im0_cma_ah[0] <= i_mul65_7_cnn1039_bjA2_q;
        end
    end

    assign i_mul65_7_cnn1039_im0_cma_a0 = i_mul65_7_cnn1039_im0_cma_ah[0];
    assign i_mul65_7_cnn1039_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_7_cnn1039_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_7_cnn1039_im0_cma_ena2, i_mul65_7_cnn1039_im0_cma_ena1, i_mul65_7_cnn1039_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_7_cnn1039_im0_cma_a0),
        .coefsela(i_mul65_7_cnn1039_im0_cma_c0),
        .resulta(i_mul65_7_cnn1039_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_7_cnn1039_im0_cma_delay ( .xin(i_mul65_7_cnn1039_im0_cma_s0), .xout(i_mul65_7_cnn1039_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_7_cnn1039_im0_cma_q = i_mul65_7_cnn1039_im0_cma_qq[21:0];

    // redist15_i_mul65_7_cnn1039_im0_cma_q_1(DELAY,17932)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist15_i_mul65_7_cnn1039_im0_cma_q_1_q <= i_mul65_7_cnn1039_im0_cma_q;
        end
    end

    // i_mul65_7_cnn1039_sums_align_5(BITSHIFT,3161)@761
    assign i_mul65_7_cnn1039_sums_align_5_qint = { redist15_i_mul65_7_cnn1039_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_7_cnn1039_sums_align_5_q = i_mul65_7_cnn1039_sums_align_5_qint[74:0];

    // i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11863)@761
    assign i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_7_cnn1039_sums_align_5_q[69:0];

    // i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11850)@761
    assign i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_7_cnn1039_sums_align_3_q[64:64];

    // i_mul65_7_cnn1039_bjA7(BITJOIN,3143)@754
    assign i_mul65_7_cnn1039_bjA7_q = {GND_q, i_mul65_7_cnn1039_bs1_merged_bit_select_c};

    // i_mul65_7_cnn1039_im5_cma(CHAINMULTADD,17854)@754 + 5
    // out q@760
    assign i_mul65_7_cnn1039_im5_cma_reset = ~ (resetn);
    assign i_mul65_7_cnn1039_im5_cma_ena0 = 1'b1;
    assign i_mul65_7_cnn1039_im5_cma_ena1 = i_mul65_7_cnn1039_im5_cma_ena0;
    assign i_mul65_7_cnn1039_im5_cma_ena2 = i_mul65_7_cnn1039_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_im5_cma_ah[0] <= i_mul65_7_cnn1039_bjA7_q;
        end
    end

    assign i_mul65_7_cnn1039_im5_cma_a0 = i_mul65_7_cnn1039_im5_cma_ah[0];
    assign i_mul65_7_cnn1039_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_7_cnn1039_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_7_cnn1039_im5_cma_ena2, i_mul65_7_cnn1039_im5_cma_ena1, i_mul65_7_cnn1039_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_7_cnn1039_im5_cma_a0),
        .coefsela(i_mul65_7_cnn1039_im5_cma_c0),
        .resulta(i_mul65_7_cnn1039_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_7_cnn1039_im5_cma_delay ( .xin(i_mul65_7_cnn1039_im5_cma_s0), .xout(i_mul65_7_cnn1039_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_7_cnn1039_im5_cma_q = i_mul65_7_cnn1039_im5_cma_qq[29:0];

    // redist14_i_mul65_7_cnn1039_im5_cma_q_1(DELAY,17931)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist14_i_mul65_7_cnn1039_im5_cma_q_1_q <= i_mul65_7_cnn1039_im5_cma_q;
        end
    end

    // i_mul65_7_cnn1039_sums_align_3(BITSHIFT,3159)@761
    assign i_mul65_7_cnn1039_sums_align_3_qint = { redist14_i_mul65_7_cnn1039_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_7_cnn1039_sums_align_3_q = i_mul65_7_cnn1039_sums_align_3_qint[64:0];

    // i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11855)@761
    assign i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_align_3_q};

    // i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2(ADD,9502)@761 + 1
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_q = i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11869)@762
    assign i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_7_cnn1039_sums_result_add_0_0_q[47:47];

    // i_mul65_7_cnn1039_bjA12(BITJOIN,3148)@754
    assign i_mul65_7_cnn1039_bjA12_q = {GND_q, i_mul65_7_cnn1039_bs1_merged_bit_select_d};

    // i_mul65_7_cnn1039_im10_cma(CHAINMULTADD,17855)@754 + 5
    // out q@760
    assign i_mul65_7_cnn1039_im10_cma_reset = ~ (resetn);
    assign i_mul65_7_cnn1039_im10_cma_ena0 = 1'b1;
    assign i_mul65_7_cnn1039_im10_cma_ena1 = i_mul65_7_cnn1039_im10_cma_ena0;
    assign i_mul65_7_cnn1039_im10_cma_ena2 = i_mul65_7_cnn1039_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_im10_cma_ah[0] <= i_mul65_7_cnn1039_bjA12_q;
        end
    end

    assign i_mul65_7_cnn1039_im10_cma_a0 = i_mul65_7_cnn1039_im10_cma_ah[0];
    assign i_mul65_7_cnn1039_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_7_cnn1039_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_7_cnn1039_im10_cma_ena2, i_mul65_7_cnn1039_im10_cma_ena1, i_mul65_7_cnn1039_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_7_cnn1039_im10_cma_a0),
        .coefsela(i_mul65_7_cnn1039_im10_cma_c0),
        .resulta(i_mul65_7_cnn1039_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_7_cnn1039_im10_cma_delay ( .xin(i_mul65_7_cnn1039_im10_cma_s0), .xout(i_mul65_7_cnn1039_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_7_cnn1039_im10_cma_q = i_mul65_7_cnn1039_im10_cma_qq[29:0];

    // redist13_i_mul65_7_cnn1039_im10_cma_q_1(DELAY,17930)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist13_i_mul65_7_cnn1039_im10_cma_q_1_q <= i_mul65_7_cnn1039_im10_cma_q;
        end
    end

    // i_mul65_7_cnn1039_sums_align_1(BITSHIFT,3157)@761
    assign i_mul65_7_cnn1039_sums_align_1_qint = { redist13_i_mul65_7_cnn1039_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_7_cnn1039_sums_align_1_q = i_mul65_7_cnn1039_sums_align_1_qint[46:0];

    // i_mul65_7_cnn1039_bjA17(BITJOIN,3153)@754
    assign i_mul65_7_cnn1039_bjA17_q = {GND_q, i_mul65_7_cnn1039_bs1_merged_bit_select_e};

    // i_mul65_7_cnn1039_im15_cma(CHAINMULTADD,17856)@754 + 5
    // out q@760
    assign i_mul65_7_cnn1039_im15_cma_reset = ~ (resetn);
    assign i_mul65_7_cnn1039_im15_cma_ena0 = 1'b1;
    assign i_mul65_7_cnn1039_im15_cma_ena1 = i_mul65_7_cnn1039_im15_cma_ena0;
    assign i_mul65_7_cnn1039_im15_cma_ena2 = i_mul65_7_cnn1039_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_im15_cma_ah[0] <= i_mul65_7_cnn1039_bjA17_q;
        end
    end

    assign i_mul65_7_cnn1039_im15_cma_a0 = i_mul65_7_cnn1039_im15_cma_ah[0];
    assign i_mul65_7_cnn1039_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_7_cnn1039_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_7_cnn1039_im15_cma_ena2, i_mul65_7_cnn1039_im15_cma_ena1, i_mul65_7_cnn1039_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_7_cnn1039_im15_cma_a0),
        .coefsela(i_mul65_7_cnn1039_im15_cma_c0),
        .resulta(i_mul65_7_cnn1039_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_7_cnn1039_im15_cma_delay ( .xin(i_mul65_7_cnn1039_im15_cma_s0), .xout(i_mul65_7_cnn1039_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_7_cnn1039_im15_cma_q = i_mul65_7_cnn1039_im15_cma_qq[29:0];

    // redist12_i_mul65_7_cnn1039_im15_cma_q_1(DELAY,17929)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist12_i_mul65_7_cnn1039_im15_cma_q_1_q <= i_mul65_7_cnn1039_im15_cma_q;
        end
    end

    // i_mul65_7_cnn1039_sums_result_add_0_0(ADD,3163)@761 + 1
    assign i_mul65_7_cnn1039_sums_result_add_0_0_a = {{18{redist12_i_mul65_7_cnn1039_im15_cma_q_1_q[29]}}, redist12_i_mul65_7_cnn1039_im15_cma_q_1_q};
    assign i_mul65_7_cnn1039_sums_result_add_0_0_b = {{1{i_mul65_7_cnn1039_sums_align_1_q[46]}}, i_mul65_7_cnn1039_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_sums_result_add_0_0_o <= $signed(i_mul65_7_cnn1039_sums_result_add_0_0_a) + $signed(i_mul65_7_cnn1039_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_7_cnn1039_sums_result_add_0_0_q = i_mul65_7_cnn1039_sums_result_add_0_0_o[47:0];

    // i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11891)@762
    assign i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_7_cnn1039_sums_result_add_0_0_q};

    // i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2(ADD,9513)@762 + 1
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_q = i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11903)@763
    assign i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11866)@761
    assign i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_7_cnn1039_sums_align_5_q[74:74];

    // redist406_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18323)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist406_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11865)@761
    assign i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_7_cnn1039_sums_align_5_q[74:70];

    // redist407_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18324)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist407_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11867)@762
    assign i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist406_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist407_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18325)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11862)@762
    assign i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist408_i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2(ADD,9503)@762 + 1
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_cin = i_mul65_7_cnn1039_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_7_cnn1039_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_q = i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11904)@763
    assign i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_7_cnn1039_sums_result_add_0_1_p2_of_2_q};

    // redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18316)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11899)@763
    assign i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist399_i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2(ADD,9514)@763 + 1
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_cin = i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_7_cnn1039_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_q = i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist742_i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_q_1(DELAY,18659)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist742_i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_7_cnn1039_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9515)@764
    assign i_mul65_7_cnn1039_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_7_cnn1039_sums_result_add_1_0_p2_of_2_q, redist742_i_mul65_7_cnn1039_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_7_cnn1039_extender_x(BITJOIN,2739)@764
    assign i_mul65_7_cnn1039_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_7_cnn1039_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_7_cnn1039_sel_x(BITSELECT,1059)@764
    assign bgTrunc_i_mul65_7_cnn1039_sel_x_b = i_mul65_7_cnn1039_extender_x_q[63:0];

    // i_mul65_7_cnn1039_vt_select_63(BITSELECT,1023)@764
    assign i_mul65_7_cnn1039_vt_select_63_b = bgTrunc_i_mul65_7_cnn1039_sel_x_b[63:3];

    // i_mul65_7_cnn1039_vt_join(BITJOIN,1022)@764
    assign i_mul65_7_cnn1039_vt_join_q = {i_mul65_7_cnn1039_vt_select_63_b, i_inc79_13_cnn1311_vt_const_3_q};

    // i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select(BITSELECT,17907)@764
    assign i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_b = i_mul65_7_cnn1039_vt_join_q[63:54];
    assign i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_c = i_mul65_7_cnn1039_vt_join_q[53:36];
    assign i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_d = i_mul65_7_cnn1039_vt_join_q[35:18];
    assign i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_e = i_mul65_7_cnn1039_vt_join_q[17:0];

    // i_add_ptr66_7_cnn1044_mult_x_bjA2(BITJOIN,3648)@764
    assign i_add_ptr66_7_cnn1044_mult_x_bjA2_q = {GND_q, i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_7_cnn1044_mult_x_im0_shift0(BITSHIFT,8188)@764
    assign i_add_ptr66_7_cnn1044_mult_x_im0_shift0_qint = { i_add_ptr66_7_cnn1044_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_7_cnn1044_mult_x_im0_shift0_q = i_add_ptr66_7_cnn1044_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_align_5(BITSHIFT,3671)@764
    assign i_add_ptr66_7_cnn1044_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_7_cnn1044_mult_x_im0_shift0_q[12]}}, i_add_ptr66_7_cnn1044_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_7_cnn1044_mult_x_sums_align_5_q = i_add_ptr66_7_cnn1044_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_7_cnn1044_mult_x_bjA7(BITJOIN,3653)@764
    assign i_add_ptr66_7_cnn1044_mult_x_bjA7_q = {GND_q, i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_7_cnn1044_mult_x_im5_shift0(BITSHIFT,8189)@764
    assign i_add_ptr66_7_cnn1044_mult_x_im5_shift0_qint = { i_add_ptr66_7_cnn1044_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_7_cnn1044_mult_x_im5_shift0_q = i_add_ptr66_7_cnn1044_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_align_3(BITSHIFT,3669)@764
    assign i_add_ptr66_7_cnn1044_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_7_cnn1044_mult_x_im5_shift0_q[20]}}, i_add_ptr66_7_cnn1044_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_7_cnn1044_mult_x_sums_align_3_q = i_add_ptr66_7_cnn1044_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1(ADD,3674)@764 + 1
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_7_cnn1044_mult_x_sums_align_3_q[58]}}, i_add_ptr66_7_cnn1044_mult_x_sums_align_3_q};
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_7_cnn1044_mult_x_sums_align_5_q[68]}}, i_add_ptr66_7_cnn1044_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_q = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12542)@765
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_7_cnn1044_mult_x_bjA12(BITJOIN,3658)@764
    assign i_add_ptr66_7_cnn1044_mult_x_bjA12_q = {GND_q, i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_7_cnn1044_mult_x_im10_shift0(BITSHIFT,8190)@764
    assign i_add_ptr66_7_cnn1044_mult_x_im10_shift0_qint = { i_add_ptr66_7_cnn1044_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_7_cnn1044_mult_x_im10_shift0_q = i_add_ptr66_7_cnn1044_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_align_1(BITSHIFT,3667)@764
    assign i_add_ptr66_7_cnn1044_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_7_cnn1044_mult_x_im10_shift0_q[20]}}, i_add_ptr66_7_cnn1044_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_7_cnn1044_mult_x_sums_align_1_q = i_add_ptr66_7_cnn1044_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_7_cnn1044_mult_x_bjA17(BITJOIN,3663)@764
    assign i_add_ptr66_7_cnn1044_mult_x_bjA17_q = {GND_q, i_add_ptr66_7_cnn1044_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_7_cnn1044_mult_x_im15_shift0(BITSHIFT,8191)@764
    assign i_add_ptr66_7_cnn1044_mult_x_im15_shift0_qint = { i_add_ptr66_7_cnn1044_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_7_cnn1044_mult_x_im15_shift0_q = i_add_ptr66_7_cnn1044_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0(ADD,3673)@764 + 1
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_7_cnn1044_mult_x_im15_shift0_q[20]}}, i_add_ptr66_7_cnn1044_mult_x_im15_shift0_q};
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_7_cnn1044_mult_x_sums_align_1_q[40]}}, i_add_ptr66_7_cnn1044_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_q = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12570)@765
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2(ADD,9733)@765 + 1
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12575)@765
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_0_1_q[69:69];

    // redist326_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18243)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist326_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist327_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18244)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist327_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2(ADD,9734)@766 + 1
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist327_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist327_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist326_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist326_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist725_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18642)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist725_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9735)@767
    assign i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p2_of_2_q, redist725_i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_7_cnn1044_mult_extender_x(BITJOIN,1397)@767
    assign i_add_ptr66_7_cnn1044_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_7_cnn1044_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_7_cnn1044_trunc_sel_x(BITSELECT,1399)@767
    assign i_add_ptr66_7_cnn1044_trunc_sel_x_b = i_add_ptr66_7_cnn1044_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040(BLACKBOX,670)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_1041 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_select_63(BITSELECT,673)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_join(BITJOIN,672)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_7_cnn1044_add_x(ADD,1391)@767
    assign i_add_ptr66_7_cnn1044_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer11_cnn1040_vt_join_q};
    assign i_add_ptr66_7_cnn1044_add_x_b = {1'b0, i_add_ptr66_7_cnn1044_trunc_sel_x_b};
    assign i_add_ptr66_7_cnn1044_add_x_o = $unsigned(i_add_ptr66_7_cnn1044_add_x_a) + $unsigned(i_add_ptr66_7_cnn1044_add_x_b);
    assign i_add_ptr66_7_cnn1044_add_x_q = i_add_ptr66_7_cnn1044_add_x_o[64:0];

    // i_add_ptr66_7_cnn1044_dupName_0_trunc_sel_x(BITSELECT,1400)@767
    assign i_add_ptr66_7_cnn1044_dupName_0_trunc_sel_x_b = i_add_ptr66_7_cnn1044_add_x_q[63:0];

    // i_add_ptr66_7_cnn1043_vt_select_63(BITSELECT,90)@767
    assign i_add_ptr66_7_cnn1043_vt_select_63_b = i_add_ptr66_7_cnn1044_dupName_0_trunc_sel_x_b[63:5];

    // redist866_i_add_ptr66_7_cnn1043_vt_select_63_b_1(DELAY,18783)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist866_i_add_ptr66_7_cnn1043_vt_select_63_b_1_q <= i_add_ptr66_7_cnn1043_vt_select_63_b;
        end
    end

    // i_add_ptr66_7_cnn1043_vt_const_4(CONSTANT,88)
    assign i_add_ptr66_7_cnn1043_vt_const_4_q = 5'b11100;

    // i_add_ptr66_7_cnn1043_vt_join(BITJOIN,89)@768
    assign i_add_ptr66_7_cnn1043_vt_join_q = {redist866_i_add_ptr66_7_cnn1043_vt_select_63_b_1_q, i_add_ptr66_7_cnn1043_vt_const_4_q};

    // i_add_ptr70_3_7_cnn1070_add_x(ADD,1961)@768
    assign i_add_ptr70_3_7_cnn1070_add_x_a = {1'b0, i_add_ptr66_7_cnn1043_vt_join_q};
    assign i_add_ptr70_3_7_cnn1070_add_x_b = {1'b0, i_add_ptr70_3_7_cnn1070_trunc_sel_x_b};
    assign i_add_ptr70_3_7_cnn1070_add_x_o = $unsigned(i_add_ptr70_3_7_cnn1070_add_x_a) + $unsigned(i_add_ptr70_3_7_cnn1070_add_x_b);
    assign i_add_ptr70_3_7_cnn1070_add_x_q = i_add_ptr70_3_7_cnn1070_add_x_o[64:0];

    // i_add_ptr70_3_7_cnn1070_dupName_0_trunc_sel_x(BITSELECT,1970)@768
    assign i_add_ptr70_3_7_cnn1070_dupName_0_trunc_sel_x_b = i_add_ptr70_3_7_cnn1070_add_x_q[63:0];

    // i_add_ptr70_3_7_cnn1069_vt_select_63(BITSELECT,261)@768
    assign i_add_ptr70_3_7_cnn1069_vt_select_63_b = i_add_ptr70_3_7_cnn1070_dupName_0_trunc_sel_x_b[63:2];

    // redist809_i_add_ptr70_3_7_cnn1069_vt_select_63_b_1(DELAY,18726)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist809_i_add_ptr70_3_7_cnn1069_vt_select_63_b_1_q <= i_add_ptr70_3_7_cnn1069_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_7_cnn1069_vt_join(BITJOIN,260)@769
    assign i_add_ptr70_3_7_cnn1069_vt_join_q = {redist809_i_add_ptr70_3_7_cnn1069_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_7_cnn1072_add_x(ADD,2601)@769
    assign i_add_ptr73_371_7_cnn1072_add_x_a = {1'b0, i_add_ptr70_3_7_cnn1069_vt_join_q};
    assign i_add_ptr73_371_7_cnn1072_add_x_b = {1'b0, i_add_ptr73_371_7_cnn1072_trunc_sel_x_b};
    assign i_add_ptr73_371_7_cnn1072_add_x_o = $unsigned(i_add_ptr73_371_7_cnn1072_add_x_a) + $unsigned(i_add_ptr73_371_7_cnn1072_add_x_b);
    assign i_add_ptr73_371_7_cnn1072_add_x_q = i_add_ptr73_371_7_cnn1072_add_x_o[64:0];

    // i_add_ptr73_371_7_cnn1072_dupName_0_trunc_sel_x(BITSELECT,2610)@769
    assign i_add_ptr73_371_7_cnn1072_dupName_0_trunc_sel_x_b = i_add_ptr73_371_7_cnn1072_add_x_q[63:0];

    // i_add_ptr73_371_7_cnn1071_vt_select_63(BITSELECT,453)@769
    assign i_add_ptr73_371_7_cnn1071_vt_select_63_b = i_add_ptr73_371_7_cnn1072_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_7_cnn1071_vt_join(BITJOIN,452)@769
    assign i_add_ptr73_371_7_cnn1071_vt_join_q = {i_add_ptr73_371_7_cnn1071_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_select_63(BITSELECT,830)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_select_63_b = i_add_ptr73_371_7_cnn1071_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_join(BITJOIN,829)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn139_cnn1066(BLACKBOX,603)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_139_cnn1067 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn139_cnn1066 (
        .in_intel_reserved_ffwd_58_0(in_intel_reserved_ffwd_58_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_58_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn139_cnn1066_out_dest_data_out_58_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0(BITSHIFT,8600)@766
    assign i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0_q = i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5(BITSHIFT,6761)@766
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_7_cnn1064_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5_q = i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0(BITSHIFT,8601)@766
    assign i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0_q = i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3(BITSHIFT,6759)@766
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_7_cnn1064_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3_q = i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1(ADD,6764)@766 + 1
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_7_cnn1064_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_7_cnn1064_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16250)@767
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0(BITSHIFT,8602)@766
    assign i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0_q = i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1(BITSHIFT,6757)@766
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_7_cnn1064_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1_q = i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0(BITSHIFT,8603)@766
    assign i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0_q = i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0(ADD,6763)@766 + 1
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_7_cnn1064_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_7_cnn1064_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16278)@767
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2(ADD,10866)@767 + 1
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16283)@767
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_0_1_q[69:69];

    // redist120_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18037)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist120_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist121_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18038)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist121_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2(ADD,10867)@768 + 1
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist121_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist121_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist120_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist120_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist622_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18539)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist622_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10868)@769
    assign i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p2_of_2_q, redist622_i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_7_cnn1064_mult_extender_x(BITJOIN,2427)@769
    assign i_add_ptr73_270_7_cnn1064_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_7_cnn1064_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_7_cnn1064_trunc_sel_x(BITSELECT,2429)@769
    assign i_add_ptr73_270_7_cnn1064_trunc_sel_x_b = i_add_ptr73_270_7_cnn1064_mult_extender_x_q[63:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0(BITSHIFT,8348)@765
    assign i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0_q = i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5(BITSHIFT,4871)@765
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_7_cnn1062_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5_q = i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0(BITSHIFT,8349)@765
    assign i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0_q = i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3(BITSHIFT,4869)@765
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_7_cnn1062_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3_q = i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1(ADD,4874)@765 + 1
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_7_cnn1062_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_7_cnn1062_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13982)@766
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0(BITSHIFT,8350)@765
    assign i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0_q = i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1(BITSHIFT,4867)@765
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_7_cnn1062_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1_q = i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0(BITSHIFT,8351)@765
    assign i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0_q = i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0(ADD,4873)@765 + 1
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_7_cnn1062_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_7_cnn1062_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14010)@766
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2(ADD,10173)@766 + 1
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14015)@766
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_0_1_q[69:69];

    // redist246_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18163)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist246_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist247_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18164)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist247_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2(ADD,10174)@767 + 1
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist247_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist247_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist246_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist246_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist685_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18602)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist685_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10175)@768
    assign i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p2_of_2_q, redist685_i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_7_cnn1062_mult_extender_x(BITJOIN,1797)@768
    assign i_add_ptr70_2_7_cnn1062_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_7_cnn1062_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_7_cnn1062_trunc_sel_x(BITSELECT,1799)@768
    assign i_add_ptr70_2_7_cnn1062_trunc_sel_x_b = i_add_ptr70_2_7_cnn1062_mult_extender_x_q[63:0];

    // i_add_ptr70_2_7_cnn1062_add_x(ADD,1791)@768
    assign i_add_ptr70_2_7_cnn1062_add_x_a = {1'b0, i_add_ptr66_7_cnn1043_vt_join_q};
    assign i_add_ptr70_2_7_cnn1062_add_x_b = {1'b0, i_add_ptr70_2_7_cnn1062_trunc_sel_x_b};
    assign i_add_ptr70_2_7_cnn1062_add_x_o = $unsigned(i_add_ptr70_2_7_cnn1062_add_x_a) + $unsigned(i_add_ptr70_2_7_cnn1062_add_x_b);
    assign i_add_ptr70_2_7_cnn1062_add_x_q = i_add_ptr70_2_7_cnn1062_add_x_o[64:0];

    // i_add_ptr70_2_7_cnn1062_dupName_0_trunc_sel_x(BITSELECT,1800)@768
    assign i_add_ptr70_2_7_cnn1062_dupName_0_trunc_sel_x_b = i_add_ptr70_2_7_cnn1062_add_x_q[63:0];

    // i_add_ptr70_2_7_cnn1061_vt_select_63(BITSELECT,210)@768
    assign i_add_ptr70_2_7_cnn1061_vt_select_63_b = i_add_ptr70_2_7_cnn1062_dupName_0_trunc_sel_x_b[63:2];

    // redist826_i_add_ptr70_2_7_cnn1061_vt_select_63_b_1(DELAY,18743)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist826_i_add_ptr70_2_7_cnn1061_vt_select_63_b_1_q <= i_add_ptr70_2_7_cnn1061_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_7_cnn1061_vt_join(BITJOIN,209)@769
    assign i_add_ptr70_2_7_cnn1061_vt_join_q = {redist826_i_add_ptr70_2_7_cnn1061_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_7_cnn1064_add_x(ADD,2421)@769
    assign i_add_ptr73_270_7_cnn1064_add_x_a = {1'b0, i_add_ptr70_2_7_cnn1061_vt_join_q};
    assign i_add_ptr73_270_7_cnn1064_add_x_b = {1'b0, i_add_ptr73_270_7_cnn1064_trunc_sel_x_b};
    assign i_add_ptr73_270_7_cnn1064_add_x_o = $unsigned(i_add_ptr73_270_7_cnn1064_add_x_a) + $unsigned(i_add_ptr73_270_7_cnn1064_add_x_b);
    assign i_add_ptr73_270_7_cnn1064_add_x_q = i_add_ptr73_270_7_cnn1064_add_x_o[64:0];

    // i_add_ptr73_270_7_cnn1064_dupName_0_trunc_sel_x(BITSELECT,2430)@769
    assign i_add_ptr73_270_7_cnn1064_dupName_0_trunc_sel_x_b = i_add_ptr73_270_7_cnn1064_add_x_q[63:0];

    // i_add_ptr73_270_7_cnn1063_vt_select_63(BITSELECT,399)@769
    assign i_add_ptr73_270_7_cnn1063_vt_select_63_b = i_add_ptr73_270_7_cnn1064_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_7_cnn1063_vt_join(BITJOIN,398)@769
    assign i_add_ptr73_270_7_cnn1063_vt_join_q = {i_add_ptr73_270_7_cnn1063_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_select_63(BITSELECT,826)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_select_63_b = i_add_ptr73_270_7_cnn1063_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_join(BITJOIN,825)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn138_cnn1058(BLACKBOX,602)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_138_cnn1059 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn138_cnn1058 (
        .in_intel_reserved_ffwd_57_0(in_intel_reserved_ffwd_57_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_57_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn138_cnn1058_out_dest_data_out_57_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0(BITSHIFT,8532)@766
    assign i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0_q = i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5(BITSHIFT,6251)@766
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_7_cnn1056_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5_q = i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0(BITSHIFT,8533)@766
    assign i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0_q = i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3(BITSHIFT,6249)@766
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_7_cnn1056_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3_q = i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1(ADD,6254)@766 + 1
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_7_cnn1056_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_7_cnn1056_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15638)@767
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0(BITSHIFT,8534)@766
    assign i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0_q = i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1(BITSHIFT,6247)@766
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_7_cnn1056_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1_q = i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0(BITSHIFT,8535)@766
    assign i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0_q = i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0(ADD,6253)@766 + 1
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_7_cnn1056_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_7_cnn1056_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15666)@767
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2(ADD,10679)@767 + 1
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15671)@767
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_0_1_q[69:69];

    // redist154_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18071)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist154_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist155_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18072)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist155_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2(ADD,10680)@768 + 1
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist155_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist155_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist154_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist154_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist639_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18556)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist639_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10681)@769
    assign i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p2_of_2_q, redist639_i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_7_cnn1056_mult_extender_x(BITJOIN,2257)@769
    assign i_add_ptr73_169_7_cnn1056_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_7_cnn1056_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_7_cnn1056_trunc_sel_x(BITSELECT,2259)@769
    assign i_add_ptr73_169_7_cnn1056_trunc_sel_x_b = i_add_ptr73_169_7_cnn1056_mult_extender_x_q[63:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0(BITSHIFT,8280)@765
    assign i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0_q = i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5(BITSHIFT,4361)@765
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_7_cnn1054_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5_q = i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0(BITSHIFT,8281)@765
    assign i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0_q = i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3(BITSHIFT,4359)@765
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_7_cnn1054_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3_q = i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1(ADD,4364)@765 + 1
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_7_cnn1054_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_7_cnn1054_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13370)@766
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0(BITSHIFT,8282)@765
    assign i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0_q = i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1(BITSHIFT,4357)@765
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_7_cnn1054_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1_q = i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0(BITSHIFT,8283)@765
    assign i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0_q = i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0(ADD,4363)@765 + 1
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_7_cnn1054_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_7_cnn1054_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13398)@766
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2(ADD,9986)@766 + 1
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13403)@766
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_0_1_q[69:69];

    // redist280_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18197)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist280_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist281_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18198)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist281_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2(ADD,9987)@767 + 1
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist281_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist281_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist280_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist280_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist702_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18619)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist702_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9988)@768
    assign i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p2_of_2_q, redist702_i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_7_cnn1054_mult_extender_x(BITJOIN,1627)@768
    assign i_add_ptr70_1_7_cnn1054_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_7_cnn1054_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_7_cnn1054_trunc_sel_x(BITSELECT,1629)@768
    assign i_add_ptr70_1_7_cnn1054_trunc_sel_x_b = i_add_ptr70_1_7_cnn1054_mult_extender_x_q[63:0];

    // i_add_ptr70_1_7_cnn1054_add_x(ADD,1621)@768
    assign i_add_ptr70_1_7_cnn1054_add_x_a = {1'b0, i_add_ptr66_7_cnn1043_vt_join_q};
    assign i_add_ptr70_1_7_cnn1054_add_x_b = {1'b0, i_add_ptr70_1_7_cnn1054_trunc_sel_x_b};
    assign i_add_ptr70_1_7_cnn1054_add_x_o = $unsigned(i_add_ptr70_1_7_cnn1054_add_x_a) + $unsigned(i_add_ptr70_1_7_cnn1054_add_x_b);
    assign i_add_ptr70_1_7_cnn1054_add_x_q = i_add_ptr70_1_7_cnn1054_add_x_o[64:0];

    // i_add_ptr70_1_7_cnn1054_dupName_0_trunc_sel_x(BITSELECT,1630)@768
    assign i_add_ptr70_1_7_cnn1054_dupName_0_trunc_sel_x_b = i_add_ptr70_1_7_cnn1054_add_x_q[63:0];

    // i_add_ptr70_1_7_cnn1053_vt_select_63(BITSELECT,159)@768
    assign i_add_ptr70_1_7_cnn1053_vt_select_63_b = i_add_ptr70_1_7_cnn1054_dupName_0_trunc_sel_x_b[63:2];

    // redist843_i_add_ptr70_1_7_cnn1053_vt_select_63_b_1(DELAY,18760)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist843_i_add_ptr70_1_7_cnn1053_vt_select_63_b_1_q <= i_add_ptr70_1_7_cnn1053_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_7_cnn1053_vt_join(BITJOIN,158)@769
    assign i_add_ptr70_1_7_cnn1053_vt_join_q = {redist843_i_add_ptr70_1_7_cnn1053_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_7_cnn1056_add_x(ADD,2251)@769
    assign i_add_ptr73_169_7_cnn1056_add_x_a = {1'b0, i_add_ptr70_1_7_cnn1053_vt_join_q};
    assign i_add_ptr73_169_7_cnn1056_add_x_b = {1'b0, i_add_ptr73_169_7_cnn1056_trunc_sel_x_b};
    assign i_add_ptr73_169_7_cnn1056_add_x_o = $unsigned(i_add_ptr73_169_7_cnn1056_add_x_a) + $unsigned(i_add_ptr73_169_7_cnn1056_add_x_b);
    assign i_add_ptr73_169_7_cnn1056_add_x_q = i_add_ptr73_169_7_cnn1056_add_x_o[64:0];

    // i_add_ptr73_169_7_cnn1056_dupName_0_trunc_sel_x(BITSELECT,2260)@769
    assign i_add_ptr73_169_7_cnn1056_dupName_0_trunc_sel_x_b = i_add_ptr73_169_7_cnn1056_add_x_q[63:0];

    // i_add_ptr73_169_7_cnn1055_vt_select_63(BITSELECT,348)@769
    assign i_add_ptr73_169_7_cnn1055_vt_select_63_b = i_add_ptr73_169_7_cnn1056_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_7_cnn1055_vt_join(BITJOIN,347)@769
    assign i_add_ptr73_169_7_cnn1055_vt_join_q = {i_add_ptr73_169_7_cnn1055_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_select_63(BITSELECT,822)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_select_63_b = i_add_ptr73_169_7_cnn1055_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_join(BITJOIN,821)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn137_cnn1050(BLACKBOX,601)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_137_cnn1051 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn137_cnn1050 (
        .in_intel_reserved_ffwd_56_0(in_intel_reserved_ffwd_56_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_56_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn137_cnn1050_out_dest_data_out_56_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_7_cnn1048_mult_x_im0_shift0(BITSHIFT,8700)@766
    assign i_add_ptr73_7_cnn1048_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_7_cnn1048_mult_x_im0_shift0_q = i_add_ptr73_7_cnn1048_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_align_5(BITSHIFT,7511)@766
    assign i_add_ptr73_7_cnn1048_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_7_cnn1048_mult_x_im0_shift0_q[12]}}, i_add_ptr73_7_cnn1048_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_7_cnn1048_mult_x_sums_align_5_q = i_add_ptr73_7_cnn1048_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_7_cnn1048_mult_x_im5_shift0(BITSHIFT,8701)@766
    assign i_add_ptr73_7_cnn1048_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_7_cnn1048_mult_x_im5_shift0_q = i_add_ptr73_7_cnn1048_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_align_3(BITSHIFT,7509)@766
    assign i_add_ptr73_7_cnn1048_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_7_cnn1048_mult_x_im5_shift0_q[20]}}, i_add_ptr73_7_cnn1048_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_7_cnn1048_mult_x_sums_align_3_q = i_add_ptr73_7_cnn1048_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1(ADD,7514)@766 + 1
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_7_cnn1048_mult_x_sums_align_3_q[58]}}, i_add_ptr73_7_cnn1048_mult_x_sums_align_3_q};
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_7_cnn1048_mult_x_sums_align_5_q[68]}}, i_add_ptr73_7_cnn1048_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_q = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17150)@767
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_7_cnn1048_mult_x_im10_shift0(BITSHIFT,8702)@766
    assign i_add_ptr73_7_cnn1048_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_7_cnn1048_mult_x_im10_shift0_q = i_add_ptr73_7_cnn1048_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_align_1(BITSHIFT,7507)@766
    assign i_add_ptr73_7_cnn1048_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_7_cnn1048_mult_x_im10_shift0_q[20]}}, i_add_ptr73_7_cnn1048_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_7_cnn1048_mult_x_sums_align_1_q = i_add_ptr73_7_cnn1048_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_7_cnn1048_mult_x_im15_shift0(BITSHIFT,8703)@766
    assign i_add_ptr73_7_cnn1048_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_7_cnn1048_mult_x_im15_shift0_q = i_add_ptr73_7_cnn1048_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0(ADD,7513)@766 + 1
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_7_cnn1048_mult_x_im15_shift0_q[20]}}, i_add_ptr73_7_cnn1048_mult_x_im15_shift0_q};
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_7_cnn1048_mult_x_sums_align_1_q[40]}}, i_add_ptr73_7_cnn1048_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_q = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17178)@767
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2(ADD,11141)@767 + 1
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17183)@767
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_0_1_q[69:69];

    // redist70_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17987)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist70_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist71_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17988)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist71_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2(ADD,11142)@768 + 1
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist71_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist71_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist70_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist70_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist597_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18514)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist597_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11143)@769
    assign i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p2_of_2_q, redist597_i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_7_cnn1048_mult_extender_x(BITJOIN,2677)@769
    assign i_add_ptr73_7_cnn1048_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_7_cnn1048_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_7_cnn1048_trunc_sel_x(BITSELECT,2679)@769
    assign i_add_ptr73_7_cnn1048_trunc_sel_x_b = i_add_ptr73_7_cnn1048_mult_extender_x_q[63:0];

    // i_add_ptr70_7_cnn1046_mult_x_im0_shift0(BITSHIFT,8444)@765
    assign i_add_ptr70_7_cnn1046_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_7_cnn1046_mult_x_im0_shift0_q = i_add_ptr70_7_cnn1046_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_align_5(BITSHIFT,5591)@765
    assign i_add_ptr70_7_cnn1046_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_7_cnn1046_mult_x_im0_shift0_q[12]}}, i_add_ptr70_7_cnn1046_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_7_cnn1046_mult_x_sums_align_5_q = i_add_ptr70_7_cnn1046_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_7_cnn1046_mult_x_im5_shift0(BITSHIFT,8445)@765
    assign i_add_ptr70_7_cnn1046_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_7_cnn1046_mult_x_im5_shift0_q = i_add_ptr70_7_cnn1046_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_align_3(BITSHIFT,5589)@765
    assign i_add_ptr70_7_cnn1046_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_7_cnn1046_mult_x_im5_shift0_q[20]}}, i_add_ptr70_7_cnn1046_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_7_cnn1046_mult_x_sums_align_3_q = i_add_ptr70_7_cnn1046_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1(ADD,5594)@765 + 1
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_7_cnn1046_mult_x_sums_align_3_q[58]}}, i_add_ptr70_7_cnn1046_mult_x_sums_align_3_q};
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_7_cnn1046_mult_x_sums_align_5_q[68]}}, i_add_ptr70_7_cnn1046_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_q = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14846)@766
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_7_cnn1046_mult_x_im10_shift0(BITSHIFT,8446)@765
    assign i_add_ptr70_7_cnn1046_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_7_cnn1046_mult_x_im10_shift0_q = i_add_ptr70_7_cnn1046_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_align_1(BITSHIFT,5587)@765
    assign i_add_ptr70_7_cnn1046_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_7_cnn1046_mult_x_im10_shift0_q[20]}}, i_add_ptr70_7_cnn1046_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_7_cnn1046_mult_x_sums_align_1_q = i_add_ptr70_7_cnn1046_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_7_cnn1046_mult_x_im15_shift0(BITSHIFT,8447)@765
    assign i_add_ptr70_7_cnn1046_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_7_cnn1046_mult_x_im15_shift0_q = i_add_ptr70_7_cnn1046_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0(ADD,5593)@765 + 1
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_7_cnn1046_mult_x_im15_shift0_q[20]}}, i_add_ptr70_7_cnn1046_mult_x_im15_shift0_q};
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_7_cnn1046_mult_x_sums_align_1_q[40]}}, i_add_ptr70_7_cnn1046_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_q = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14874)@766
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2(ADD,10437)@766 + 1
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14879)@766
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_0_1_q[69:69];

    // redist198_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18115)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist198_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist199_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18116)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist199_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2(ADD,10438)@767 + 1
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist199_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist199_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist198_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist198_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist661_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18578)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist661_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10439)@768
    assign i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p2_of_2_q, redist661_i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_7_cnn1046_mult_extender_x(BITJOIN,2037)@768
    assign i_add_ptr70_7_cnn1046_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_7_cnn1046_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_7_cnn1046_trunc_sel_x(BITSELECT,2039)@768
    assign i_add_ptr70_7_cnn1046_trunc_sel_x_b = i_add_ptr70_7_cnn1046_mult_extender_x_q[63:0];

    // i_add_ptr70_7_cnn1046_add_x(ADD,2031)@768
    assign i_add_ptr70_7_cnn1046_add_x_a = {1'b0, i_add_ptr66_7_cnn1043_vt_join_q};
    assign i_add_ptr70_7_cnn1046_add_x_b = {1'b0, i_add_ptr70_7_cnn1046_trunc_sel_x_b};
    assign i_add_ptr70_7_cnn1046_add_x_o = $unsigned(i_add_ptr70_7_cnn1046_add_x_a) + $unsigned(i_add_ptr70_7_cnn1046_add_x_b);
    assign i_add_ptr70_7_cnn1046_add_x_q = i_add_ptr70_7_cnn1046_add_x_o[64:0];

    // i_add_ptr70_7_cnn1046_dupName_0_trunc_sel_x(BITSELECT,2040)@768
    assign i_add_ptr70_7_cnn1046_dupName_0_trunc_sel_x_b = i_add_ptr70_7_cnn1046_add_x_q[63:0];

    // i_add_ptr70_7_cnn1045_vt_select_63(BITSELECT,282)@768
    assign i_add_ptr70_7_cnn1045_vt_select_63_b = i_add_ptr70_7_cnn1046_dupName_0_trunc_sel_x_b[63:2];

    // redist802_i_add_ptr70_7_cnn1045_vt_select_63_b_1(DELAY,18719)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist802_i_add_ptr70_7_cnn1045_vt_select_63_b_1_q <= i_add_ptr70_7_cnn1045_vt_select_63_b;
        end
    end

    // i_add_ptr70_7_cnn1045_vt_join(BITJOIN,281)@769
    assign i_add_ptr70_7_cnn1045_vt_join_q = {redist802_i_add_ptr70_7_cnn1045_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_7_cnn1048_add_x(ADD,2671)@769
    assign i_add_ptr73_7_cnn1048_add_x_a = {1'b0, i_add_ptr70_7_cnn1045_vt_join_q};
    assign i_add_ptr73_7_cnn1048_add_x_b = {1'b0, i_add_ptr73_7_cnn1048_trunc_sel_x_b};
    assign i_add_ptr73_7_cnn1048_add_x_o = $unsigned(i_add_ptr73_7_cnn1048_add_x_a) + $unsigned(i_add_ptr73_7_cnn1048_add_x_b);
    assign i_add_ptr73_7_cnn1048_add_x_q = i_add_ptr73_7_cnn1048_add_x_o[64:0];

    // i_add_ptr73_7_cnn1048_dupName_0_trunc_sel_x(BITSELECT,2680)@769
    assign i_add_ptr73_7_cnn1048_dupName_0_trunc_sel_x_b = i_add_ptr73_7_cnn1048_add_x_q[63:0];

    // i_add_ptr73_7_cnn1047_vt_select_63(BITSELECT,474)@769
    assign i_add_ptr73_7_cnn1047_vt_select_63_b = i_add_ptr73_7_cnn1048_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_7_cnn1047_vt_join(BITJOIN,473)@769
    assign i_add_ptr73_7_cnn1047_vt_join_q = {i_add_ptr73_7_cnn1047_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_select_63(BITSELECT,814)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_select_63_b = i_add_ptr73_7_cnn1047_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_join(BITJOIN,813)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn136_cnn1035(BLACKBOX,600)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_136_cnn1036 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn136_cnn1035 (
        .in_intel_reserved_ffwd_55_0(in_intel_reserved_ffwd_55_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_55_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn136_cnn1035_out_dest_data_out_55_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0(BITSHIFT,8668)@766
    assign i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0_q = i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5(BITSHIFT,7271)@766
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_6_cnn1033_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5_q = i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0(BITSHIFT,8669)@766
    assign i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0_q = i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3(BITSHIFT,7269)@766
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_6_cnn1033_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3_q = i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1(ADD,7274)@766 + 1
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_6_cnn1033_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_6_cnn1033_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16862)@767
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0(BITSHIFT,8670)@766
    assign i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0_q = i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1(BITSHIFT,7267)@766
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_6_cnn1033_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1_q = i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0(BITSHIFT,8671)@766
    assign i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0_q = i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0(ADD,7273)@766 + 1
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_6_cnn1033_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_6_cnn1033_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16890)@767
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2(ADD,11053)@767 + 1
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16895)@767
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_0_1_q[69:69];

    // redist86_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18003)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist86_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist87_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18004)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist87_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2(ADD,11054)@768 + 1
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist87_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist87_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist86_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist86_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist605_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18522)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist605_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11055)@769
    assign i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p2_of_2_q, redist605_i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_6_cnn1033_mult_extender_x(BITJOIN,2597)@769
    assign i_add_ptr73_371_6_cnn1033_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_6_cnn1033_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_6_cnn1033_trunc_sel_x(BITSELECT,2599)@769
    assign i_add_ptr73_371_6_cnn1033_trunc_sel_x_b = i_add_ptr73_371_6_cnn1033_mult_extender_x_q[63:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0(BITSHIFT,8412)@765
    assign i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0_q = i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5(BITSHIFT,5351)@765
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_6_cnn1031_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5_q = i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0(BITSHIFT,8413)@765
    assign i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0_q = i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3(BITSHIFT,5349)@765
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_6_cnn1031_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3_q = i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1(ADD,5354)@765 + 1
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_6_cnn1031_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_6_cnn1031_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14558)@766
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0(BITSHIFT,8414)@765
    assign i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0_q = i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1(BITSHIFT,5347)@765
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_6_cnn1031_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1_q = i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0(BITSHIFT,8415)@765
    assign i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0_q = i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0(ADD,5353)@765 + 1
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_6_cnn1031_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_6_cnn1031_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14586)@766
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2(ADD,10349)@766 + 1
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14591)@766
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_0_1_q[69:69];

    // redist214_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18131)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist214_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist215_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18132)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist215_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2(ADD,10350)@767 + 1
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist215_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist215_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist214_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist214_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist669_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18586)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist669_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10351)@768
    assign i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p2_of_2_q, redist669_i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_6_cnn1031_mult_extender_x(BITJOIN,1957)@768
    assign i_add_ptr70_3_6_cnn1031_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_6_cnn1031_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_6_cnn1031_trunc_sel_x(BITSELECT,1959)@768
    assign i_add_ptr70_3_6_cnn1031_trunc_sel_x_b = i_add_ptr70_3_6_cnn1031_mult_extender_x_q[63:0];

    // c_i64_6gr(CONSTANT,47)
    assign c_i64_6gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000110;

    // i_inc79_5_cnn999(LOGICAL,533)@754
    assign i_inc79_5_cnn999_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_6gr_q;

    // i_inc79_5_cnn999_vt_select_0_merged_bit_select(BITSELECT,17885)@754
    assign i_inc79_5_cnn999_vt_select_0_merged_bit_select_b = i_inc79_5_cnn999_q[0:0];
    assign i_inc79_5_cnn999_vt_select_0_merged_bit_select_c = i_inc79_5_cnn999_q[63:3];

    // i_inc79_5_cnn999_vt_join(BITJOIN,535)@754
    assign i_inc79_5_cnn999_vt_join_q = {i_inc79_5_cnn999_vt_select_0_merged_bit_select_c, i_inc79_10_cnn1194_vt_const_1_q, i_inc79_5_cnn999_vt_select_0_merged_bit_select_b};

    // i_mul65_6_cnn1000_bs1_merged_bit_select(BITSELECT,17886)@754
    assign i_mul65_6_cnn1000_bs1_merged_bit_select_b = i_inc79_5_cnn999_vt_join_q[63:54];
    assign i_mul65_6_cnn1000_bs1_merged_bit_select_c = i_inc79_5_cnn999_vt_join_q[53:36];
    assign i_mul65_6_cnn1000_bs1_merged_bit_select_d = i_inc79_5_cnn999_vt_join_q[35:18];
    assign i_mul65_6_cnn1000_bs1_merged_bit_select_e = i_inc79_5_cnn999_vt_join_q[17:0];

    // i_mul65_6_cnn1000_bjA2(BITJOIN,3108)@754
    assign i_mul65_6_cnn1000_bjA2_q = {GND_q, i_mul65_6_cnn1000_bs1_merged_bit_select_b};

    // i_mul65_6_cnn1000_im0_cma(CHAINMULTADD,17849)@754 + 5
    // out q@760
    assign i_mul65_6_cnn1000_im0_cma_reset = ~ (resetn);
    assign i_mul65_6_cnn1000_im0_cma_ena0 = 1'b1;
    assign i_mul65_6_cnn1000_im0_cma_ena1 = i_mul65_6_cnn1000_im0_cma_ena0;
    assign i_mul65_6_cnn1000_im0_cma_ena2 = i_mul65_6_cnn1000_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_im0_cma_ah[0] <= i_mul65_6_cnn1000_bjA2_q;
        end
    end

    assign i_mul65_6_cnn1000_im0_cma_a0 = i_mul65_6_cnn1000_im0_cma_ah[0];
    assign i_mul65_6_cnn1000_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_6_cnn1000_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_6_cnn1000_im0_cma_ena2, i_mul65_6_cnn1000_im0_cma_ena1, i_mul65_6_cnn1000_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_6_cnn1000_im0_cma_a0),
        .coefsela(i_mul65_6_cnn1000_im0_cma_c0),
        .resulta(i_mul65_6_cnn1000_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_6_cnn1000_im0_cma_delay ( .xin(i_mul65_6_cnn1000_im0_cma_s0), .xout(i_mul65_6_cnn1000_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_6_cnn1000_im0_cma_q = i_mul65_6_cnn1000_im0_cma_qq[21:0];

    // redist19_i_mul65_6_cnn1000_im0_cma_q_1(DELAY,17936)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist19_i_mul65_6_cnn1000_im0_cma_q_1_q <= i_mul65_6_cnn1000_im0_cma_q;
        end
    end

    // i_mul65_6_cnn1000_sums_align_5(BITSHIFT,3131)@761
    assign i_mul65_6_cnn1000_sums_align_5_qint = { redist19_i_mul65_6_cnn1000_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_6_cnn1000_sums_align_5_q = i_mul65_6_cnn1000_sums_align_5_qint[74:0];

    // i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11807)@761
    assign i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_6_cnn1000_sums_align_5_q[69:0];

    // i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11794)@761
    assign i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_6_cnn1000_sums_align_3_q[64:64];

    // i_mul65_6_cnn1000_bjA7(BITJOIN,3113)@754
    assign i_mul65_6_cnn1000_bjA7_q = {GND_q, i_mul65_6_cnn1000_bs1_merged_bit_select_c};

    // i_mul65_6_cnn1000_im5_cma(CHAINMULTADD,17850)@754 + 5
    // out q@760
    assign i_mul65_6_cnn1000_im5_cma_reset = ~ (resetn);
    assign i_mul65_6_cnn1000_im5_cma_ena0 = 1'b1;
    assign i_mul65_6_cnn1000_im5_cma_ena1 = i_mul65_6_cnn1000_im5_cma_ena0;
    assign i_mul65_6_cnn1000_im5_cma_ena2 = i_mul65_6_cnn1000_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_im5_cma_ah[0] <= i_mul65_6_cnn1000_bjA7_q;
        end
    end

    assign i_mul65_6_cnn1000_im5_cma_a0 = i_mul65_6_cnn1000_im5_cma_ah[0];
    assign i_mul65_6_cnn1000_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_6_cnn1000_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_6_cnn1000_im5_cma_ena2, i_mul65_6_cnn1000_im5_cma_ena1, i_mul65_6_cnn1000_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_6_cnn1000_im5_cma_a0),
        .coefsela(i_mul65_6_cnn1000_im5_cma_c0),
        .resulta(i_mul65_6_cnn1000_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_6_cnn1000_im5_cma_delay ( .xin(i_mul65_6_cnn1000_im5_cma_s0), .xout(i_mul65_6_cnn1000_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_6_cnn1000_im5_cma_q = i_mul65_6_cnn1000_im5_cma_qq[29:0];

    // redist18_i_mul65_6_cnn1000_im5_cma_q_1(DELAY,17935)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist18_i_mul65_6_cnn1000_im5_cma_q_1_q <= i_mul65_6_cnn1000_im5_cma_q;
        end
    end

    // i_mul65_6_cnn1000_sums_align_3(BITSHIFT,3129)@761
    assign i_mul65_6_cnn1000_sums_align_3_qint = { redist18_i_mul65_6_cnn1000_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_6_cnn1000_sums_align_3_q = i_mul65_6_cnn1000_sums_align_3_qint[64:0];

    // i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11799)@761
    assign i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_align_3_q};

    // i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2(ADD,9480)@761 + 1
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_q = i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11813)@762
    assign i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_6_cnn1000_sums_result_add_0_0_q[47:47];

    // i_mul65_6_cnn1000_bjA12(BITJOIN,3118)@754
    assign i_mul65_6_cnn1000_bjA12_q = {GND_q, i_mul65_6_cnn1000_bs1_merged_bit_select_d};

    // i_mul65_6_cnn1000_im10_cma(CHAINMULTADD,17851)@754 + 5
    // out q@760
    assign i_mul65_6_cnn1000_im10_cma_reset = ~ (resetn);
    assign i_mul65_6_cnn1000_im10_cma_ena0 = 1'b1;
    assign i_mul65_6_cnn1000_im10_cma_ena1 = i_mul65_6_cnn1000_im10_cma_ena0;
    assign i_mul65_6_cnn1000_im10_cma_ena2 = i_mul65_6_cnn1000_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_im10_cma_ah[0] <= i_mul65_6_cnn1000_bjA12_q;
        end
    end

    assign i_mul65_6_cnn1000_im10_cma_a0 = i_mul65_6_cnn1000_im10_cma_ah[0];
    assign i_mul65_6_cnn1000_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_6_cnn1000_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_6_cnn1000_im10_cma_ena2, i_mul65_6_cnn1000_im10_cma_ena1, i_mul65_6_cnn1000_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_6_cnn1000_im10_cma_a0),
        .coefsela(i_mul65_6_cnn1000_im10_cma_c0),
        .resulta(i_mul65_6_cnn1000_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_6_cnn1000_im10_cma_delay ( .xin(i_mul65_6_cnn1000_im10_cma_s0), .xout(i_mul65_6_cnn1000_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_6_cnn1000_im10_cma_q = i_mul65_6_cnn1000_im10_cma_qq[29:0];

    // redist17_i_mul65_6_cnn1000_im10_cma_q_1(DELAY,17934)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist17_i_mul65_6_cnn1000_im10_cma_q_1_q <= i_mul65_6_cnn1000_im10_cma_q;
        end
    end

    // i_mul65_6_cnn1000_sums_align_1(BITSHIFT,3127)@761
    assign i_mul65_6_cnn1000_sums_align_1_qint = { redist17_i_mul65_6_cnn1000_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_6_cnn1000_sums_align_1_q = i_mul65_6_cnn1000_sums_align_1_qint[46:0];

    // i_mul65_6_cnn1000_bjA17(BITJOIN,3123)@754
    assign i_mul65_6_cnn1000_bjA17_q = {GND_q, i_mul65_6_cnn1000_bs1_merged_bit_select_e};

    // i_mul65_6_cnn1000_im15_cma(CHAINMULTADD,17852)@754 + 5
    // out q@760
    assign i_mul65_6_cnn1000_im15_cma_reset = ~ (resetn);
    assign i_mul65_6_cnn1000_im15_cma_ena0 = 1'b1;
    assign i_mul65_6_cnn1000_im15_cma_ena1 = i_mul65_6_cnn1000_im15_cma_ena0;
    assign i_mul65_6_cnn1000_im15_cma_ena2 = i_mul65_6_cnn1000_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_im15_cma_ah[0] <= i_mul65_6_cnn1000_bjA17_q;
        end
    end

    assign i_mul65_6_cnn1000_im15_cma_a0 = i_mul65_6_cnn1000_im15_cma_ah[0];
    assign i_mul65_6_cnn1000_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_6_cnn1000_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_6_cnn1000_im15_cma_ena2, i_mul65_6_cnn1000_im15_cma_ena1, i_mul65_6_cnn1000_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_6_cnn1000_im15_cma_a0),
        .coefsela(i_mul65_6_cnn1000_im15_cma_c0),
        .resulta(i_mul65_6_cnn1000_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_6_cnn1000_im15_cma_delay ( .xin(i_mul65_6_cnn1000_im15_cma_s0), .xout(i_mul65_6_cnn1000_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_6_cnn1000_im15_cma_q = i_mul65_6_cnn1000_im15_cma_qq[29:0];

    // redist16_i_mul65_6_cnn1000_im15_cma_q_1(DELAY,17933)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist16_i_mul65_6_cnn1000_im15_cma_q_1_q <= i_mul65_6_cnn1000_im15_cma_q;
        end
    end

    // i_mul65_6_cnn1000_sums_result_add_0_0(ADD,3133)@761 + 1
    assign i_mul65_6_cnn1000_sums_result_add_0_0_a = {{18{redist16_i_mul65_6_cnn1000_im15_cma_q_1_q[29]}}, redist16_i_mul65_6_cnn1000_im15_cma_q_1_q};
    assign i_mul65_6_cnn1000_sums_result_add_0_0_b = {{1{i_mul65_6_cnn1000_sums_align_1_q[46]}}, i_mul65_6_cnn1000_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_sums_result_add_0_0_o <= $signed(i_mul65_6_cnn1000_sums_result_add_0_0_a) + $signed(i_mul65_6_cnn1000_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_6_cnn1000_sums_result_add_0_0_q = i_mul65_6_cnn1000_sums_result_add_0_0_o[47:0];

    // i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11835)@762
    assign i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_6_cnn1000_sums_result_add_0_0_q};

    // i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2(ADD,9491)@762 + 1
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_q = i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11847)@763
    assign i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11810)@761
    assign i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_6_cnn1000_sums_align_5_q[74:74];

    // redist421_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18338)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist421_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11809)@761
    assign i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_6_cnn1000_sums_align_5_q[74:70];

    // redist422_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18339)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist422_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11811)@762
    assign i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist421_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist422_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18340)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11806)@762
    assign i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist423_i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2(ADD,9481)@762 + 1
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_cin = i_mul65_6_cnn1000_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_6_cnn1000_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_q = i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11848)@763
    assign i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_6_cnn1000_sums_result_add_0_1_p2_of_2_q};

    // redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18331)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11843)@763
    assign i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist414_i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2(ADD,9492)@763 + 1
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_cin = i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_6_cnn1000_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_q = i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist743_i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_q_1(DELAY,18660)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist743_i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_6_cnn1000_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9493)@764
    assign i_mul65_6_cnn1000_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_6_cnn1000_sums_result_add_1_0_p2_of_2_q, redist743_i_mul65_6_cnn1000_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_6_cnn1000_extender_x(BITJOIN,2737)@764
    assign i_mul65_6_cnn1000_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_6_cnn1000_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_6_cnn1000_sel_x(BITSELECT,1058)@764
    assign bgTrunc_i_mul65_6_cnn1000_sel_x_b = i_mul65_6_cnn1000_extender_x_q[63:0];

    // i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select(BITSELECT,17914)@764
    assign i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_6_cnn1000_sel_x_b[63:54];
    assign i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_6_cnn1000_sel_x_b[53:36];
    assign i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_6_cnn1000_sel_x_b[35:18];
    assign i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_6_cnn1000_sel_x_b[17:0];

    // i_add_ptr66_6_cnn1005_mult_x_bjA2(BITJOIN,3618)@764
    assign i_add_ptr66_6_cnn1005_mult_x_bjA2_q = {GND_q, i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_6_cnn1005_mult_x_im0_shift0(BITSHIFT,8184)@764
    assign i_add_ptr66_6_cnn1005_mult_x_im0_shift0_qint = { i_add_ptr66_6_cnn1005_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_6_cnn1005_mult_x_im0_shift0_q = i_add_ptr66_6_cnn1005_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_align_5(BITSHIFT,3641)@764
    assign i_add_ptr66_6_cnn1005_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_6_cnn1005_mult_x_im0_shift0_q[12]}}, i_add_ptr66_6_cnn1005_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_6_cnn1005_mult_x_sums_align_5_q = i_add_ptr66_6_cnn1005_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_6_cnn1005_mult_x_bjA7(BITJOIN,3623)@764
    assign i_add_ptr66_6_cnn1005_mult_x_bjA7_q = {GND_q, i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_6_cnn1005_mult_x_im5_shift0(BITSHIFT,8185)@764
    assign i_add_ptr66_6_cnn1005_mult_x_im5_shift0_qint = { i_add_ptr66_6_cnn1005_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_6_cnn1005_mult_x_im5_shift0_q = i_add_ptr66_6_cnn1005_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_align_3(BITSHIFT,3639)@764
    assign i_add_ptr66_6_cnn1005_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_6_cnn1005_mult_x_im5_shift0_q[20]}}, i_add_ptr66_6_cnn1005_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_6_cnn1005_mult_x_sums_align_3_q = i_add_ptr66_6_cnn1005_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1(ADD,3644)@764 + 1
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_6_cnn1005_mult_x_sums_align_3_q[58]}}, i_add_ptr66_6_cnn1005_mult_x_sums_align_3_q};
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_6_cnn1005_mult_x_sums_align_5_q[68]}}, i_add_ptr66_6_cnn1005_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_q = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12506)@765
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_6_cnn1005_mult_x_bjA12(BITJOIN,3628)@764
    assign i_add_ptr66_6_cnn1005_mult_x_bjA12_q = {GND_q, i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_6_cnn1005_mult_x_im10_shift0(BITSHIFT,8186)@764
    assign i_add_ptr66_6_cnn1005_mult_x_im10_shift0_qint = { i_add_ptr66_6_cnn1005_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_6_cnn1005_mult_x_im10_shift0_q = i_add_ptr66_6_cnn1005_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_align_1(BITSHIFT,3637)@764
    assign i_add_ptr66_6_cnn1005_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_6_cnn1005_mult_x_im10_shift0_q[20]}}, i_add_ptr66_6_cnn1005_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_6_cnn1005_mult_x_sums_align_1_q = i_add_ptr66_6_cnn1005_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_6_cnn1005_mult_x_bjA17(BITJOIN,3633)@764
    assign i_add_ptr66_6_cnn1005_mult_x_bjA17_q = {GND_q, i_add_ptr66_6_cnn1005_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_6_cnn1005_mult_x_im15_shift0(BITSHIFT,8187)@764
    assign i_add_ptr66_6_cnn1005_mult_x_im15_shift0_qint = { i_add_ptr66_6_cnn1005_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_6_cnn1005_mult_x_im15_shift0_q = i_add_ptr66_6_cnn1005_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0(ADD,3643)@764 + 1
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_6_cnn1005_mult_x_im15_shift0_q[20]}}, i_add_ptr66_6_cnn1005_mult_x_im15_shift0_q};
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_6_cnn1005_mult_x_sums_align_1_q[40]}}, i_add_ptr66_6_cnn1005_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_q = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12534)@765
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2(ADD,9722)@765 + 1
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12539)@765
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_0_1_q[69:69];

    // redist328_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18245)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist328_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist329_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18246)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist329_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2(ADD,9723)@766 + 1
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist329_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist329_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist328_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist328_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist726_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18643)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist726_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9724)@767
    assign i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p2_of_2_q, redist726_i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_6_cnn1005_mult_extender_x(BITJOIN,1387)@767
    assign i_add_ptr66_6_cnn1005_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_6_cnn1005_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_6_cnn1005_trunc_sel_x(BITSELECT,1389)@767
    assign i_add_ptr66_6_cnn1005_trunc_sel_x_b = i_add_ptr66_6_cnn1005_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001(BLACKBOX,666)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_1002 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_select_63(BITSELECT,669)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_join(BITJOIN,668)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_6_cnn1005_add_x(ADD,1381)@767
    assign i_add_ptr66_6_cnn1005_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_join_q};
    assign i_add_ptr66_6_cnn1005_add_x_b = {1'b0, i_add_ptr66_6_cnn1005_trunc_sel_x_b};
    assign i_add_ptr66_6_cnn1005_add_x_o = $unsigned(i_add_ptr66_6_cnn1005_add_x_a) + $unsigned(i_add_ptr66_6_cnn1005_add_x_b);
    assign i_add_ptr66_6_cnn1005_add_x_q = i_add_ptr66_6_cnn1005_add_x_o[64:0];

    // i_add_ptr66_6_cnn1005_dupName_0_trunc_sel_x(BITSELECT,1390)@767
    assign i_add_ptr66_6_cnn1005_dupName_0_trunc_sel_x_b = i_add_ptr66_6_cnn1005_add_x_q[63:0];

    // i_add_ptr66_6_cnn1004_vt_select_63(BITSELECT,87)@767
    assign i_add_ptr66_6_cnn1004_vt_select_63_b = i_add_ptr66_6_cnn1005_dupName_0_trunc_sel_x_b[63:2];

    // redist867_i_add_ptr66_6_cnn1004_vt_select_63_b_1(DELAY,18784)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist867_i_add_ptr66_6_cnn1004_vt_select_63_b_1_q <= i_add_ptr66_6_cnn1004_vt_select_63_b;
        end
    end

    // i_add_ptr66_6_cnn1004_vt_join(BITJOIN,86)@768
    assign i_add_ptr66_6_cnn1004_vt_join_q = {redist867_i_add_ptr66_6_cnn1004_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_6_cnn1031_add_x(ADD,1951)@768
    assign i_add_ptr70_3_6_cnn1031_add_x_a = {1'b0, i_add_ptr66_6_cnn1004_vt_join_q};
    assign i_add_ptr70_3_6_cnn1031_add_x_b = {1'b0, i_add_ptr70_3_6_cnn1031_trunc_sel_x_b};
    assign i_add_ptr70_3_6_cnn1031_add_x_o = $unsigned(i_add_ptr70_3_6_cnn1031_add_x_a) + $unsigned(i_add_ptr70_3_6_cnn1031_add_x_b);
    assign i_add_ptr70_3_6_cnn1031_add_x_q = i_add_ptr70_3_6_cnn1031_add_x_o[64:0];

    // i_add_ptr70_3_6_cnn1031_dupName_0_trunc_sel_x(BITSELECT,1960)@768
    assign i_add_ptr70_3_6_cnn1031_dupName_0_trunc_sel_x_b = i_add_ptr70_3_6_cnn1031_add_x_q[63:0];

    // i_add_ptr70_3_6_cnn1030_vt_select_63(BITSELECT,258)@768
    assign i_add_ptr70_3_6_cnn1030_vt_select_63_b = i_add_ptr70_3_6_cnn1031_dupName_0_trunc_sel_x_b[63:2];

    // redist810_i_add_ptr70_3_6_cnn1030_vt_select_63_b_1(DELAY,18727)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist810_i_add_ptr70_3_6_cnn1030_vt_select_63_b_1_q <= i_add_ptr70_3_6_cnn1030_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_6_cnn1030_vt_join(BITJOIN,257)@769
    assign i_add_ptr70_3_6_cnn1030_vt_join_q = {redist810_i_add_ptr70_3_6_cnn1030_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_6_cnn1033_add_x(ADD,2591)@769
    assign i_add_ptr73_371_6_cnn1033_add_x_a = {1'b0, i_add_ptr70_3_6_cnn1030_vt_join_q};
    assign i_add_ptr73_371_6_cnn1033_add_x_b = {1'b0, i_add_ptr73_371_6_cnn1033_trunc_sel_x_b};
    assign i_add_ptr73_371_6_cnn1033_add_x_o = $unsigned(i_add_ptr73_371_6_cnn1033_add_x_a) + $unsigned(i_add_ptr73_371_6_cnn1033_add_x_b);
    assign i_add_ptr73_371_6_cnn1033_add_x_q = i_add_ptr73_371_6_cnn1033_add_x_o[64:0];

    // i_add_ptr73_371_6_cnn1033_dupName_0_trunc_sel_x(BITSELECT,2600)@769
    assign i_add_ptr73_371_6_cnn1033_dupName_0_trunc_sel_x_b = i_add_ptr73_371_6_cnn1033_add_x_q[63:0];

    // i_add_ptr73_371_6_cnn1032_vt_select_63(BITSELECT,450)@769
    assign i_add_ptr73_371_6_cnn1032_vt_select_63_b = i_add_ptr73_371_6_cnn1033_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_6_cnn1032_vt_join(BITJOIN,449)@769
    assign i_add_ptr73_371_6_cnn1032_vt_join_q = {i_add_ptr73_371_6_cnn1032_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_select_63(BITSELECT,810)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_select_63_b = i_add_ptr73_371_6_cnn1032_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_join(BITJOIN,809)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn135_cnn1027(BLACKBOX,599)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_135_cnn1028 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn135_cnn1027 (
        .in_intel_reserved_ffwd_54_0(in_intel_reserved_ffwd_54_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_54_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn135_cnn1027_out_dest_data_out_54_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0(BITSHIFT,8596)@766
    assign i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0_q = i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5(BITSHIFT,6731)@766
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_6_cnn1025_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5_q = i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0(BITSHIFT,8597)@766
    assign i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0_q = i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3(BITSHIFT,6729)@766
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_6_cnn1025_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3_q = i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1(ADD,6734)@766 + 1
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_6_cnn1025_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_6_cnn1025_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16214)@767
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0(BITSHIFT,8598)@766
    assign i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0_q = i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1(BITSHIFT,6727)@766
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_6_cnn1025_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1_q = i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0(BITSHIFT,8599)@766
    assign i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0_q = i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0(ADD,6733)@766 + 1
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_6_cnn1025_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_6_cnn1025_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16242)@767
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2(ADD,10855)@767 + 1
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16247)@767
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_0_1_q[69:69];

    // redist122_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18039)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist122_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist123_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18040)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist123_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2(ADD,10856)@768 + 1
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist123_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist123_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist122_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist122_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist623_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18540)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist623_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10857)@769
    assign i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p2_of_2_q, redist623_i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_6_cnn1025_mult_extender_x(BITJOIN,2417)@769
    assign i_add_ptr73_270_6_cnn1025_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_6_cnn1025_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_6_cnn1025_trunc_sel_x(BITSELECT,2419)@769
    assign i_add_ptr73_270_6_cnn1025_trunc_sel_x_b = i_add_ptr73_270_6_cnn1025_mult_extender_x_q[63:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0(BITSHIFT,8344)@765
    assign i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0_q = i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5(BITSHIFT,4841)@765
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_6_cnn1023_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5_q = i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0(BITSHIFT,8345)@765
    assign i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0_q = i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3(BITSHIFT,4839)@765
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_6_cnn1023_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3_q = i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1(ADD,4844)@765 + 1
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_6_cnn1023_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_6_cnn1023_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13946)@766
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0(BITSHIFT,8346)@765
    assign i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0_q = i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1(BITSHIFT,4837)@765
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_6_cnn1023_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1_q = i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0(BITSHIFT,8347)@765
    assign i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0_q = i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0(ADD,4843)@765 + 1
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_6_cnn1023_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_6_cnn1023_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13974)@766
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2(ADD,10162)@766 + 1
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13979)@766
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_0_1_q[69:69];

    // redist248_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18165)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist248_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist249_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18166)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist249_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2(ADD,10163)@767 + 1
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist249_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist249_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist248_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist248_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist686_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18603)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist686_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10164)@768
    assign i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p2_of_2_q, redist686_i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_6_cnn1023_mult_extender_x(BITJOIN,1787)@768
    assign i_add_ptr70_2_6_cnn1023_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_6_cnn1023_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_6_cnn1023_trunc_sel_x(BITSELECT,1789)@768
    assign i_add_ptr70_2_6_cnn1023_trunc_sel_x_b = i_add_ptr70_2_6_cnn1023_mult_extender_x_q[63:0];

    // i_add_ptr70_2_6_cnn1023_add_x(ADD,1781)@768
    assign i_add_ptr70_2_6_cnn1023_add_x_a = {1'b0, i_add_ptr66_6_cnn1004_vt_join_q};
    assign i_add_ptr70_2_6_cnn1023_add_x_b = {1'b0, i_add_ptr70_2_6_cnn1023_trunc_sel_x_b};
    assign i_add_ptr70_2_6_cnn1023_add_x_o = $unsigned(i_add_ptr70_2_6_cnn1023_add_x_a) + $unsigned(i_add_ptr70_2_6_cnn1023_add_x_b);
    assign i_add_ptr70_2_6_cnn1023_add_x_q = i_add_ptr70_2_6_cnn1023_add_x_o[64:0];

    // i_add_ptr70_2_6_cnn1023_dupName_0_trunc_sel_x(BITSELECT,1790)@768
    assign i_add_ptr70_2_6_cnn1023_dupName_0_trunc_sel_x_b = i_add_ptr70_2_6_cnn1023_add_x_q[63:0];

    // i_add_ptr70_2_6_cnn1022_vt_select_63(BITSELECT,207)@768
    assign i_add_ptr70_2_6_cnn1022_vt_select_63_b = i_add_ptr70_2_6_cnn1023_dupName_0_trunc_sel_x_b[63:2];

    // redist827_i_add_ptr70_2_6_cnn1022_vt_select_63_b_1(DELAY,18744)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist827_i_add_ptr70_2_6_cnn1022_vt_select_63_b_1_q <= i_add_ptr70_2_6_cnn1022_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_6_cnn1022_vt_join(BITJOIN,206)@769
    assign i_add_ptr70_2_6_cnn1022_vt_join_q = {redist827_i_add_ptr70_2_6_cnn1022_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_6_cnn1025_add_x(ADD,2411)@769
    assign i_add_ptr73_270_6_cnn1025_add_x_a = {1'b0, i_add_ptr70_2_6_cnn1022_vt_join_q};
    assign i_add_ptr73_270_6_cnn1025_add_x_b = {1'b0, i_add_ptr73_270_6_cnn1025_trunc_sel_x_b};
    assign i_add_ptr73_270_6_cnn1025_add_x_o = $unsigned(i_add_ptr73_270_6_cnn1025_add_x_a) + $unsigned(i_add_ptr73_270_6_cnn1025_add_x_b);
    assign i_add_ptr73_270_6_cnn1025_add_x_q = i_add_ptr73_270_6_cnn1025_add_x_o[64:0];

    // i_add_ptr73_270_6_cnn1025_dupName_0_trunc_sel_x(BITSELECT,2420)@769
    assign i_add_ptr73_270_6_cnn1025_dupName_0_trunc_sel_x_b = i_add_ptr73_270_6_cnn1025_add_x_q[63:0];

    // i_add_ptr73_270_6_cnn1024_vt_select_63(BITSELECT,396)@769
    assign i_add_ptr73_270_6_cnn1024_vt_select_63_b = i_add_ptr73_270_6_cnn1025_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_6_cnn1024_vt_join(BITJOIN,395)@769
    assign i_add_ptr73_270_6_cnn1024_vt_join_q = {i_add_ptr73_270_6_cnn1024_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_select_63(BITSELECT,806)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_select_63_b = i_add_ptr73_270_6_cnn1024_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_join(BITJOIN,805)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn134_cnn1019(BLACKBOX,598)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_134_cnn1020 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn134_cnn1019 (
        .in_intel_reserved_ffwd_53_0(in_intel_reserved_ffwd_53_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_53_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn134_cnn1019_out_dest_data_out_53_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0(BITSHIFT,8528)@766
    assign i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0_q = i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5(BITSHIFT,6221)@766
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_6_cnn1017_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5_q = i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0(BITSHIFT,8529)@766
    assign i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0_q = i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3(BITSHIFT,6219)@766
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_6_cnn1017_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3_q = i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1(ADD,6224)@766 + 1
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_6_cnn1017_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_6_cnn1017_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15602)@767
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0(BITSHIFT,8530)@766
    assign i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0_q = i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1(BITSHIFT,6217)@766
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_6_cnn1017_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1_q = i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0(BITSHIFT,8531)@766
    assign i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0_q = i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0(ADD,6223)@766 + 1
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_6_cnn1017_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_6_cnn1017_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15630)@767
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2(ADD,10668)@767 + 1
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15635)@767
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_0_1_q[69:69];

    // redist156_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18073)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist156_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist157_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18074)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist157_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2(ADD,10669)@768 + 1
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist157_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist157_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist156_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist156_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist640_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18557)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist640_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10670)@769
    assign i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p2_of_2_q, redist640_i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_6_cnn1017_mult_extender_x(BITJOIN,2247)@769
    assign i_add_ptr73_169_6_cnn1017_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_6_cnn1017_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_6_cnn1017_trunc_sel_x(BITSELECT,2249)@769
    assign i_add_ptr73_169_6_cnn1017_trunc_sel_x_b = i_add_ptr73_169_6_cnn1017_mult_extender_x_q[63:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0(BITSHIFT,8276)@765
    assign i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0_q = i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5(BITSHIFT,4331)@765
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_6_cnn1015_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5_q = i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0(BITSHIFT,8277)@765
    assign i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0_q = i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3(BITSHIFT,4329)@765
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_6_cnn1015_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3_q = i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1(ADD,4334)@765 + 1
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_6_cnn1015_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_6_cnn1015_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13334)@766
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0(BITSHIFT,8278)@765
    assign i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0_q = i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1(BITSHIFT,4327)@765
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_6_cnn1015_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1_q = i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0(BITSHIFT,8279)@765
    assign i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0_q = i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0(ADD,4333)@765 + 1
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_6_cnn1015_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_6_cnn1015_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13362)@766
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2(ADD,9975)@766 + 1
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13367)@766
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_0_1_q[69:69];

    // redist282_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18199)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist282_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist283_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18200)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist283_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2(ADD,9976)@767 + 1
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist283_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist283_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist282_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist282_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist703_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18620)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist703_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9977)@768
    assign i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p2_of_2_q, redist703_i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_6_cnn1015_mult_extender_x(BITJOIN,1617)@768
    assign i_add_ptr70_1_6_cnn1015_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_6_cnn1015_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_6_cnn1015_trunc_sel_x(BITSELECT,1619)@768
    assign i_add_ptr70_1_6_cnn1015_trunc_sel_x_b = i_add_ptr70_1_6_cnn1015_mult_extender_x_q[63:0];

    // i_add_ptr70_1_6_cnn1015_add_x(ADD,1611)@768
    assign i_add_ptr70_1_6_cnn1015_add_x_a = {1'b0, i_add_ptr66_6_cnn1004_vt_join_q};
    assign i_add_ptr70_1_6_cnn1015_add_x_b = {1'b0, i_add_ptr70_1_6_cnn1015_trunc_sel_x_b};
    assign i_add_ptr70_1_6_cnn1015_add_x_o = $unsigned(i_add_ptr70_1_6_cnn1015_add_x_a) + $unsigned(i_add_ptr70_1_6_cnn1015_add_x_b);
    assign i_add_ptr70_1_6_cnn1015_add_x_q = i_add_ptr70_1_6_cnn1015_add_x_o[64:0];

    // i_add_ptr70_1_6_cnn1015_dupName_0_trunc_sel_x(BITSELECT,1620)@768
    assign i_add_ptr70_1_6_cnn1015_dupName_0_trunc_sel_x_b = i_add_ptr70_1_6_cnn1015_add_x_q[63:0];

    // i_add_ptr70_1_6_cnn1014_vt_select_63(BITSELECT,156)@768
    assign i_add_ptr70_1_6_cnn1014_vt_select_63_b = i_add_ptr70_1_6_cnn1015_dupName_0_trunc_sel_x_b[63:2];

    // redist844_i_add_ptr70_1_6_cnn1014_vt_select_63_b_1(DELAY,18761)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist844_i_add_ptr70_1_6_cnn1014_vt_select_63_b_1_q <= i_add_ptr70_1_6_cnn1014_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_6_cnn1014_vt_join(BITJOIN,155)@769
    assign i_add_ptr70_1_6_cnn1014_vt_join_q = {redist844_i_add_ptr70_1_6_cnn1014_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_6_cnn1017_add_x(ADD,2241)@769
    assign i_add_ptr73_169_6_cnn1017_add_x_a = {1'b0, i_add_ptr70_1_6_cnn1014_vt_join_q};
    assign i_add_ptr73_169_6_cnn1017_add_x_b = {1'b0, i_add_ptr73_169_6_cnn1017_trunc_sel_x_b};
    assign i_add_ptr73_169_6_cnn1017_add_x_o = $unsigned(i_add_ptr73_169_6_cnn1017_add_x_a) + $unsigned(i_add_ptr73_169_6_cnn1017_add_x_b);
    assign i_add_ptr73_169_6_cnn1017_add_x_q = i_add_ptr73_169_6_cnn1017_add_x_o[64:0];

    // i_add_ptr73_169_6_cnn1017_dupName_0_trunc_sel_x(BITSELECT,2250)@769
    assign i_add_ptr73_169_6_cnn1017_dupName_0_trunc_sel_x_b = i_add_ptr73_169_6_cnn1017_add_x_q[63:0];

    // i_add_ptr73_169_6_cnn1016_vt_select_63(BITSELECT,345)@769
    assign i_add_ptr73_169_6_cnn1016_vt_select_63_b = i_add_ptr73_169_6_cnn1017_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_6_cnn1016_vt_join(BITJOIN,344)@769
    assign i_add_ptr73_169_6_cnn1016_vt_join_q = {i_add_ptr73_169_6_cnn1016_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_select_63(BITSELECT,802)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_select_63_b = i_add_ptr73_169_6_cnn1016_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_join(BITJOIN,801)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn133_cnn1011(BLACKBOX,597)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_133_cnn1012 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn133_cnn1011 (
        .in_intel_reserved_ffwd_52_0(in_intel_reserved_ffwd_52_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_52_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn133_cnn1011_out_dest_data_out_52_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_6_cnn1009_mult_x_im0_shift0(BITSHIFT,8696)@766
    assign i_add_ptr73_6_cnn1009_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_6_cnn1009_mult_x_im0_shift0_q = i_add_ptr73_6_cnn1009_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_align_5(BITSHIFT,7481)@766
    assign i_add_ptr73_6_cnn1009_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_6_cnn1009_mult_x_im0_shift0_q[12]}}, i_add_ptr73_6_cnn1009_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_6_cnn1009_mult_x_sums_align_5_q = i_add_ptr73_6_cnn1009_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_6_cnn1009_mult_x_im5_shift0(BITSHIFT,8697)@766
    assign i_add_ptr73_6_cnn1009_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_6_cnn1009_mult_x_im5_shift0_q = i_add_ptr73_6_cnn1009_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_align_3(BITSHIFT,7479)@766
    assign i_add_ptr73_6_cnn1009_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_6_cnn1009_mult_x_im5_shift0_q[20]}}, i_add_ptr73_6_cnn1009_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_6_cnn1009_mult_x_sums_align_3_q = i_add_ptr73_6_cnn1009_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1(ADD,7484)@766 + 1
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_6_cnn1009_mult_x_sums_align_3_q[58]}}, i_add_ptr73_6_cnn1009_mult_x_sums_align_3_q};
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_6_cnn1009_mult_x_sums_align_5_q[68]}}, i_add_ptr73_6_cnn1009_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_q = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17114)@767
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_6_cnn1009_mult_x_im10_shift0(BITSHIFT,8698)@766
    assign i_add_ptr73_6_cnn1009_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_6_cnn1009_mult_x_im10_shift0_q = i_add_ptr73_6_cnn1009_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_align_1(BITSHIFT,7477)@766
    assign i_add_ptr73_6_cnn1009_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_6_cnn1009_mult_x_im10_shift0_q[20]}}, i_add_ptr73_6_cnn1009_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_6_cnn1009_mult_x_sums_align_1_q = i_add_ptr73_6_cnn1009_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_6_cnn1009_mult_x_im15_shift0(BITSHIFT,8699)@766
    assign i_add_ptr73_6_cnn1009_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_6_cnn1009_mult_x_im15_shift0_q = i_add_ptr73_6_cnn1009_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0(ADD,7483)@766 + 1
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_6_cnn1009_mult_x_im15_shift0_q[20]}}, i_add_ptr73_6_cnn1009_mult_x_im15_shift0_q};
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_6_cnn1009_mult_x_sums_align_1_q[40]}}, i_add_ptr73_6_cnn1009_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_q = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17142)@767
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2(ADD,11130)@767 + 1
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17147)@767
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_0_1_q[69:69];

    // redist72_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17989)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist72_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist73_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17990)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist73_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2(ADD,11131)@768 + 1
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist73_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist73_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist72_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist72_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist598_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18515)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist598_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11132)@769
    assign i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p2_of_2_q, redist598_i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_6_cnn1009_mult_extender_x(BITJOIN,2667)@769
    assign i_add_ptr73_6_cnn1009_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_6_cnn1009_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_6_cnn1009_trunc_sel_x(BITSELECT,2669)@769
    assign i_add_ptr73_6_cnn1009_trunc_sel_x_b = i_add_ptr73_6_cnn1009_mult_extender_x_q[63:0];

    // i_add_ptr70_6_cnn1007_mult_x_im0_shift0(BITSHIFT,8440)@765
    assign i_add_ptr70_6_cnn1007_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_6_cnn1007_mult_x_im0_shift0_q = i_add_ptr70_6_cnn1007_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_align_5(BITSHIFT,5561)@765
    assign i_add_ptr70_6_cnn1007_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_6_cnn1007_mult_x_im0_shift0_q[12]}}, i_add_ptr70_6_cnn1007_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_6_cnn1007_mult_x_sums_align_5_q = i_add_ptr70_6_cnn1007_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_6_cnn1007_mult_x_im5_shift0(BITSHIFT,8441)@765
    assign i_add_ptr70_6_cnn1007_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_6_cnn1007_mult_x_im5_shift0_q = i_add_ptr70_6_cnn1007_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_align_3(BITSHIFT,5559)@765
    assign i_add_ptr70_6_cnn1007_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_6_cnn1007_mult_x_im5_shift0_q[20]}}, i_add_ptr70_6_cnn1007_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_6_cnn1007_mult_x_sums_align_3_q = i_add_ptr70_6_cnn1007_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1(ADD,5564)@765 + 1
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_6_cnn1007_mult_x_sums_align_3_q[58]}}, i_add_ptr70_6_cnn1007_mult_x_sums_align_3_q};
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_6_cnn1007_mult_x_sums_align_5_q[68]}}, i_add_ptr70_6_cnn1007_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_q = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14810)@766
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_6_cnn1007_mult_x_im10_shift0(BITSHIFT,8442)@765
    assign i_add_ptr70_6_cnn1007_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_6_cnn1007_mult_x_im10_shift0_q = i_add_ptr70_6_cnn1007_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_align_1(BITSHIFT,5557)@765
    assign i_add_ptr70_6_cnn1007_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_6_cnn1007_mult_x_im10_shift0_q[20]}}, i_add_ptr70_6_cnn1007_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_6_cnn1007_mult_x_sums_align_1_q = i_add_ptr70_6_cnn1007_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_6_cnn1007_mult_x_im15_shift0(BITSHIFT,8443)@765
    assign i_add_ptr70_6_cnn1007_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_6_cnn1007_mult_x_im15_shift0_q = i_add_ptr70_6_cnn1007_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0(ADD,5563)@765 + 1
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_6_cnn1007_mult_x_im15_shift0_q[20]}}, i_add_ptr70_6_cnn1007_mult_x_im15_shift0_q};
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_6_cnn1007_mult_x_sums_align_1_q[40]}}, i_add_ptr70_6_cnn1007_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_q = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14838)@766
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2(ADD,10426)@766 + 1
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14843)@766
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_0_1_q[69:69];

    // redist200_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18117)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist200_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist201_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18118)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist201_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2(ADD,10427)@767 + 1
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist201_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist201_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist200_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist200_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist662_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18579)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist662_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10428)@768
    assign i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p2_of_2_q, redist662_i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_6_cnn1007_mult_extender_x(BITJOIN,2027)@768
    assign i_add_ptr70_6_cnn1007_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_6_cnn1007_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_6_cnn1007_trunc_sel_x(BITSELECT,2029)@768
    assign i_add_ptr70_6_cnn1007_trunc_sel_x_b = i_add_ptr70_6_cnn1007_mult_extender_x_q[63:0];

    // i_add_ptr70_6_cnn1007_add_x(ADD,2021)@768
    assign i_add_ptr70_6_cnn1007_add_x_a = {1'b0, i_add_ptr66_6_cnn1004_vt_join_q};
    assign i_add_ptr70_6_cnn1007_add_x_b = {1'b0, i_add_ptr70_6_cnn1007_trunc_sel_x_b};
    assign i_add_ptr70_6_cnn1007_add_x_o = $unsigned(i_add_ptr70_6_cnn1007_add_x_a) + $unsigned(i_add_ptr70_6_cnn1007_add_x_b);
    assign i_add_ptr70_6_cnn1007_add_x_q = i_add_ptr70_6_cnn1007_add_x_o[64:0];

    // i_add_ptr70_6_cnn1007_dupName_0_trunc_sel_x(BITSELECT,2030)@768
    assign i_add_ptr70_6_cnn1007_dupName_0_trunc_sel_x_b = i_add_ptr70_6_cnn1007_add_x_q[63:0];

    // i_add_ptr70_6_cnn1006_vt_select_63(BITSELECT,279)@768
    assign i_add_ptr70_6_cnn1006_vt_select_63_b = i_add_ptr70_6_cnn1007_dupName_0_trunc_sel_x_b[63:2];

    // redist803_i_add_ptr70_6_cnn1006_vt_select_63_b_1(DELAY,18720)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist803_i_add_ptr70_6_cnn1006_vt_select_63_b_1_q <= i_add_ptr70_6_cnn1006_vt_select_63_b;
        end
    end

    // i_add_ptr70_6_cnn1006_vt_join(BITJOIN,278)@769
    assign i_add_ptr70_6_cnn1006_vt_join_q = {redist803_i_add_ptr70_6_cnn1006_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_6_cnn1009_add_x(ADD,2661)@769
    assign i_add_ptr73_6_cnn1009_add_x_a = {1'b0, i_add_ptr70_6_cnn1006_vt_join_q};
    assign i_add_ptr73_6_cnn1009_add_x_b = {1'b0, i_add_ptr73_6_cnn1009_trunc_sel_x_b};
    assign i_add_ptr73_6_cnn1009_add_x_o = $unsigned(i_add_ptr73_6_cnn1009_add_x_a) + $unsigned(i_add_ptr73_6_cnn1009_add_x_b);
    assign i_add_ptr73_6_cnn1009_add_x_q = i_add_ptr73_6_cnn1009_add_x_o[64:0];

    // i_add_ptr73_6_cnn1009_dupName_0_trunc_sel_x(BITSELECT,2670)@769
    assign i_add_ptr73_6_cnn1009_dupName_0_trunc_sel_x_b = i_add_ptr73_6_cnn1009_add_x_q[63:0];

    // i_add_ptr73_6_cnn1008_vt_select_63(BITSELECT,471)@769
    assign i_add_ptr73_6_cnn1008_vt_select_63_b = i_add_ptr73_6_cnn1009_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_6_cnn1008_vt_join(BITJOIN,470)@769
    assign i_add_ptr73_6_cnn1008_vt_join_q = {i_add_ptr73_6_cnn1008_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_select_63(BITSELECT,798)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_select_63_b = i_add_ptr73_6_cnn1008_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_join(BITJOIN,797)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn132_cnn996(BLACKBOX,596)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_132_cnn997 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn132_cnn996 (
        .in_intel_reserved_ffwd_51_0(in_intel_reserved_ffwd_51_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_51_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn132_cnn996_out_dest_data_out_51_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_5_cnn994_mult_x_im0_shift0(BITSHIFT,8664)@766
    assign i_add_ptr73_371_5_cnn994_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_5_cnn994_mult_x_im0_shift0_q = i_add_ptr73_371_5_cnn994_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_align_5(BITSHIFT,7241)@766
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_5_cnn994_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_5_cnn994_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_align_5_q = i_add_ptr73_371_5_cnn994_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_5_cnn994_mult_x_im5_shift0(BITSHIFT,8665)@766
    assign i_add_ptr73_371_5_cnn994_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_5_cnn994_mult_x_im5_shift0_q = i_add_ptr73_371_5_cnn994_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_align_3(BITSHIFT,7239)@766
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_5_cnn994_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_5_cnn994_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_align_3_q = i_add_ptr73_371_5_cnn994_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1(ADD,7244)@766 + 1
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_5_cnn994_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_5_cnn994_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_5_cnn994_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_5_cnn994_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16826)@767
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_5_cnn994_mult_x_im10_shift0(BITSHIFT,8666)@766
    assign i_add_ptr73_371_5_cnn994_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_5_cnn994_mult_x_im10_shift0_q = i_add_ptr73_371_5_cnn994_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_align_1(BITSHIFT,7237)@766
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_5_cnn994_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_5_cnn994_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_align_1_q = i_add_ptr73_371_5_cnn994_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_5_cnn994_mult_x_im15_shift0(BITSHIFT,8667)@766
    assign i_add_ptr73_371_5_cnn994_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_5_cnn994_mult_x_im15_shift0_q = i_add_ptr73_371_5_cnn994_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0(ADD,7243)@766 + 1
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_5_cnn994_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_5_cnn994_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_5_cnn994_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_5_cnn994_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16854)@767
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2(ADD,11042)@767 + 1
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16859)@767
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_0_1_q[69:69];

    // redist88_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18005)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist88_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist89_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18006)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist89_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2(ADD,11043)@768 + 1
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist89_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist89_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist88_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist88_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist606_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18523)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist606_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11044)@769
    assign i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p2_of_2_q, redist606_i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_5_cnn994_mult_extender_x(BITJOIN,2587)@769
    assign i_add_ptr73_371_5_cnn994_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_5_cnn994_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_5_cnn994_trunc_sel_x(BITSELECT,2589)@769
    assign i_add_ptr73_371_5_cnn994_trunc_sel_x_b = i_add_ptr73_371_5_cnn994_mult_extender_x_q[63:0];

    // i_add_ptr70_3_5_cnn992_mult_x_im0_shift0(BITSHIFT,8408)@765
    assign i_add_ptr70_3_5_cnn992_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_5_cnn992_mult_x_im0_shift0_q = i_add_ptr70_3_5_cnn992_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_align_5(BITSHIFT,5321)@765
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_5_cnn992_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_5_cnn992_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_align_5_q = i_add_ptr70_3_5_cnn992_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_5_cnn992_mult_x_im5_shift0(BITSHIFT,8409)@765
    assign i_add_ptr70_3_5_cnn992_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_5_cnn992_mult_x_im5_shift0_q = i_add_ptr70_3_5_cnn992_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_align_3(BITSHIFT,5319)@765
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_5_cnn992_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_5_cnn992_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_align_3_q = i_add_ptr70_3_5_cnn992_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1(ADD,5324)@765 + 1
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_5_cnn992_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_5_cnn992_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_5_cnn992_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_5_cnn992_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14522)@766
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_5_cnn992_mult_x_im10_shift0(BITSHIFT,8410)@765
    assign i_add_ptr70_3_5_cnn992_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_5_cnn992_mult_x_im10_shift0_q = i_add_ptr70_3_5_cnn992_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_align_1(BITSHIFT,5317)@765
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_5_cnn992_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_5_cnn992_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_align_1_q = i_add_ptr70_3_5_cnn992_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_5_cnn992_mult_x_im15_shift0(BITSHIFT,8411)@765
    assign i_add_ptr70_3_5_cnn992_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_5_cnn992_mult_x_im15_shift0_q = i_add_ptr70_3_5_cnn992_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0(ADD,5323)@765 + 1
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_5_cnn992_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_5_cnn992_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_5_cnn992_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_5_cnn992_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14550)@766
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2(ADD,10338)@766 + 1
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14555)@766
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_0_1_q[69:69];

    // redist216_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18133)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist216_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist217_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18134)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist217_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2(ADD,10339)@767 + 1
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist217_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist217_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist216_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist216_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist670_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18587)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist670_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10340)@768
    assign i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p2_of_2_q, redist670_i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_5_cnn992_mult_extender_x(BITJOIN,1947)@768
    assign i_add_ptr70_3_5_cnn992_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_5_cnn992_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_5_cnn992_trunc_sel_x(BITSELECT,1949)@768
    assign i_add_ptr70_3_5_cnn992_trunc_sel_x_b = i_add_ptr70_3_5_cnn992_mult_extender_x_q[63:0];

    // c_i64_5gr(CONSTANT,46)
    assign c_i64_5gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000101;

    // i_inc79_4_cnn960(LOGICAL,527)@754
    assign i_inc79_4_cnn960_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_5gr_q;

    // i_inc79_4_cnn960_vt_select_1_merged_bit_select(BITSELECT,17883)@754
    assign i_inc79_4_cnn960_vt_select_1_merged_bit_select_b = i_inc79_4_cnn960_q[1:1];
    assign i_inc79_4_cnn960_vt_select_1_merged_bit_select_c = i_inc79_4_cnn960_q[63:3];

    // i_inc79_4_cnn960_vt_join(BITJOIN,530)@754
    assign i_inc79_4_cnn960_vt_join_q = {i_inc79_4_cnn960_vt_select_1_merged_bit_select_c, VCC_q, i_inc79_4_cnn960_vt_select_1_merged_bit_select_b, VCC_q};

    // i_mul65_5_cnn961_bs1_merged_bit_select(BITSELECT,17884)@754
    assign i_mul65_5_cnn961_bs1_merged_bit_select_b = i_inc79_4_cnn960_vt_join_q[63:54];
    assign i_mul65_5_cnn961_bs1_merged_bit_select_c = i_inc79_4_cnn960_vt_join_q[53:36];
    assign i_mul65_5_cnn961_bs1_merged_bit_select_d = i_inc79_4_cnn960_vt_join_q[35:18];
    assign i_mul65_5_cnn961_bs1_merged_bit_select_e = i_inc79_4_cnn960_vt_join_q[17:0];

    // i_mul65_5_cnn961_bjA2(BITJOIN,3078)@754
    assign i_mul65_5_cnn961_bjA2_q = {GND_q, i_mul65_5_cnn961_bs1_merged_bit_select_b};

    // i_mul65_5_cnn961_im0_cma(CHAINMULTADD,17845)@754 + 5
    // out q@760
    assign i_mul65_5_cnn961_im0_cma_reset = ~ (resetn);
    assign i_mul65_5_cnn961_im0_cma_ena0 = 1'b1;
    assign i_mul65_5_cnn961_im0_cma_ena1 = i_mul65_5_cnn961_im0_cma_ena0;
    assign i_mul65_5_cnn961_im0_cma_ena2 = i_mul65_5_cnn961_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_im0_cma_ah[0] <= i_mul65_5_cnn961_bjA2_q;
        end
    end

    assign i_mul65_5_cnn961_im0_cma_a0 = i_mul65_5_cnn961_im0_cma_ah[0];
    assign i_mul65_5_cnn961_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_5_cnn961_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_5_cnn961_im0_cma_ena2, i_mul65_5_cnn961_im0_cma_ena1, i_mul65_5_cnn961_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_5_cnn961_im0_cma_a0),
        .coefsela(i_mul65_5_cnn961_im0_cma_c0),
        .resulta(i_mul65_5_cnn961_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_5_cnn961_im0_cma_delay ( .xin(i_mul65_5_cnn961_im0_cma_s0), .xout(i_mul65_5_cnn961_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_5_cnn961_im0_cma_q = i_mul65_5_cnn961_im0_cma_qq[21:0];

    // redist23_i_mul65_5_cnn961_im0_cma_q_1(DELAY,17940)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist23_i_mul65_5_cnn961_im0_cma_q_1_q <= i_mul65_5_cnn961_im0_cma_q;
        end
    end

    // i_mul65_5_cnn961_sums_align_5(BITSHIFT,3101)@761
    assign i_mul65_5_cnn961_sums_align_5_qint = { redist23_i_mul65_5_cnn961_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_5_cnn961_sums_align_5_q = i_mul65_5_cnn961_sums_align_5_qint[74:0];

    // i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11751)@761
    assign i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_5_cnn961_sums_align_5_q[69:0];

    // i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11738)@761
    assign i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_5_cnn961_sums_align_3_q[64:64];

    // i_mul65_5_cnn961_bjA7(BITJOIN,3083)@754
    assign i_mul65_5_cnn961_bjA7_q = {GND_q, i_mul65_5_cnn961_bs1_merged_bit_select_c};

    // i_mul65_5_cnn961_im5_cma(CHAINMULTADD,17846)@754 + 5
    // out q@760
    assign i_mul65_5_cnn961_im5_cma_reset = ~ (resetn);
    assign i_mul65_5_cnn961_im5_cma_ena0 = 1'b1;
    assign i_mul65_5_cnn961_im5_cma_ena1 = i_mul65_5_cnn961_im5_cma_ena0;
    assign i_mul65_5_cnn961_im5_cma_ena2 = i_mul65_5_cnn961_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_im5_cma_ah[0] <= i_mul65_5_cnn961_bjA7_q;
        end
    end

    assign i_mul65_5_cnn961_im5_cma_a0 = i_mul65_5_cnn961_im5_cma_ah[0];
    assign i_mul65_5_cnn961_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_5_cnn961_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_5_cnn961_im5_cma_ena2, i_mul65_5_cnn961_im5_cma_ena1, i_mul65_5_cnn961_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_5_cnn961_im5_cma_a0),
        .coefsela(i_mul65_5_cnn961_im5_cma_c0),
        .resulta(i_mul65_5_cnn961_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_5_cnn961_im5_cma_delay ( .xin(i_mul65_5_cnn961_im5_cma_s0), .xout(i_mul65_5_cnn961_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_5_cnn961_im5_cma_q = i_mul65_5_cnn961_im5_cma_qq[29:0];

    // redist22_i_mul65_5_cnn961_im5_cma_q_1(DELAY,17939)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist22_i_mul65_5_cnn961_im5_cma_q_1_q <= i_mul65_5_cnn961_im5_cma_q;
        end
    end

    // i_mul65_5_cnn961_sums_align_3(BITSHIFT,3099)@761
    assign i_mul65_5_cnn961_sums_align_3_qint = { redist22_i_mul65_5_cnn961_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_5_cnn961_sums_align_3_q = i_mul65_5_cnn961_sums_align_3_qint[64:0];

    // i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11743)@761
    assign i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_align_3_q};

    // i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2(ADD,9458)@761 + 1
    assign i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_q = i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11757)@762
    assign i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_5_cnn961_sums_result_add_0_0_q[47:47];

    // i_mul65_5_cnn961_bjA12(BITJOIN,3088)@754
    assign i_mul65_5_cnn961_bjA12_q = {GND_q, i_mul65_5_cnn961_bs1_merged_bit_select_d};

    // i_mul65_5_cnn961_im10_cma(CHAINMULTADD,17847)@754 + 5
    // out q@760
    assign i_mul65_5_cnn961_im10_cma_reset = ~ (resetn);
    assign i_mul65_5_cnn961_im10_cma_ena0 = 1'b1;
    assign i_mul65_5_cnn961_im10_cma_ena1 = i_mul65_5_cnn961_im10_cma_ena0;
    assign i_mul65_5_cnn961_im10_cma_ena2 = i_mul65_5_cnn961_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_im10_cma_ah[0] <= i_mul65_5_cnn961_bjA12_q;
        end
    end

    assign i_mul65_5_cnn961_im10_cma_a0 = i_mul65_5_cnn961_im10_cma_ah[0];
    assign i_mul65_5_cnn961_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_5_cnn961_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_5_cnn961_im10_cma_ena2, i_mul65_5_cnn961_im10_cma_ena1, i_mul65_5_cnn961_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_5_cnn961_im10_cma_a0),
        .coefsela(i_mul65_5_cnn961_im10_cma_c0),
        .resulta(i_mul65_5_cnn961_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_5_cnn961_im10_cma_delay ( .xin(i_mul65_5_cnn961_im10_cma_s0), .xout(i_mul65_5_cnn961_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_5_cnn961_im10_cma_q = i_mul65_5_cnn961_im10_cma_qq[29:0];

    // redist21_i_mul65_5_cnn961_im10_cma_q_1(DELAY,17938)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist21_i_mul65_5_cnn961_im10_cma_q_1_q <= i_mul65_5_cnn961_im10_cma_q;
        end
    end

    // i_mul65_5_cnn961_sums_align_1(BITSHIFT,3097)@761
    assign i_mul65_5_cnn961_sums_align_1_qint = { redist21_i_mul65_5_cnn961_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_5_cnn961_sums_align_1_q = i_mul65_5_cnn961_sums_align_1_qint[46:0];

    // i_mul65_5_cnn961_bjA17(BITJOIN,3093)@754
    assign i_mul65_5_cnn961_bjA17_q = {GND_q, i_mul65_5_cnn961_bs1_merged_bit_select_e};

    // i_mul65_5_cnn961_im15_cma(CHAINMULTADD,17848)@754 + 5
    // out q@760
    assign i_mul65_5_cnn961_im15_cma_reset = ~ (resetn);
    assign i_mul65_5_cnn961_im15_cma_ena0 = 1'b1;
    assign i_mul65_5_cnn961_im15_cma_ena1 = i_mul65_5_cnn961_im15_cma_ena0;
    assign i_mul65_5_cnn961_im15_cma_ena2 = i_mul65_5_cnn961_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_im15_cma_ah[0] <= i_mul65_5_cnn961_bjA17_q;
        end
    end

    assign i_mul65_5_cnn961_im15_cma_a0 = i_mul65_5_cnn961_im15_cma_ah[0];
    assign i_mul65_5_cnn961_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_5_cnn961_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_5_cnn961_im15_cma_ena2, i_mul65_5_cnn961_im15_cma_ena1, i_mul65_5_cnn961_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_5_cnn961_im15_cma_a0),
        .coefsela(i_mul65_5_cnn961_im15_cma_c0),
        .resulta(i_mul65_5_cnn961_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_5_cnn961_im15_cma_delay ( .xin(i_mul65_5_cnn961_im15_cma_s0), .xout(i_mul65_5_cnn961_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_5_cnn961_im15_cma_q = i_mul65_5_cnn961_im15_cma_qq[29:0];

    // redist20_i_mul65_5_cnn961_im15_cma_q_1(DELAY,17937)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist20_i_mul65_5_cnn961_im15_cma_q_1_q <= i_mul65_5_cnn961_im15_cma_q;
        end
    end

    // i_mul65_5_cnn961_sums_result_add_0_0(ADD,3103)@761 + 1
    assign i_mul65_5_cnn961_sums_result_add_0_0_a = {{18{redist20_i_mul65_5_cnn961_im15_cma_q_1_q[29]}}, redist20_i_mul65_5_cnn961_im15_cma_q_1_q};
    assign i_mul65_5_cnn961_sums_result_add_0_0_b = {{1{i_mul65_5_cnn961_sums_align_1_q[46]}}, i_mul65_5_cnn961_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_sums_result_add_0_0_o <= $signed(i_mul65_5_cnn961_sums_result_add_0_0_a) + $signed(i_mul65_5_cnn961_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_5_cnn961_sums_result_add_0_0_q = i_mul65_5_cnn961_sums_result_add_0_0_o[47:0];

    // i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11779)@762
    assign i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_5_cnn961_sums_result_add_0_0_q};

    // i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2(ADD,9469)@762 + 1
    assign i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_q = i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11791)@763
    assign i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11754)@761
    assign i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_5_cnn961_sums_align_5_q[74:74];

    // redist436_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18353)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist436_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11753)@761
    assign i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_5_cnn961_sums_align_5_q[74:70];

    // redist437_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18354)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist437_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11755)@762
    assign i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist436_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist437_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18355)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11750)@762
    assign i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist438_i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2(ADD,9459)@762 + 1
    assign i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_cin = i_mul65_5_cnn961_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_5_cnn961_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_q = i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11792)@763
    assign i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_5_cnn961_sums_result_add_0_1_p2_of_2_q};

    // redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18346)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11787)@763
    assign i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist429_i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2(ADD,9470)@763 + 1
    assign i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_cin = i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_5_cnn961_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_q = i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist744_i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_q_1(DELAY,18661)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist744_i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_5_cnn961_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9471)@764
    assign i_mul65_5_cnn961_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_5_cnn961_sums_result_add_1_0_p2_of_2_q, redist744_i_mul65_5_cnn961_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_5_cnn961_extender_x(BITJOIN,2735)@764
    assign i_mul65_5_cnn961_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_5_cnn961_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_5_cnn961_sel_x(BITSELECT,1057)@764
    assign bgTrunc_i_mul65_5_cnn961_sel_x_b = i_mul65_5_cnn961_extender_x_q[63:0];

    // i_mul65_5_cnn961_vt_select_63(BITSELECT,1018)@764
    assign i_mul65_5_cnn961_vt_select_63_b = bgTrunc_i_mul65_5_cnn961_sel_x_b[63:1];

    // i_mul65_5_cnn961_vt_join(BITJOIN,1017)@764
    assign i_mul65_5_cnn961_vt_join_q = {i_mul65_5_cnn961_vt_select_63_b, VCC_q};

    // i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select(BITSELECT,17906)@764
    assign i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_b = i_mul65_5_cnn961_vt_join_q[63:54];
    assign i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_c = i_mul65_5_cnn961_vt_join_q[53:36];
    assign i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_d = i_mul65_5_cnn961_vt_join_q[35:18];
    assign i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_e = i_mul65_5_cnn961_vt_join_q[17:0];

    // i_add_ptr66_5_cnn966_mult_x_bjA2(BITJOIN,3588)@764
    assign i_add_ptr66_5_cnn966_mult_x_bjA2_q = {GND_q, i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_5_cnn966_mult_x_im0_shift0(BITSHIFT,8180)@764
    assign i_add_ptr66_5_cnn966_mult_x_im0_shift0_qint = { i_add_ptr66_5_cnn966_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_5_cnn966_mult_x_im0_shift0_q = i_add_ptr66_5_cnn966_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_align_5(BITSHIFT,3611)@764
    assign i_add_ptr66_5_cnn966_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_5_cnn966_mult_x_im0_shift0_q[12]}}, i_add_ptr66_5_cnn966_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_5_cnn966_mult_x_sums_align_5_q = i_add_ptr66_5_cnn966_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_5_cnn966_mult_x_bjA7(BITJOIN,3593)@764
    assign i_add_ptr66_5_cnn966_mult_x_bjA7_q = {GND_q, i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_5_cnn966_mult_x_im5_shift0(BITSHIFT,8181)@764
    assign i_add_ptr66_5_cnn966_mult_x_im5_shift0_qint = { i_add_ptr66_5_cnn966_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_5_cnn966_mult_x_im5_shift0_q = i_add_ptr66_5_cnn966_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_align_3(BITSHIFT,3609)@764
    assign i_add_ptr66_5_cnn966_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_5_cnn966_mult_x_im5_shift0_q[20]}}, i_add_ptr66_5_cnn966_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_5_cnn966_mult_x_sums_align_3_q = i_add_ptr66_5_cnn966_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1(ADD,3614)@764 + 1
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_5_cnn966_mult_x_sums_align_3_q[58]}}, i_add_ptr66_5_cnn966_mult_x_sums_align_3_q};
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_5_cnn966_mult_x_sums_align_5_q[68]}}, i_add_ptr66_5_cnn966_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_q = i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12470)@765
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_5_cnn966_mult_x_bjA12(BITJOIN,3598)@764
    assign i_add_ptr66_5_cnn966_mult_x_bjA12_q = {GND_q, i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_5_cnn966_mult_x_im10_shift0(BITSHIFT,8182)@764
    assign i_add_ptr66_5_cnn966_mult_x_im10_shift0_qint = { i_add_ptr66_5_cnn966_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_5_cnn966_mult_x_im10_shift0_q = i_add_ptr66_5_cnn966_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_align_1(BITSHIFT,3607)@764
    assign i_add_ptr66_5_cnn966_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_5_cnn966_mult_x_im10_shift0_q[20]}}, i_add_ptr66_5_cnn966_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_5_cnn966_mult_x_sums_align_1_q = i_add_ptr66_5_cnn966_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_5_cnn966_mult_x_bjA17(BITJOIN,3603)@764
    assign i_add_ptr66_5_cnn966_mult_x_bjA17_q = {GND_q, i_add_ptr66_5_cnn966_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_5_cnn966_mult_x_im15_shift0(BITSHIFT,8183)@764
    assign i_add_ptr66_5_cnn966_mult_x_im15_shift0_qint = { i_add_ptr66_5_cnn966_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_5_cnn966_mult_x_im15_shift0_q = i_add_ptr66_5_cnn966_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0(ADD,3613)@764 + 1
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_5_cnn966_mult_x_im15_shift0_q[20]}}, i_add_ptr66_5_cnn966_mult_x_im15_shift0_q};
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_5_cnn966_mult_x_sums_align_1_q[40]}}, i_add_ptr66_5_cnn966_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_q = i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12498)@765
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2(ADD,9711)@765 + 1
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12503)@765
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_5_cnn966_mult_x_sums_result_add_0_1_q[69:69];

    // redist330_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18247)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist330_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist331_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18248)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist331_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2(ADD,9712)@766 + 1
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist331_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist331_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist330_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist330_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist727_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18644)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist727_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9713)@767
    assign i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p2_of_2_q, redist727_i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_5_cnn966_mult_extender_x(BITJOIN,1377)@767
    assign i_add_ptr66_5_cnn966_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_5_cnn966_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_5_cnn966_trunc_sel_x(BITSELECT,1379)@767
    assign i_add_ptr66_5_cnn966_trunc_sel_x_b = i_add_ptr66_5_cnn966_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962(BLACKBOX,722)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_963 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_select_63(BITSELECT,725)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_join(BITJOIN,724)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_5_cnn966_add_x(ADD,1371)@767
    assign i_add_ptr66_5_cnn966_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer9_cnn962_vt_join_q};
    assign i_add_ptr66_5_cnn966_add_x_b = {1'b0, i_add_ptr66_5_cnn966_trunc_sel_x_b};
    assign i_add_ptr66_5_cnn966_add_x_o = $unsigned(i_add_ptr66_5_cnn966_add_x_a) + $unsigned(i_add_ptr66_5_cnn966_add_x_b);
    assign i_add_ptr66_5_cnn966_add_x_q = i_add_ptr66_5_cnn966_add_x_o[64:0];

    // i_add_ptr66_5_cnn966_dupName_0_trunc_sel_x(BITSELECT,1380)@767
    assign i_add_ptr66_5_cnn966_dupName_0_trunc_sel_x_b = i_add_ptr66_5_cnn966_add_x_q[63:0];

    // i_add_ptr66_5_cnn965_vt_select_63(BITSELECT,84)@767
    assign i_add_ptr66_5_cnn965_vt_select_63_b = i_add_ptr66_5_cnn966_dupName_0_trunc_sel_x_b[63:3];

    // redist868_i_add_ptr66_5_cnn965_vt_select_63_b_1(DELAY,18785)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist868_i_add_ptr66_5_cnn965_vt_select_63_b_1_q <= i_add_ptr66_5_cnn965_vt_select_63_b;
        end
    end

    // i_add_ptr66_5_cnn965_vt_join(BITJOIN,83)@768
    assign i_add_ptr66_5_cnn965_vt_join_q = {redist868_i_add_ptr66_5_cnn965_vt_select_63_b_1_q, i_add_ptr66_13_cnn1277_vt_const_2_q};

    // i_add_ptr70_3_5_cnn992_add_x(ADD,1941)@768
    assign i_add_ptr70_3_5_cnn992_add_x_a = {1'b0, i_add_ptr66_5_cnn965_vt_join_q};
    assign i_add_ptr70_3_5_cnn992_add_x_b = {1'b0, i_add_ptr70_3_5_cnn992_trunc_sel_x_b};
    assign i_add_ptr70_3_5_cnn992_add_x_o = $unsigned(i_add_ptr70_3_5_cnn992_add_x_a) + $unsigned(i_add_ptr70_3_5_cnn992_add_x_b);
    assign i_add_ptr70_3_5_cnn992_add_x_q = i_add_ptr70_3_5_cnn992_add_x_o[64:0];

    // i_add_ptr70_3_5_cnn992_dupName_0_trunc_sel_x(BITSELECT,1950)@768
    assign i_add_ptr70_3_5_cnn992_dupName_0_trunc_sel_x_b = i_add_ptr70_3_5_cnn992_add_x_q[63:0];

    // i_add_ptr70_3_5_cnn991_vt_select_63(BITSELECT,255)@768
    assign i_add_ptr70_3_5_cnn991_vt_select_63_b = i_add_ptr70_3_5_cnn992_dupName_0_trunc_sel_x_b[63:2];

    // redist811_i_add_ptr70_3_5_cnn991_vt_select_63_b_1(DELAY,18728)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist811_i_add_ptr70_3_5_cnn991_vt_select_63_b_1_q <= i_add_ptr70_3_5_cnn991_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_5_cnn991_vt_join(BITJOIN,254)@769
    assign i_add_ptr70_3_5_cnn991_vt_join_q = {redist811_i_add_ptr70_3_5_cnn991_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_5_cnn994_add_x(ADD,2581)@769
    assign i_add_ptr73_371_5_cnn994_add_x_a = {1'b0, i_add_ptr70_3_5_cnn991_vt_join_q};
    assign i_add_ptr73_371_5_cnn994_add_x_b = {1'b0, i_add_ptr73_371_5_cnn994_trunc_sel_x_b};
    assign i_add_ptr73_371_5_cnn994_add_x_o = $unsigned(i_add_ptr73_371_5_cnn994_add_x_a) + $unsigned(i_add_ptr73_371_5_cnn994_add_x_b);
    assign i_add_ptr73_371_5_cnn994_add_x_q = i_add_ptr73_371_5_cnn994_add_x_o[64:0];

    // i_add_ptr73_371_5_cnn994_dupName_0_trunc_sel_x(BITSELECT,2590)@769
    assign i_add_ptr73_371_5_cnn994_dupName_0_trunc_sel_x_b = i_add_ptr73_371_5_cnn994_add_x_q[63:0];

    // i_add_ptr73_371_5_cnn993_vt_select_63(BITSELECT,447)@769
    assign i_add_ptr73_371_5_cnn993_vt_select_63_b = i_add_ptr73_371_5_cnn994_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_5_cnn993_vt_join(BITJOIN,446)@769
    assign i_add_ptr73_371_5_cnn993_vt_join_q = {i_add_ptr73_371_5_cnn993_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_select_63(BITSELECT,794)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_select_63_b = i_add_ptr73_371_5_cnn993_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_join(BITJOIN,793)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn131_cnn988(BLACKBOX,595)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_131_cnn989 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn131_cnn988 (
        .in_intel_reserved_ffwd_50_0(in_intel_reserved_ffwd_50_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_50_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn131_cnn988_out_dest_data_out_50_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_5_cnn986_mult_x_im0_shift0(BITSHIFT,8592)@766
    assign i_add_ptr73_270_5_cnn986_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_5_cnn986_mult_x_im0_shift0_q = i_add_ptr73_270_5_cnn986_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_align_5(BITSHIFT,6701)@766
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_5_cnn986_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_5_cnn986_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_align_5_q = i_add_ptr73_270_5_cnn986_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_5_cnn986_mult_x_im5_shift0(BITSHIFT,8593)@766
    assign i_add_ptr73_270_5_cnn986_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_5_cnn986_mult_x_im5_shift0_q = i_add_ptr73_270_5_cnn986_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_align_3(BITSHIFT,6699)@766
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_5_cnn986_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_5_cnn986_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_align_3_q = i_add_ptr73_270_5_cnn986_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1(ADD,6704)@766 + 1
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_5_cnn986_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_5_cnn986_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_5_cnn986_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_5_cnn986_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16178)@767
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_5_cnn986_mult_x_im10_shift0(BITSHIFT,8594)@766
    assign i_add_ptr73_270_5_cnn986_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_5_cnn986_mult_x_im10_shift0_q = i_add_ptr73_270_5_cnn986_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_align_1(BITSHIFT,6697)@766
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_5_cnn986_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_5_cnn986_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_align_1_q = i_add_ptr73_270_5_cnn986_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_5_cnn986_mult_x_im15_shift0(BITSHIFT,8595)@766
    assign i_add_ptr73_270_5_cnn986_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_5_cnn986_mult_x_im15_shift0_q = i_add_ptr73_270_5_cnn986_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0(ADD,6703)@766 + 1
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_5_cnn986_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_5_cnn986_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_5_cnn986_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_5_cnn986_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16206)@767
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2(ADD,10844)@767 + 1
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16211)@767
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_0_1_q[69:69];

    // redist124_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18041)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist124_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist125_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18042)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist125_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2(ADD,10845)@768 + 1
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist125_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist125_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist124_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist124_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist624_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18541)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist624_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10846)@769
    assign i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p2_of_2_q, redist624_i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_5_cnn986_mult_extender_x(BITJOIN,2407)@769
    assign i_add_ptr73_270_5_cnn986_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_5_cnn986_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_5_cnn986_trunc_sel_x(BITSELECT,2409)@769
    assign i_add_ptr73_270_5_cnn986_trunc_sel_x_b = i_add_ptr73_270_5_cnn986_mult_extender_x_q[63:0];

    // i_add_ptr70_2_5_cnn984_mult_x_im0_shift0(BITSHIFT,8340)@765
    assign i_add_ptr70_2_5_cnn984_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_5_cnn984_mult_x_im0_shift0_q = i_add_ptr70_2_5_cnn984_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_align_5(BITSHIFT,4811)@765
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_5_cnn984_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_5_cnn984_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_align_5_q = i_add_ptr70_2_5_cnn984_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_5_cnn984_mult_x_im5_shift0(BITSHIFT,8341)@765
    assign i_add_ptr70_2_5_cnn984_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_5_cnn984_mult_x_im5_shift0_q = i_add_ptr70_2_5_cnn984_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_align_3(BITSHIFT,4809)@765
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_5_cnn984_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_5_cnn984_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_align_3_q = i_add_ptr70_2_5_cnn984_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1(ADD,4814)@765 + 1
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_5_cnn984_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_5_cnn984_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_5_cnn984_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_5_cnn984_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13910)@766
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_5_cnn984_mult_x_im10_shift0(BITSHIFT,8342)@765
    assign i_add_ptr70_2_5_cnn984_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_5_cnn984_mult_x_im10_shift0_q = i_add_ptr70_2_5_cnn984_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_align_1(BITSHIFT,4807)@765
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_5_cnn984_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_5_cnn984_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_align_1_q = i_add_ptr70_2_5_cnn984_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_5_cnn984_mult_x_im15_shift0(BITSHIFT,8343)@765
    assign i_add_ptr70_2_5_cnn984_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_5_cnn984_mult_x_im15_shift0_q = i_add_ptr70_2_5_cnn984_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0(ADD,4813)@765 + 1
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_5_cnn984_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_5_cnn984_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_5_cnn984_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_5_cnn984_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13938)@766
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2(ADD,10151)@766 + 1
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13943)@766
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_0_1_q[69:69];

    // redist250_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18167)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist250_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist251_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18168)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist251_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2(ADD,10152)@767 + 1
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist251_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist251_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist250_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist250_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist687_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18604)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist687_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10153)@768
    assign i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p2_of_2_q, redist687_i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_5_cnn984_mult_extender_x(BITJOIN,1777)@768
    assign i_add_ptr70_2_5_cnn984_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_5_cnn984_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_5_cnn984_trunc_sel_x(BITSELECT,1779)@768
    assign i_add_ptr70_2_5_cnn984_trunc_sel_x_b = i_add_ptr70_2_5_cnn984_mult_extender_x_q[63:0];

    // i_add_ptr70_2_5_cnn984_add_x(ADD,1771)@768
    assign i_add_ptr70_2_5_cnn984_add_x_a = {1'b0, i_add_ptr66_5_cnn965_vt_join_q};
    assign i_add_ptr70_2_5_cnn984_add_x_b = {1'b0, i_add_ptr70_2_5_cnn984_trunc_sel_x_b};
    assign i_add_ptr70_2_5_cnn984_add_x_o = $unsigned(i_add_ptr70_2_5_cnn984_add_x_a) + $unsigned(i_add_ptr70_2_5_cnn984_add_x_b);
    assign i_add_ptr70_2_5_cnn984_add_x_q = i_add_ptr70_2_5_cnn984_add_x_o[64:0];

    // i_add_ptr70_2_5_cnn984_dupName_0_trunc_sel_x(BITSELECT,1780)@768
    assign i_add_ptr70_2_5_cnn984_dupName_0_trunc_sel_x_b = i_add_ptr70_2_5_cnn984_add_x_q[63:0];

    // i_add_ptr70_2_5_cnn983_vt_select_63(BITSELECT,204)@768
    assign i_add_ptr70_2_5_cnn983_vt_select_63_b = i_add_ptr70_2_5_cnn984_dupName_0_trunc_sel_x_b[63:2];

    // redist828_i_add_ptr70_2_5_cnn983_vt_select_63_b_1(DELAY,18745)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist828_i_add_ptr70_2_5_cnn983_vt_select_63_b_1_q <= i_add_ptr70_2_5_cnn983_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_5_cnn983_vt_join(BITJOIN,203)@769
    assign i_add_ptr70_2_5_cnn983_vt_join_q = {redist828_i_add_ptr70_2_5_cnn983_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_5_cnn986_add_x(ADD,2401)@769
    assign i_add_ptr73_270_5_cnn986_add_x_a = {1'b0, i_add_ptr70_2_5_cnn983_vt_join_q};
    assign i_add_ptr73_270_5_cnn986_add_x_b = {1'b0, i_add_ptr73_270_5_cnn986_trunc_sel_x_b};
    assign i_add_ptr73_270_5_cnn986_add_x_o = $unsigned(i_add_ptr73_270_5_cnn986_add_x_a) + $unsigned(i_add_ptr73_270_5_cnn986_add_x_b);
    assign i_add_ptr73_270_5_cnn986_add_x_q = i_add_ptr73_270_5_cnn986_add_x_o[64:0];

    // i_add_ptr73_270_5_cnn986_dupName_0_trunc_sel_x(BITSELECT,2410)@769
    assign i_add_ptr73_270_5_cnn986_dupName_0_trunc_sel_x_b = i_add_ptr73_270_5_cnn986_add_x_q[63:0];

    // i_add_ptr73_270_5_cnn985_vt_select_63(BITSELECT,393)@769
    assign i_add_ptr73_270_5_cnn985_vt_select_63_b = i_add_ptr73_270_5_cnn986_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_5_cnn985_vt_join(BITJOIN,392)@769
    assign i_add_ptr73_270_5_cnn985_vt_join_q = {i_add_ptr73_270_5_cnn985_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_select_63(BITSELECT,790)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_select_63_b = i_add_ptr73_270_5_cnn985_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_join(BITJOIN,789)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn130_cnn980(BLACKBOX,594)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_130_cnn981 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn130_cnn980 (
        .in_intel_reserved_ffwd_49_0(in_intel_reserved_ffwd_49_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_49_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn130_cnn980_out_dest_data_out_49_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_5_cnn978_mult_x_im0_shift0(BITSHIFT,8524)@766
    assign i_add_ptr73_169_5_cnn978_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_5_cnn978_mult_x_im0_shift0_q = i_add_ptr73_169_5_cnn978_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_align_5(BITSHIFT,6191)@766
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_5_cnn978_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_5_cnn978_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_align_5_q = i_add_ptr73_169_5_cnn978_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_5_cnn978_mult_x_im5_shift0(BITSHIFT,8525)@766
    assign i_add_ptr73_169_5_cnn978_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_5_cnn978_mult_x_im5_shift0_q = i_add_ptr73_169_5_cnn978_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_align_3(BITSHIFT,6189)@766
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_5_cnn978_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_5_cnn978_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_align_3_q = i_add_ptr73_169_5_cnn978_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1(ADD,6194)@766 + 1
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_5_cnn978_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_5_cnn978_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_5_cnn978_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_5_cnn978_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15566)@767
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_5_cnn978_mult_x_im10_shift0(BITSHIFT,8526)@766
    assign i_add_ptr73_169_5_cnn978_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_5_cnn978_mult_x_im10_shift0_q = i_add_ptr73_169_5_cnn978_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_align_1(BITSHIFT,6187)@766
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_5_cnn978_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_5_cnn978_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_align_1_q = i_add_ptr73_169_5_cnn978_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_5_cnn978_mult_x_im15_shift0(BITSHIFT,8527)@766
    assign i_add_ptr73_169_5_cnn978_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_5_cnn978_mult_x_im15_shift0_q = i_add_ptr73_169_5_cnn978_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0(ADD,6193)@766 + 1
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_5_cnn978_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_5_cnn978_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_5_cnn978_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_5_cnn978_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15594)@767
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2(ADD,10657)@767 + 1
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15599)@767
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_0_1_q[69:69];

    // redist158_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18075)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist158_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist159_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18076)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist159_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2(ADD,10658)@768 + 1
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist159_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist159_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist158_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist158_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist641_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18558)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist641_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10659)@769
    assign i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p2_of_2_q, redist641_i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_5_cnn978_mult_extender_x(BITJOIN,2237)@769
    assign i_add_ptr73_169_5_cnn978_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_5_cnn978_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_5_cnn978_trunc_sel_x(BITSELECT,2239)@769
    assign i_add_ptr73_169_5_cnn978_trunc_sel_x_b = i_add_ptr73_169_5_cnn978_mult_extender_x_q[63:0];

    // i_add_ptr70_1_5_cnn976_mult_x_im0_shift0(BITSHIFT,8272)@765
    assign i_add_ptr70_1_5_cnn976_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_5_cnn976_mult_x_im0_shift0_q = i_add_ptr70_1_5_cnn976_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_align_5(BITSHIFT,4301)@765
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_5_cnn976_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_5_cnn976_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_align_5_q = i_add_ptr70_1_5_cnn976_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_5_cnn976_mult_x_im5_shift0(BITSHIFT,8273)@765
    assign i_add_ptr70_1_5_cnn976_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_5_cnn976_mult_x_im5_shift0_q = i_add_ptr70_1_5_cnn976_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_align_3(BITSHIFT,4299)@765
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_5_cnn976_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_5_cnn976_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_align_3_q = i_add_ptr70_1_5_cnn976_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1(ADD,4304)@765 + 1
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_5_cnn976_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_5_cnn976_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_5_cnn976_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_5_cnn976_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13298)@766
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_5_cnn976_mult_x_im10_shift0(BITSHIFT,8274)@765
    assign i_add_ptr70_1_5_cnn976_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_5_cnn976_mult_x_im10_shift0_q = i_add_ptr70_1_5_cnn976_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_align_1(BITSHIFT,4297)@765
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_5_cnn976_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_5_cnn976_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_align_1_q = i_add_ptr70_1_5_cnn976_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_5_cnn976_mult_x_im15_shift0(BITSHIFT,8275)@765
    assign i_add_ptr70_1_5_cnn976_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_5_cnn976_mult_x_im15_shift0_q = i_add_ptr70_1_5_cnn976_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0(ADD,4303)@765 + 1
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_5_cnn976_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_5_cnn976_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_5_cnn976_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_5_cnn976_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13326)@766
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2(ADD,9964)@766 + 1
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13331)@766
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_0_1_q[69:69];

    // redist284_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18201)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist284_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist285_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18202)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist285_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2(ADD,9965)@767 + 1
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist285_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist285_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist284_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist284_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist704_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18621)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist704_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9966)@768
    assign i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p2_of_2_q, redist704_i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_5_cnn976_mult_extender_x(BITJOIN,1607)@768
    assign i_add_ptr70_1_5_cnn976_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_5_cnn976_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_5_cnn976_trunc_sel_x(BITSELECT,1609)@768
    assign i_add_ptr70_1_5_cnn976_trunc_sel_x_b = i_add_ptr70_1_5_cnn976_mult_extender_x_q[63:0];

    // i_add_ptr70_1_5_cnn976_add_x(ADD,1601)@768
    assign i_add_ptr70_1_5_cnn976_add_x_a = {1'b0, i_add_ptr66_5_cnn965_vt_join_q};
    assign i_add_ptr70_1_5_cnn976_add_x_b = {1'b0, i_add_ptr70_1_5_cnn976_trunc_sel_x_b};
    assign i_add_ptr70_1_5_cnn976_add_x_o = $unsigned(i_add_ptr70_1_5_cnn976_add_x_a) + $unsigned(i_add_ptr70_1_5_cnn976_add_x_b);
    assign i_add_ptr70_1_5_cnn976_add_x_q = i_add_ptr70_1_5_cnn976_add_x_o[64:0];

    // i_add_ptr70_1_5_cnn976_dupName_0_trunc_sel_x(BITSELECT,1610)@768
    assign i_add_ptr70_1_5_cnn976_dupName_0_trunc_sel_x_b = i_add_ptr70_1_5_cnn976_add_x_q[63:0];

    // i_add_ptr70_1_5_cnn975_vt_select_63(BITSELECT,153)@768
    assign i_add_ptr70_1_5_cnn975_vt_select_63_b = i_add_ptr70_1_5_cnn976_dupName_0_trunc_sel_x_b[63:2];

    // redist845_i_add_ptr70_1_5_cnn975_vt_select_63_b_1(DELAY,18762)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist845_i_add_ptr70_1_5_cnn975_vt_select_63_b_1_q <= i_add_ptr70_1_5_cnn975_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_5_cnn975_vt_join(BITJOIN,152)@769
    assign i_add_ptr70_1_5_cnn975_vt_join_q = {redist845_i_add_ptr70_1_5_cnn975_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_5_cnn978_add_x(ADD,2231)@769
    assign i_add_ptr73_169_5_cnn978_add_x_a = {1'b0, i_add_ptr70_1_5_cnn975_vt_join_q};
    assign i_add_ptr73_169_5_cnn978_add_x_b = {1'b0, i_add_ptr73_169_5_cnn978_trunc_sel_x_b};
    assign i_add_ptr73_169_5_cnn978_add_x_o = $unsigned(i_add_ptr73_169_5_cnn978_add_x_a) + $unsigned(i_add_ptr73_169_5_cnn978_add_x_b);
    assign i_add_ptr73_169_5_cnn978_add_x_q = i_add_ptr73_169_5_cnn978_add_x_o[64:0];

    // i_add_ptr73_169_5_cnn978_dupName_0_trunc_sel_x(BITSELECT,2240)@769
    assign i_add_ptr73_169_5_cnn978_dupName_0_trunc_sel_x_b = i_add_ptr73_169_5_cnn978_add_x_q[63:0];

    // i_add_ptr73_169_5_cnn977_vt_select_63(BITSELECT,342)@769
    assign i_add_ptr73_169_5_cnn977_vt_select_63_b = i_add_ptr73_169_5_cnn978_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_5_cnn977_vt_join(BITJOIN,341)@769
    assign i_add_ptr73_169_5_cnn977_vt_join_q = {i_add_ptr73_169_5_cnn977_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_select_63(BITSELECT,786)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_select_63_b = i_add_ptr73_169_5_cnn977_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_join(BITJOIN,785)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn129_cnn972(BLACKBOX,593)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_129_cnn973 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn129_cnn972 (
        .in_intel_reserved_ffwd_48_0(in_intel_reserved_ffwd_48_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_48_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn129_cnn972_out_dest_data_out_48_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_5_cnn970_mult_x_im0_shift0(BITSHIFT,8692)@766
    assign i_add_ptr73_5_cnn970_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_5_cnn970_mult_x_im0_shift0_q = i_add_ptr73_5_cnn970_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_align_5(BITSHIFT,7451)@766
    assign i_add_ptr73_5_cnn970_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_5_cnn970_mult_x_im0_shift0_q[12]}}, i_add_ptr73_5_cnn970_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_5_cnn970_mult_x_sums_align_5_q = i_add_ptr73_5_cnn970_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_5_cnn970_mult_x_im5_shift0(BITSHIFT,8693)@766
    assign i_add_ptr73_5_cnn970_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_5_cnn970_mult_x_im5_shift0_q = i_add_ptr73_5_cnn970_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_align_3(BITSHIFT,7449)@766
    assign i_add_ptr73_5_cnn970_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_5_cnn970_mult_x_im5_shift0_q[20]}}, i_add_ptr73_5_cnn970_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_5_cnn970_mult_x_sums_align_3_q = i_add_ptr73_5_cnn970_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1(ADD,7454)@766 + 1
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_5_cnn970_mult_x_sums_align_3_q[58]}}, i_add_ptr73_5_cnn970_mult_x_sums_align_3_q};
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_5_cnn970_mult_x_sums_align_5_q[68]}}, i_add_ptr73_5_cnn970_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_q = i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17078)@767
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_5_cnn970_mult_x_im10_shift0(BITSHIFT,8694)@766
    assign i_add_ptr73_5_cnn970_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_5_cnn970_mult_x_im10_shift0_q = i_add_ptr73_5_cnn970_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_align_1(BITSHIFT,7447)@766
    assign i_add_ptr73_5_cnn970_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_5_cnn970_mult_x_im10_shift0_q[20]}}, i_add_ptr73_5_cnn970_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_5_cnn970_mult_x_sums_align_1_q = i_add_ptr73_5_cnn970_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_5_cnn970_mult_x_im15_shift0(BITSHIFT,8695)@766
    assign i_add_ptr73_5_cnn970_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_5_cnn970_mult_x_im15_shift0_q = i_add_ptr73_5_cnn970_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0(ADD,7453)@766 + 1
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_5_cnn970_mult_x_im15_shift0_q[20]}}, i_add_ptr73_5_cnn970_mult_x_im15_shift0_q};
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_5_cnn970_mult_x_sums_align_1_q[40]}}, i_add_ptr73_5_cnn970_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_q = i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17106)@767
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2(ADD,11119)@767 + 1
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17111)@767
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_5_cnn970_mult_x_sums_result_add_0_1_q[69:69];

    // redist74_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17991)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist74_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist75_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17992)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist75_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2(ADD,11120)@768 + 1
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist75_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist75_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist74_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist74_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist599_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18516)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist599_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11121)@769
    assign i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p2_of_2_q, redist599_i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_5_cnn970_mult_extender_x(BITJOIN,2657)@769
    assign i_add_ptr73_5_cnn970_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_5_cnn970_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_5_cnn970_trunc_sel_x(BITSELECT,2659)@769
    assign i_add_ptr73_5_cnn970_trunc_sel_x_b = i_add_ptr73_5_cnn970_mult_extender_x_q[63:0];

    // i_add_ptr70_5_cnn968_mult_x_im0_shift0(BITSHIFT,8436)@765
    assign i_add_ptr70_5_cnn968_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_5_cnn968_mult_x_im0_shift0_q = i_add_ptr70_5_cnn968_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_align_5(BITSHIFT,5531)@765
    assign i_add_ptr70_5_cnn968_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_5_cnn968_mult_x_im0_shift0_q[12]}}, i_add_ptr70_5_cnn968_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_5_cnn968_mult_x_sums_align_5_q = i_add_ptr70_5_cnn968_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_5_cnn968_mult_x_im5_shift0(BITSHIFT,8437)@765
    assign i_add_ptr70_5_cnn968_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_5_cnn968_mult_x_im5_shift0_q = i_add_ptr70_5_cnn968_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_align_3(BITSHIFT,5529)@765
    assign i_add_ptr70_5_cnn968_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_5_cnn968_mult_x_im5_shift0_q[20]}}, i_add_ptr70_5_cnn968_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_5_cnn968_mult_x_sums_align_3_q = i_add_ptr70_5_cnn968_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1(ADD,5534)@765 + 1
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_5_cnn968_mult_x_sums_align_3_q[58]}}, i_add_ptr70_5_cnn968_mult_x_sums_align_3_q};
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_5_cnn968_mult_x_sums_align_5_q[68]}}, i_add_ptr70_5_cnn968_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_q = i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14774)@766
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_5_cnn968_mult_x_im10_shift0(BITSHIFT,8438)@765
    assign i_add_ptr70_5_cnn968_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_5_cnn968_mult_x_im10_shift0_q = i_add_ptr70_5_cnn968_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_align_1(BITSHIFT,5527)@765
    assign i_add_ptr70_5_cnn968_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_5_cnn968_mult_x_im10_shift0_q[20]}}, i_add_ptr70_5_cnn968_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_5_cnn968_mult_x_sums_align_1_q = i_add_ptr70_5_cnn968_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_5_cnn968_mult_x_im15_shift0(BITSHIFT,8439)@765
    assign i_add_ptr70_5_cnn968_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_5_cnn968_mult_x_im15_shift0_q = i_add_ptr70_5_cnn968_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0(ADD,5533)@765 + 1
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_5_cnn968_mult_x_im15_shift0_q[20]}}, i_add_ptr70_5_cnn968_mult_x_im15_shift0_q};
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_5_cnn968_mult_x_sums_align_1_q[40]}}, i_add_ptr70_5_cnn968_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_q = i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14802)@766
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2(ADD,10415)@766 + 1
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14807)@766
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_5_cnn968_mult_x_sums_result_add_0_1_q[69:69];

    // redist202_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18119)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist202_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist203_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18120)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist203_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2(ADD,10416)@767 + 1
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist203_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist203_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist202_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist202_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist663_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18580)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist663_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10417)@768
    assign i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p2_of_2_q, redist663_i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_5_cnn968_mult_extender_x(BITJOIN,2017)@768
    assign i_add_ptr70_5_cnn968_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_5_cnn968_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_5_cnn968_trunc_sel_x(BITSELECT,2019)@768
    assign i_add_ptr70_5_cnn968_trunc_sel_x_b = i_add_ptr70_5_cnn968_mult_extender_x_q[63:0];

    // i_add_ptr70_5_cnn968_add_x(ADD,2011)@768
    assign i_add_ptr70_5_cnn968_add_x_a = {1'b0, i_add_ptr66_5_cnn965_vt_join_q};
    assign i_add_ptr70_5_cnn968_add_x_b = {1'b0, i_add_ptr70_5_cnn968_trunc_sel_x_b};
    assign i_add_ptr70_5_cnn968_add_x_o = $unsigned(i_add_ptr70_5_cnn968_add_x_a) + $unsigned(i_add_ptr70_5_cnn968_add_x_b);
    assign i_add_ptr70_5_cnn968_add_x_q = i_add_ptr70_5_cnn968_add_x_o[64:0];

    // i_add_ptr70_5_cnn968_dupName_0_trunc_sel_x(BITSELECT,2020)@768
    assign i_add_ptr70_5_cnn968_dupName_0_trunc_sel_x_b = i_add_ptr70_5_cnn968_add_x_q[63:0];

    // i_add_ptr70_5_cnn967_vt_select_63(BITSELECT,276)@768
    assign i_add_ptr70_5_cnn967_vt_select_63_b = i_add_ptr70_5_cnn968_dupName_0_trunc_sel_x_b[63:2];

    // redist804_i_add_ptr70_5_cnn967_vt_select_63_b_1(DELAY,18721)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist804_i_add_ptr70_5_cnn967_vt_select_63_b_1_q <= i_add_ptr70_5_cnn967_vt_select_63_b;
        end
    end

    // i_add_ptr70_5_cnn967_vt_join(BITJOIN,275)@769
    assign i_add_ptr70_5_cnn967_vt_join_q = {redist804_i_add_ptr70_5_cnn967_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_5_cnn970_add_x(ADD,2651)@769
    assign i_add_ptr73_5_cnn970_add_x_a = {1'b0, i_add_ptr70_5_cnn967_vt_join_q};
    assign i_add_ptr73_5_cnn970_add_x_b = {1'b0, i_add_ptr73_5_cnn970_trunc_sel_x_b};
    assign i_add_ptr73_5_cnn970_add_x_o = $unsigned(i_add_ptr73_5_cnn970_add_x_a) + $unsigned(i_add_ptr73_5_cnn970_add_x_b);
    assign i_add_ptr73_5_cnn970_add_x_q = i_add_ptr73_5_cnn970_add_x_o[64:0];

    // i_add_ptr73_5_cnn970_dupName_0_trunc_sel_x(BITSELECT,2660)@769
    assign i_add_ptr73_5_cnn970_dupName_0_trunc_sel_x_b = i_add_ptr73_5_cnn970_add_x_q[63:0];

    // i_add_ptr73_5_cnn969_vt_select_63(BITSELECT,468)@769
    assign i_add_ptr73_5_cnn969_vt_select_63_b = i_add_ptr73_5_cnn970_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_5_cnn969_vt_join(BITJOIN,467)@769
    assign i_add_ptr73_5_cnn969_vt_join_q = {i_add_ptr73_5_cnn969_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_select_63(BITSELECT,782)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_select_63_b = i_add_ptr73_5_cnn969_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_join(BITJOIN,781)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn128_cnn957(BLACKBOX,592)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_128_cnn958 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn128_cnn957 (
        .in_intel_reserved_ffwd_47_0(in_intel_reserved_ffwd_47_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_47_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn128_cnn957_out_dest_data_out_47_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_4_cnn955_mult_x_im0_shift0(BITSHIFT,8660)@766
    assign i_add_ptr73_371_4_cnn955_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_4_cnn955_mult_x_im0_shift0_q = i_add_ptr73_371_4_cnn955_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_align_5(BITSHIFT,7211)@766
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_4_cnn955_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_4_cnn955_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_align_5_q = i_add_ptr73_371_4_cnn955_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_4_cnn955_mult_x_im5_shift0(BITSHIFT,8661)@766
    assign i_add_ptr73_371_4_cnn955_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_4_cnn955_mult_x_im5_shift0_q = i_add_ptr73_371_4_cnn955_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_align_3(BITSHIFT,7209)@766
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_4_cnn955_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_4_cnn955_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_align_3_q = i_add_ptr73_371_4_cnn955_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1(ADD,7214)@766 + 1
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_4_cnn955_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_4_cnn955_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_4_cnn955_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_4_cnn955_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16790)@767
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_4_cnn955_mult_x_im10_shift0(BITSHIFT,8662)@766
    assign i_add_ptr73_371_4_cnn955_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_4_cnn955_mult_x_im10_shift0_q = i_add_ptr73_371_4_cnn955_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_align_1(BITSHIFT,7207)@766
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_4_cnn955_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_4_cnn955_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_align_1_q = i_add_ptr73_371_4_cnn955_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_4_cnn955_mult_x_im15_shift0(BITSHIFT,8663)@766
    assign i_add_ptr73_371_4_cnn955_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_4_cnn955_mult_x_im15_shift0_q = i_add_ptr73_371_4_cnn955_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0(ADD,7213)@766 + 1
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_4_cnn955_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_4_cnn955_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_4_cnn955_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_4_cnn955_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16818)@767
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2(ADD,11031)@767 + 1
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16823)@767
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_0_1_q[69:69];

    // redist90_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18007)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist90_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist91_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18008)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist91_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2(ADD,11032)@768 + 1
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist91_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist91_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist90_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist90_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist607_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18524)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist607_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11033)@769
    assign i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p2_of_2_q, redist607_i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_4_cnn955_mult_extender_x(BITJOIN,2577)@769
    assign i_add_ptr73_371_4_cnn955_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_4_cnn955_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_4_cnn955_trunc_sel_x(BITSELECT,2579)@769
    assign i_add_ptr73_371_4_cnn955_trunc_sel_x_b = i_add_ptr73_371_4_cnn955_mult_extender_x_q[63:0];

    // i_add_ptr70_3_4_cnn953_mult_x_im0_shift0(BITSHIFT,8404)@765
    assign i_add_ptr70_3_4_cnn953_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_4_cnn953_mult_x_im0_shift0_q = i_add_ptr70_3_4_cnn953_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_align_5(BITSHIFT,5291)@765
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_4_cnn953_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_4_cnn953_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_align_5_q = i_add_ptr70_3_4_cnn953_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_4_cnn953_mult_x_im5_shift0(BITSHIFT,8405)@765
    assign i_add_ptr70_3_4_cnn953_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_4_cnn953_mult_x_im5_shift0_q = i_add_ptr70_3_4_cnn953_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_align_3(BITSHIFT,5289)@765
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_4_cnn953_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_4_cnn953_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_align_3_q = i_add_ptr70_3_4_cnn953_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1(ADD,5294)@765 + 1
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_4_cnn953_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_4_cnn953_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_4_cnn953_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_4_cnn953_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14486)@766
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_4_cnn953_mult_x_im10_shift0(BITSHIFT,8406)@765
    assign i_add_ptr70_3_4_cnn953_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_4_cnn953_mult_x_im10_shift0_q = i_add_ptr70_3_4_cnn953_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_align_1(BITSHIFT,5287)@765
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_4_cnn953_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_4_cnn953_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_align_1_q = i_add_ptr70_3_4_cnn953_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_4_cnn953_mult_x_im15_shift0(BITSHIFT,8407)@765
    assign i_add_ptr70_3_4_cnn953_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_4_cnn953_mult_x_im15_shift0_q = i_add_ptr70_3_4_cnn953_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0(ADD,5293)@765 + 1
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_4_cnn953_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_4_cnn953_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_4_cnn953_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_4_cnn953_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14514)@766
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2(ADD,10327)@766 + 1
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14519)@766
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_0_1_q[69:69];

    // redist218_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18135)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist218_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist219_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18136)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist219_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2(ADD,10328)@767 + 1
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist219_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist219_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist218_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist218_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist671_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18588)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist671_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10329)@768
    assign i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p2_of_2_q, redist671_i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_4_cnn953_mult_extender_x(BITJOIN,1937)@768
    assign i_add_ptr70_3_4_cnn953_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_4_cnn953_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_4_cnn953_trunc_sel_x(BITSELECT,1939)@768
    assign i_add_ptr70_3_4_cnn953_trunc_sel_x_b = i_add_ptr70_3_4_cnn953_mult_extender_x_q[63:0];

    // c_i64_4gr(CONSTANT,44)
    assign c_i64_4gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000100;

    // i_inc79_3_cnn921(LOGICAL,522)@754
    assign i_inc79_3_cnn921_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_4gr_q;

    // i_inc79_3_cnn921_vt_select_1_merged_bit_select(BITSELECT,17881)@754
    assign i_inc79_3_cnn921_vt_select_1_merged_bit_select_b = i_inc79_3_cnn921_q[1:0];
    assign i_inc79_3_cnn921_vt_select_1_merged_bit_select_c = i_inc79_3_cnn921_q[63:3];

    // i_inc79_3_cnn921_vt_join(BITJOIN,524)@754
    assign i_inc79_3_cnn921_vt_join_q = {i_inc79_3_cnn921_vt_select_1_merged_bit_select_c, VCC_q, i_inc79_3_cnn921_vt_select_1_merged_bit_select_b};

    // i_mul65_4_cnn922_bs1_merged_bit_select(BITSELECT,17882)@754
    assign i_mul65_4_cnn922_bs1_merged_bit_select_b = i_inc79_3_cnn921_vt_join_q[63:54];
    assign i_mul65_4_cnn922_bs1_merged_bit_select_c = i_inc79_3_cnn921_vt_join_q[53:36];
    assign i_mul65_4_cnn922_bs1_merged_bit_select_d = i_inc79_3_cnn921_vt_join_q[35:18];
    assign i_mul65_4_cnn922_bs1_merged_bit_select_e = i_inc79_3_cnn921_vt_join_q[17:0];

    // i_mul65_4_cnn922_bjA2(BITJOIN,3048)@754
    assign i_mul65_4_cnn922_bjA2_q = {GND_q, i_mul65_4_cnn922_bs1_merged_bit_select_b};

    // i_mul65_4_cnn922_im0_cma(CHAINMULTADD,17841)@754 + 5
    // out q@760
    assign i_mul65_4_cnn922_im0_cma_reset = ~ (resetn);
    assign i_mul65_4_cnn922_im0_cma_ena0 = 1'b1;
    assign i_mul65_4_cnn922_im0_cma_ena1 = i_mul65_4_cnn922_im0_cma_ena0;
    assign i_mul65_4_cnn922_im0_cma_ena2 = i_mul65_4_cnn922_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_im0_cma_ah[0] <= i_mul65_4_cnn922_bjA2_q;
        end
    end

    assign i_mul65_4_cnn922_im0_cma_a0 = i_mul65_4_cnn922_im0_cma_ah[0];
    assign i_mul65_4_cnn922_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_4_cnn922_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_4_cnn922_im0_cma_ena2, i_mul65_4_cnn922_im0_cma_ena1, i_mul65_4_cnn922_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_4_cnn922_im0_cma_a0),
        .coefsela(i_mul65_4_cnn922_im0_cma_c0),
        .resulta(i_mul65_4_cnn922_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_4_cnn922_im0_cma_delay ( .xin(i_mul65_4_cnn922_im0_cma_s0), .xout(i_mul65_4_cnn922_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_4_cnn922_im0_cma_q = i_mul65_4_cnn922_im0_cma_qq[21:0];

    // redist27_i_mul65_4_cnn922_im0_cma_q_1(DELAY,17944)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist27_i_mul65_4_cnn922_im0_cma_q_1_q <= i_mul65_4_cnn922_im0_cma_q;
        end
    end

    // i_mul65_4_cnn922_sums_align_5(BITSHIFT,3071)@761
    assign i_mul65_4_cnn922_sums_align_5_qint = { redist27_i_mul65_4_cnn922_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_4_cnn922_sums_align_5_q = i_mul65_4_cnn922_sums_align_5_qint[74:0];

    // i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11695)@761
    assign i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_4_cnn922_sums_align_5_q[69:0];

    // i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11682)@761
    assign i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_4_cnn922_sums_align_3_q[64:64];

    // i_mul65_4_cnn922_bjA7(BITJOIN,3053)@754
    assign i_mul65_4_cnn922_bjA7_q = {GND_q, i_mul65_4_cnn922_bs1_merged_bit_select_c};

    // i_mul65_4_cnn922_im5_cma(CHAINMULTADD,17842)@754 + 5
    // out q@760
    assign i_mul65_4_cnn922_im5_cma_reset = ~ (resetn);
    assign i_mul65_4_cnn922_im5_cma_ena0 = 1'b1;
    assign i_mul65_4_cnn922_im5_cma_ena1 = i_mul65_4_cnn922_im5_cma_ena0;
    assign i_mul65_4_cnn922_im5_cma_ena2 = i_mul65_4_cnn922_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_im5_cma_ah[0] <= i_mul65_4_cnn922_bjA7_q;
        end
    end

    assign i_mul65_4_cnn922_im5_cma_a0 = i_mul65_4_cnn922_im5_cma_ah[0];
    assign i_mul65_4_cnn922_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_4_cnn922_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_4_cnn922_im5_cma_ena2, i_mul65_4_cnn922_im5_cma_ena1, i_mul65_4_cnn922_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_4_cnn922_im5_cma_a0),
        .coefsela(i_mul65_4_cnn922_im5_cma_c0),
        .resulta(i_mul65_4_cnn922_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_4_cnn922_im5_cma_delay ( .xin(i_mul65_4_cnn922_im5_cma_s0), .xout(i_mul65_4_cnn922_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_4_cnn922_im5_cma_q = i_mul65_4_cnn922_im5_cma_qq[29:0];

    // redist26_i_mul65_4_cnn922_im5_cma_q_1(DELAY,17943)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist26_i_mul65_4_cnn922_im5_cma_q_1_q <= i_mul65_4_cnn922_im5_cma_q;
        end
    end

    // i_mul65_4_cnn922_sums_align_3(BITSHIFT,3069)@761
    assign i_mul65_4_cnn922_sums_align_3_qint = { redist26_i_mul65_4_cnn922_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_4_cnn922_sums_align_3_q = i_mul65_4_cnn922_sums_align_3_qint[64:0];

    // i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11687)@761
    assign i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_align_3_q};

    // i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2(ADD,9436)@761 + 1
    assign i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_q = i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11701)@762
    assign i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_4_cnn922_sums_result_add_0_0_q[47:47];

    // i_mul65_4_cnn922_bjA12(BITJOIN,3058)@754
    assign i_mul65_4_cnn922_bjA12_q = {GND_q, i_mul65_4_cnn922_bs1_merged_bit_select_d};

    // i_mul65_4_cnn922_im10_cma(CHAINMULTADD,17843)@754 + 5
    // out q@760
    assign i_mul65_4_cnn922_im10_cma_reset = ~ (resetn);
    assign i_mul65_4_cnn922_im10_cma_ena0 = 1'b1;
    assign i_mul65_4_cnn922_im10_cma_ena1 = i_mul65_4_cnn922_im10_cma_ena0;
    assign i_mul65_4_cnn922_im10_cma_ena2 = i_mul65_4_cnn922_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_im10_cma_ah[0] <= i_mul65_4_cnn922_bjA12_q;
        end
    end

    assign i_mul65_4_cnn922_im10_cma_a0 = i_mul65_4_cnn922_im10_cma_ah[0];
    assign i_mul65_4_cnn922_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_4_cnn922_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_4_cnn922_im10_cma_ena2, i_mul65_4_cnn922_im10_cma_ena1, i_mul65_4_cnn922_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_4_cnn922_im10_cma_a0),
        .coefsela(i_mul65_4_cnn922_im10_cma_c0),
        .resulta(i_mul65_4_cnn922_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_4_cnn922_im10_cma_delay ( .xin(i_mul65_4_cnn922_im10_cma_s0), .xout(i_mul65_4_cnn922_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_4_cnn922_im10_cma_q = i_mul65_4_cnn922_im10_cma_qq[29:0];

    // redist25_i_mul65_4_cnn922_im10_cma_q_1(DELAY,17942)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist25_i_mul65_4_cnn922_im10_cma_q_1_q <= i_mul65_4_cnn922_im10_cma_q;
        end
    end

    // i_mul65_4_cnn922_sums_align_1(BITSHIFT,3067)@761
    assign i_mul65_4_cnn922_sums_align_1_qint = { redist25_i_mul65_4_cnn922_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_4_cnn922_sums_align_1_q = i_mul65_4_cnn922_sums_align_1_qint[46:0];

    // i_mul65_4_cnn922_bjA17(BITJOIN,3063)@754
    assign i_mul65_4_cnn922_bjA17_q = {GND_q, i_mul65_4_cnn922_bs1_merged_bit_select_e};

    // i_mul65_4_cnn922_im15_cma(CHAINMULTADD,17844)@754 + 5
    // out q@760
    assign i_mul65_4_cnn922_im15_cma_reset = ~ (resetn);
    assign i_mul65_4_cnn922_im15_cma_ena0 = 1'b1;
    assign i_mul65_4_cnn922_im15_cma_ena1 = i_mul65_4_cnn922_im15_cma_ena0;
    assign i_mul65_4_cnn922_im15_cma_ena2 = i_mul65_4_cnn922_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_im15_cma_ah[0] <= i_mul65_4_cnn922_bjA17_q;
        end
    end

    assign i_mul65_4_cnn922_im15_cma_a0 = i_mul65_4_cnn922_im15_cma_ah[0];
    assign i_mul65_4_cnn922_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_4_cnn922_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_4_cnn922_im15_cma_ena2, i_mul65_4_cnn922_im15_cma_ena1, i_mul65_4_cnn922_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_4_cnn922_im15_cma_a0),
        .coefsela(i_mul65_4_cnn922_im15_cma_c0),
        .resulta(i_mul65_4_cnn922_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_4_cnn922_im15_cma_delay ( .xin(i_mul65_4_cnn922_im15_cma_s0), .xout(i_mul65_4_cnn922_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_4_cnn922_im15_cma_q = i_mul65_4_cnn922_im15_cma_qq[29:0];

    // redist24_i_mul65_4_cnn922_im15_cma_q_1(DELAY,17941)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist24_i_mul65_4_cnn922_im15_cma_q_1_q <= i_mul65_4_cnn922_im15_cma_q;
        end
    end

    // i_mul65_4_cnn922_sums_result_add_0_0(ADD,3073)@761 + 1
    assign i_mul65_4_cnn922_sums_result_add_0_0_a = {{18{redist24_i_mul65_4_cnn922_im15_cma_q_1_q[29]}}, redist24_i_mul65_4_cnn922_im15_cma_q_1_q};
    assign i_mul65_4_cnn922_sums_result_add_0_0_b = {{1{i_mul65_4_cnn922_sums_align_1_q[46]}}, i_mul65_4_cnn922_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_sums_result_add_0_0_o <= $signed(i_mul65_4_cnn922_sums_result_add_0_0_a) + $signed(i_mul65_4_cnn922_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_4_cnn922_sums_result_add_0_0_q = i_mul65_4_cnn922_sums_result_add_0_0_o[47:0];

    // i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11723)@762
    assign i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_4_cnn922_sums_result_add_0_0_q};

    // i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2(ADD,9447)@762 + 1
    assign i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_q = i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11735)@763
    assign i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11698)@761
    assign i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_4_cnn922_sums_align_5_q[74:74];

    // redist451_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18368)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist451_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11697)@761
    assign i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_4_cnn922_sums_align_5_q[74:70];

    // redist452_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18369)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist452_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11699)@762
    assign i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist451_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist452_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18370)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11694)@762
    assign i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist453_i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2(ADD,9437)@762 + 1
    assign i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_cin = i_mul65_4_cnn922_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_4_cnn922_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_q = i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11736)@763
    assign i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_4_cnn922_sums_result_add_0_1_p2_of_2_q};

    // redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18361)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11731)@763
    assign i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist444_i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2(ADD,9448)@763 + 1
    assign i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_cin = i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_4_cnn922_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_q = i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist745_i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_q_1(DELAY,18662)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist745_i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_4_cnn922_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9449)@764
    assign i_mul65_4_cnn922_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_4_cnn922_sums_result_add_1_0_p2_of_2_q, redist745_i_mul65_4_cnn922_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_4_cnn922_extender_x(BITJOIN,2733)@764
    assign i_mul65_4_cnn922_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_4_cnn922_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_4_cnn922_sel_x(BITSELECT,1056)@764
    assign bgTrunc_i_mul65_4_cnn922_sel_x_b = i_mul65_4_cnn922_extender_x_q[63:0];

    // i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select(BITSELECT,17913)@764
    assign i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_4_cnn922_sel_x_b[63:54];
    assign i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_4_cnn922_sel_x_b[53:36];
    assign i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_4_cnn922_sel_x_b[35:18];
    assign i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_4_cnn922_sel_x_b[17:0];

    // i_add_ptr66_4_cnn927_mult_x_bjA2(BITJOIN,3558)@764
    assign i_add_ptr66_4_cnn927_mult_x_bjA2_q = {GND_q, i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_4_cnn927_mult_x_im0_shift0(BITSHIFT,8176)@764
    assign i_add_ptr66_4_cnn927_mult_x_im0_shift0_qint = { i_add_ptr66_4_cnn927_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_4_cnn927_mult_x_im0_shift0_q = i_add_ptr66_4_cnn927_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_align_5(BITSHIFT,3581)@764
    assign i_add_ptr66_4_cnn927_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_4_cnn927_mult_x_im0_shift0_q[12]}}, i_add_ptr66_4_cnn927_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_4_cnn927_mult_x_sums_align_5_q = i_add_ptr66_4_cnn927_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_4_cnn927_mult_x_bjA7(BITJOIN,3563)@764
    assign i_add_ptr66_4_cnn927_mult_x_bjA7_q = {GND_q, i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_4_cnn927_mult_x_im5_shift0(BITSHIFT,8177)@764
    assign i_add_ptr66_4_cnn927_mult_x_im5_shift0_qint = { i_add_ptr66_4_cnn927_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_4_cnn927_mult_x_im5_shift0_q = i_add_ptr66_4_cnn927_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_align_3(BITSHIFT,3579)@764
    assign i_add_ptr66_4_cnn927_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_4_cnn927_mult_x_im5_shift0_q[20]}}, i_add_ptr66_4_cnn927_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_4_cnn927_mult_x_sums_align_3_q = i_add_ptr66_4_cnn927_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1(ADD,3584)@764 + 1
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_4_cnn927_mult_x_sums_align_3_q[58]}}, i_add_ptr66_4_cnn927_mult_x_sums_align_3_q};
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_4_cnn927_mult_x_sums_align_5_q[68]}}, i_add_ptr66_4_cnn927_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_q = i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12434)@765
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_4_cnn927_mult_x_bjA12(BITJOIN,3568)@764
    assign i_add_ptr66_4_cnn927_mult_x_bjA12_q = {GND_q, i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_4_cnn927_mult_x_im10_shift0(BITSHIFT,8178)@764
    assign i_add_ptr66_4_cnn927_mult_x_im10_shift0_qint = { i_add_ptr66_4_cnn927_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_4_cnn927_mult_x_im10_shift0_q = i_add_ptr66_4_cnn927_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_align_1(BITSHIFT,3577)@764
    assign i_add_ptr66_4_cnn927_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_4_cnn927_mult_x_im10_shift0_q[20]}}, i_add_ptr66_4_cnn927_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_4_cnn927_mult_x_sums_align_1_q = i_add_ptr66_4_cnn927_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_4_cnn927_mult_x_bjA17(BITJOIN,3573)@764
    assign i_add_ptr66_4_cnn927_mult_x_bjA17_q = {GND_q, i_add_ptr66_4_cnn927_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_4_cnn927_mult_x_im15_shift0(BITSHIFT,8179)@764
    assign i_add_ptr66_4_cnn927_mult_x_im15_shift0_qint = { i_add_ptr66_4_cnn927_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_4_cnn927_mult_x_im15_shift0_q = i_add_ptr66_4_cnn927_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0(ADD,3583)@764 + 1
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_4_cnn927_mult_x_im15_shift0_q[20]}}, i_add_ptr66_4_cnn927_mult_x_im15_shift0_q};
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_4_cnn927_mult_x_sums_align_1_q[40]}}, i_add_ptr66_4_cnn927_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_q = i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12462)@765
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2(ADD,9700)@765 + 1
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12467)@765
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_4_cnn927_mult_x_sums_result_add_0_1_q[69:69];

    // redist332_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18249)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist332_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist333_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18250)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist333_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2(ADD,9701)@766 + 1
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist333_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist333_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist332_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist332_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist728_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18645)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist728_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9702)@767
    assign i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p2_of_2_q, redist728_i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_4_cnn927_mult_extender_x(BITJOIN,1367)@767
    assign i_add_ptr66_4_cnn927_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_4_cnn927_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_4_cnn927_trunc_sel_x(BITSELECT,1369)@767
    assign i_add_ptr66_4_cnn927_trunc_sel_x_b = i_add_ptr66_4_cnn927_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923(BLACKBOX,718)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_924 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_select_63(BITSELECT,721)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_join(BITJOIN,720)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_4_cnn927_add_x(ADD,1361)@767
    assign i_add_ptr66_4_cnn927_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer8_cnn923_vt_join_q};
    assign i_add_ptr66_4_cnn927_add_x_b = {1'b0, i_add_ptr66_4_cnn927_trunc_sel_x_b};
    assign i_add_ptr66_4_cnn927_add_x_o = $unsigned(i_add_ptr66_4_cnn927_add_x_a) + $unsigned(i_add_ptr66_4_cnn927_add_x_b);
    assign i_add_ptr66_4_cnn927_add_x_q = i_add_ptr66_4_cnn927_add_x_o[64:0];

    // i_add_ptr66_4_cnn927_dupName_0_trunc_sel_x(BITSELECT,1370)@767
    assign i_add_ptr66_4_cnn927_dupName_0_trunc_sel_x_b = i_add_ptr66_4_cnn927_add_x_q[63:0];

    // i_add_ptr66_4_cnn926_vt_select_63(BITSELECT,81)@767
    assign i_add_ptr66_4_cnn926_vt_select_63_b = i_add_ptr66_4_cnn927_dupName_0_trunc_sel_x_b[63:2];

    // redist869_i_add_ptr66_4_cnn926_vt_select_63_b_1(DELAY,18786)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist869_i_add_ptr66_4_cnn926_vt_select_63_b_1_q <= i_add_ptr66_4_cnn926_vt_select_63_b;
        end
    end

    // i_add_ptr66_4_cnn926_vt_join(BITJOIN,80)@768
    assign i_add_ptr66_4_cnn926_vt_join_q = {redist869_i_add_ptr66_4_cnn926_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_4_cnn953_add_x(ADD,1931)@768
    assign i_add_ptr70_3_4_cnn953_add_x_a = {1'b0, i_add_ptr66_4_cnn926_vt_join_q};
    assign i_add_ptr70_3_4_cnn953_add_x_b = {1'b0, i_add_ptr70_3_4_cnn953_trunc_sel_x_b};
    assign i_add_ptr70_3_4_cnn953_add_x_o = $unsigned(i_add_ptr70_3_4_cnn953_add_x_a) + $unsigned(i_add_ptr70_3_4_cnn953_add_x_b);
    assign i_add_ptr70_3_4_cnn953_add_x_q = i_add_ptr70_3_4_cnn953_add_x_o[64:0];

    // i_add_ptr70_3_4_cnn953_dupName_0_trunc_sel_x(BITSELECT,1940)@768
    assign i_add_ptr70_3_4_cnn953_dupName_0_trunc_sel_x_b = i_add_ptr70_3_4_cnn953_add_x_q[63:0];

    // i_add_ptr70_3_4_cnn952_vt_select_63(BITSELECT,252)@768
    assign i_add_ptr70_3_4_cnn952_vt_select_63_b = i_add_ptr70_3_4_cnn953_dupName_0_trunc_sel_x_b[63:2];

    // redist812_i_add_ptr70_3_4_cnn952_vt_select_63_b_1(DELAY,18729)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist812_i_add_ptr70_3_4_cnn952_vt_select_63_b_1_q <= i_add_ptr70_3_4_cnn952_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_4_cnn952_vt_join(BITJOIN,251)@769
    assign i_add_ptr70_3_4_cnn952_vt_join_q = {redist812_i_add_ptr70_3_4_cnn952_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_4_cnn955_add_x(ADD,2571)@769
    assign i_add_ptr73_371_4_cnn955_add_x_a = {1'b0, i_add_ptr70_3_4_cnn952_vt_join_q};
    assign i_add_ptr73_371_4_cnn955_add_x_b = {1'b0, i_add_ptr73_371_4_cnn955_trunc_sel_x_b};
    assign i_add_ptr73_371_4_cnn955_add_x_o = $unsigned(i_add_ptr73_371_4_cnn955_add_x_a) + $unsigned(i_add_ptr73_371_4_cnn955_add_x_b);
    assign i_add_ptr73_371_4_cnn955_add_x_q = i_add_ptr73_371_4_cnn955_add_x_o[64:0];

    // i_add_ptr73_371_4_cnn955_dupName_0_trunc_sel_x(BITSELECT,2580)@769
    assign i_add_ptr73_371_4_cnn955_dupName_0_trunc_sel_x_b = i_add_ptr73_371_4_cnn955_add_x_q[63:0];

    // i_add_ptr73_371_4_cnn954_vt_select_63(BITSELECT,444)@769
    assign i_add_ptr73_371_4_cnn954_vt_select_63_b = i_add_ptr73_371_4_cnn955_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_4_cnn954_vt_join(BITJOIN,443)@769
    assign i_add_ptr73_371_4_cnn954_vt_join_q = {i_add_ptr73_371_4_cnn954_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_select_63(BITSELECT,778)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_select_63_b = i_add_ptr73_371_4_cnn954_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_join(BITJOIN,777)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn127_cnn949(BLACKBOX,591)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_127_cnn950 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn127_cnn949 (
        .in_intel_reserved_ffwd_46_0(in_intel_reserved_ffwd_46_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_46_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn127_cnn949_out_dest_data_out_46_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_4_cnn947_mult_x_im0_shift0(BITSHIFT,8588)@766
    assign i_add_ptr73_270_4_cnn947_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_4_cnn947_mult_x_im0_shift0_q = i_add_ptr73_270_4_cnn947_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_align_5(BITSHIFT,6671)@766
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_4_cnn947_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_4_cnn947_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_align_5_q = i_add_ptr73_270_4_cnn947_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_4_cnn947_mult_x_im5_shift0(BITSHIFT,8589)@766
    assign i_add_ptr73_270_4_cnn947_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_4_cnn947_mult_x_im5_shift0_q = i_add_ptr73_270_4_cnn947_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_align_3(BITSHIFT,6669)@766
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_4_cnn947_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_4_cnn947_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_align_3_q = i_add_ptr73_270_4_cnn947_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1(ADD,6674)@766 + 1
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_4_cnn947_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_4_cnn947_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_4_cnn947_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_4_cnn947_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16142)@767
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_4_cnn947_mult_x_im10_shift0(BITSHIFT,8590)@766
    assign i_add_ptr73_270_4_cnn947_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_4_cnn947_mult_x_im10_shift0_q = i_add_ptr73_270_4_cnn947_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_align_1(BITSHIFT,6667)@766
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_4_cnn947_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_4_cnn947_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_align_1_q = i_add_ptr73_270_4_cnn947_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_4_cnn947_mult_x_im15_shift0(BITSHIFT,8591)@766
    assign i_add_ptr73_270_4_cnn947_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_4_cnn947_mult_x_im15_shift0_q = i_add_ptr73_270_4_cnn947_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0(ADD,6673)@766 + 1
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_4_cnn947_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_4_cnn947_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_4_cnn947_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_4_cnn947_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16170)@767
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2(ADD,10833)@767 + 1
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16175)@767
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_0_1_q[69:69];

    // redist126_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18043)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist126_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist127_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18044)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist127_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2(ADD,10834)@768 + 1
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist127_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist127_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist126_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist126_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist625_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18542)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist625_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10835)@769
    assign i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p2_of_2_q, redist625_i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_4_cnn947_mult_extender_x(BITJOIN,2397)@769
    assign i_add_ptr73_270_4_cnn947_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_4_cnn947_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_4_cnn947_trunc_sel_x(BITSELECT,2399)@769
    assign i_add_ptr73_270_4_cnn947_trunc_sel_x_b = i_add_ptr73_270_4_cnn947_mult_extender_x_q[63:0];

    // i_add_ptr70_2_4_cnn945_mult_x_im0_shift0(BITSHIFT,8336)@765
    assign i_add_ptr70_2_4_cnn945_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_4_cnn945_mult_x_im0_shift0_q = i_add_ptr70_2_4_cnn945_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_align_5(BITSHIFT,4781)@765
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_4_cnn945_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_4_cnn945_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_align_5_q = i_add_ptr70_2_4_cnn945_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_4_cnn945_mult_x_im5_shift0(BITSHIFT,8337)@765
    assign i_add_ptr70_2_4_cnn945_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_4_cnn945_mult_x_im5_shift0_q = i_add_ptr70_2_4_cnn945_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_align_3(BITSHIFT,4779)@765
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_4_cnn945_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_4_cnn945_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_align_3_q = i_add_ptr70_2_4_cnn945_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1(ADD,4784)@765 + 1
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_4_cnn945_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_4_cnn945_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_4_cnn945_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_4_cnn945_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13874)@766
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_4_cnn945_mult_x_im10_shift0(BITSHIFT,8338)@765
    assign i_add_ptr70_2_4_cnn945_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_4_cnn945_mult_x_im10_shift0_q = i_add_ptr70_2_4_cnn945_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_align_1(BITSHIFT,4777)@765
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_4_cnn945_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_4_cnn945_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_align_1_q = i_add_ptr70_2_4_cnn945_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_4_cnn945_mult_x_im15_shift0(BITSHIFT,8339)@765
    assign i_add_ptr70_2_4_cnn945_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_4_cnn945_mult_x_im15_shift0_q = i_add_ptr70_2_4_cnn945_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0(ADD,4783)@765 + 1
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_4_cnn945_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_4_cnn945_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_4_cnn945_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_4_cnn945_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13902)@766
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2(ADD,10140)@766 + 1
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13907)@766
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_0_1_q[69:69];

    // redist252_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18169)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist252_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist253_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18170)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist253_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2(ADD,10141)@767 + 1
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist253_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist253_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist252_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist252_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist688_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18605)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist688_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10142)@768
    assign i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p2_of_2_q, redist688_i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_4_cnn945_mult_extender_x(BITJOIN,1767)@768
    assign i_add_ptr70_2_4_cnn945_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_4_cnn945_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_4_cnn945_trunc_sel_x(BITSELECT,1769)@768
    assign i_add_ptr70_2_4_cnn945_trunc_sel_x_b = i_add_ptr70_2_4_cnn945_mult_extender_x_q[63:0];

    // i_add_ptr70_2_4_cnn945_add_x(ADD,1761)@768
    assign i_add_ptr70_2_4_cnn945_add_x_a = {1'b0, i_add_ptr66_4_cnn926_vt_join_q};
    assign i_add_ptr70_2_4_cnn945_add_x_b = {1'b0, i_add_ptr70_2_4_cnn945_trunc_sel_x_b};
    assign i_add_ptr70_2_4_cnn945_add_x_o = $unsigned(i_add_ptr70_2_4_cnn945_add_x_a) + $unsigned(i_add_ptr70_2_4_cnn945_add_x_b);
    assign i_add_ptr70_2_4_cnn945_add_x_q = i_add_ptr70_2_4_cnn945_add_x_o[64:0];

    // i_add_ptr70_2_4_cnn945_dupName_0_trunc_sel_x(BITSELECT,1770)@768
    assign i_add_ptr70_2_4_cnn945_dupName_0_trunc_sel_x_b = i_add_ptr70_2_4_cnn945_add_x_q[63:0];

    // i_add_ptr70_2_4_cnn944_vt_select_63(BITSELECT,201)@768
    assign i_add_ptr70_2_4_cnn944_vt_select_63_b = i_add_ptr70_2_4_cnn945_dupName_0_trunc_sel_x_b[63:2];

    // redist829_i_add_ptr70_2_4_cnn944_vt_select_63_b_1(DELAY,18746)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist829_i_add_ptr70_2_4_cnn944_vt_select_63_b_1_q <= i_add_ptr70_2_4_cnn944_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_4_cnn944_vt_join(BITJOIN,200)@769
    assign i_add_ptr70_2_4_cnn944_vt_join_q = {redist829_i_add_ptr70_2_4_cnn944_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_4_cnn947_add_x(ADD,2391)@769
    assign i_add_ptr73_270_4_cnn947_add_x_a = {1'b0, i_add_ptr70_2_4_cnn944_vt_join_q};
    assign i_add_ptr73_270_4_cnn947_add_x_b = {1'b0, i_add_ptr73_270_4_cnn947_trunc_sel_x_b};
    assign i_add_ptr73_270_4_cnn947_add_x_o = $unsigned(i_add_ptr73_270_4_cnn947_add_x_a) + $unsigned(i_add_ptr73_270_4_cnn947_add_x_b);
    assign i_add_ptr73_270_4_cnn947_add_x_q = i_add_ptr73_270_4_cnn947_add_x_o[64:0];

    // i_add_ptr73_270_4_cnn947_dupName_0_trunc_sel_x(BITSELECT,2400)@769
    assign i_add_ptr73_270_4_cnn947_dupName_0_trunc_sel_x_b = i_add_ptr73_270_4_cnn947_add_x_q[63:0];

    // i_add_ptr73_270_4_cnn946_vt_select_63(BITSELECT,390)@769
    assign i_add_ptr73_270_4_cnn946_vt_select_63_b = i_add_ptr73_270_4_cnn947_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_4_cnn946_vt_join(BITJOIN,389)@769
    assign i_add_ptr73_270_4_cnn946_vt_join_q = {i_add_ptr73_270_4_cnn946_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_select_63(BITSELECT,770)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_select_63_b = i_add_ptr73_270_4_cnn946_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_join(BITJOIN,769)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn126_cnn941(BLACKBOX,590)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_126_cnn942 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn126_cnn941 (
        .in_intel_reserved_ffwd_45_0(in_intel_reserved_ffwd_45_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_45_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn126_cnn941_out_dest_data_out_45_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_4_cnn939_mult_x_im0_shift0(BITSHIFT,8520)@766
    assign i_add_ptr73_169_4_cnn939_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_4_cnn939_mult_x_im0_shift0_q = i_add_ptr73_169_4_cnn939_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_align_5(BITSHIFT,6161)@766
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_4_cnn939_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_4_cnn939_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_align_5_q = i_add_ptr73_169_4_cnn939_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_4_cnn939_mult_x_im5_shift0(BITSHIFT,8521)@766
    assign i_add_ptr73_169_4_cnn939_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_4_cnn939_mult_x_im5_shift0_q = i_add_ptr73_169_4_cnn939_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_align_3(BITSHIFT,6159)@766
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_4_cnn939_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_4_cnn939_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_align_3_q = i_add_ptr73_169_4_cnn939_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1(ADD,6164)@766 + 1
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_4_cnn939_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_4_cnn939_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_4_cnn939_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_4_cnn939_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15530)@767
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_4_cnn939_mult_x_im10_shift0(BITSHIFT,8522)@766
    assign i_add_ptr73_169_4_cnn939_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_4_cnn939_mult_x_im10_shift0_q = i_add_ptr73_169_4_cnn939_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_align_1(BITSHIFT,6157)@766
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_4_cnn939_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_4_cnn939_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_align_1_q = i_add_ptr73_169_4_cnn939_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_4_cnn939_mult_x_im15_shift0(BITSHIFT,8523)@766
    assign i_add_ptr73_169_4_cnn939_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_4_cnn939_mult_x_im15_shift0_q = i_add_ptr73_169_4_cnn939_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0(ADD,6163)@766 + 1
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_4_cnn939_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_4_cnn939_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_4_cnn939_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_4_cnn939_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15558)@767
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2(ADD,10646)@767 + 1
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15563)@767
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_0_1_q[69:69];

    // redist160_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18077)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist160_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist161_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18078)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist161_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2(ADD,10647)@768 + 1
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist161_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist161_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist160_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist160_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist642_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18559)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist642_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10648)@769
    assign i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p2_of_2_q, redist642_i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_4_cnn939_mult_extender_x(BITJOIN,2227)@769
    assign i_add_ptr73_169_4_cnn939_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_4_cnn939_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_4_cnn939_trunc_sel_x(BITSELECT,2229)@769
    assign i_add_ptr73_169_4_cnn939_trunc_sel_x_b = i_add_ptr73_169_4_cnn939_mult_extender_x_q[63:0];

    // i_add_ptr70_1_4_cnn937_mult_x_im0_shift0(BITSHIFT,8268)@765
    assign i_add_ptr70_1_4_cnn937_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_4_cnn937_mult_x_im0_shift0_q = i_add_ptr70_1_4_cnn937_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_align_5(BITSHIFT,4271)@765
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_4_cnn937_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_4_cnn937_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_align_5_q = i_add_ptr70_1_4_cnn937_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_4_cnn937_mult_x_im5_shift0(BITSHIFT,8269)@765
    assign i_add_ptr70_1_4_cnn937_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_4_cnn937_mult_x_im5_shift0_q = i_add_ptr70_1_4_cnn937_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_align_3(BITSHIFT,4269)@765
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_4_cnn937_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_4_cnn937_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_align_3_q = i_add_ptr70_1_4_cnn937_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1(ADD,4274)@765 + 1
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_4_cnn937_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_4_cnn937_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_4_cnn937_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_4_cnn937_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13262)@766
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_4_cnn937_mult_x_im10_shift0(BITSHIFT,8270)@765
    assign i_add_ptr70_1_4_cnn937_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_4_cnn937_mult_x_im10_shift0_q = i_add_ptr70_1_4_cnn937_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_align_1(BITSHIFT,4267)@765
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_4_cnn937_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_4_cnn937_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_align_1_q = i_add_ptr70_1_4_cnn937_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_4_cnn937_mult_x_im15_shift0(BITSHIFT,8271)@765
    assign i_add_ptr70_1_4_cnn937_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_4_cnn937_mult_x_im15_shift0_q = i_add_ptr70_1_4_cnn937_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0(ADD,4273)@765 + 1
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_4_cnn937_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_4_cnn937_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_4_cnn937_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_4_cnn937_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13290)@766
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2(ADD,9953)@766 + 1
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13295)@766
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_0_1_q[69:69];

    // redist286_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18203)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist286_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist287_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18204)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist287_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2(ADD,9954)@767 + 1
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist287_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist287_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist286_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist286_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist705_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18622)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist705_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9955)@768
    assign i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p2_of_2_q, redist705_i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_4_cnn937_mult_extender_x(BITJOIN,1597)@768
    assign i_add_ptr70_1_4_cnn937_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_4_cnn937_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_4_cnn937_trunc_sel_x(BITSELECT,1599)@768
    assign i_add_ptr70_1_4_cnn937_trunc_sel_x_b = i_add_ptr70_1_4_cnn937_mult_extender_x_q[63:0];

    // i_add_ptr70_1_4_cnn937_add_x(ADD,1591)@768
    assign i_add_ptr70_1_4_cnn937_add_x_a = {1'b0, i_add_ptr66_4_cnn926_vt_join_q};
    assign i_add_ptr70_1_4_cnn937_add_x_b = {1'b0, i_add_ptr70_1_4_cnn937_trunc_sel_x_b};
    assign i_add_ptr70_1_4_cnn937_add_x_o = $unsigned(i_add_ptr70_1_4_cnn937_add_x_a) + $unsigned(i_add_ptr70_1_4_cnn937_add_x_b);
    assign i_add_ptr70_1_4_cnn937_add_x_q = i_add_ptr70_1_4_cnn937_add_x_o[64:0];

    // i_add_ptr70_1_4_cnn937_dupName_0_trunc_sel_x(BITSELECT,1600)@768
    assign i_add_ptr70_1_4_cnn937_dupName_0_trunc_sel_x_b = i_add_ptr70_1_4_cnn937_add_x_q[63:0];

    // i_add_ptr70_1_4_cnn936_vt_select_63(BITSELECT,150)@768
    assign i_add_ptr70_1_4_cnn936_vt_select_63_b = i_add_ptr70_1_4_cnn937_dupName_0_trunc_sel_x_b[63:2];

    // redist846_i_add_ptr70_1_4_cnn936_vt_select_63_b_1(DELAY,18763)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist846_i_add_ptr70_1_4_cnn936_vt_select_63_b_1_q <= i_add_ptr70_1_4_cnn936_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_4_cnn936_vt_join(BITJOIN,149)@769
    assign i_add_ptr70_1_4_cnn936_vt_join_q = {redist846_i_add_ptr70_1_4_cnn936_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_4_cnn939_add_x(ADD,2221)@769
    assign i_add_ptr73_169_4_cnn939_add_x_a = {1'b0, i_add_ptr70_1_4_cnn936_vt_join_q};
    assign i_add_ptr73_169_4_cnn939_add_x_b = {1'b0, i_add_ptr73_169_4_cnn939_trunc_sel_x_b};
    assign i_add_ptr73_169_4_cnn939_add_x_o = $unsigned(i_add_ptr73_169_4_cnn939_add_x_a) + $unsigned(i_add_ptr73_169_4_cnn939_add_x_b);
    assign i_add_ptr73_169_4_cnn939_add_x_q = i_add_ptr73_169_4_cnn939_add_x_o[64:0];

    // i_add_ptr73_169_4_cnn939_dupName_0_trunc_sel_x(BITSELECT,2230)@769
    assign i_add_ptr73_169_4_cnn939_dupName_0_trunc_sel_x_b = i_add_ptr73_169_4_cnn939_add_x_q[63:0];

    // i_add_ptr73_169_4_cnn938_vt_select_63(BITSELECT,339)@769
    assign i_add_ptr73_169_4_cnn938_vt_select_63_b = i_add_ptr73_169_4_cnn939_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_4_cnn938_vt_join(BITJOIN,338)@769
    assign i_add_ptr73_169_4_cnn938_vt_join_q = {i_add_ptr73_169_4_cnn938_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_select_63(BITSELECT,766)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_select_63_b = i_add_ptr73_169_4_cnn938_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_join(BITJOIN,765)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn125_cnn933(BLACKBOX,589)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_125_cnn934 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn125_cnn933 (
        .in_intel_reserved_ffwd_44_0(in_intel_reserved_ffwd_44_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_44_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn125_cnn933_out_dest_data_out_44_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_4_cnn931_mult_x_im0_shift0(BITSHIFT,8688)@766
    assign i_add_ptr73_4_cnn931_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_4_cnn931_mult_x_im0_shift0_q = i_add_ptr73_4_cnn931_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_align_5(BITSHIFT,7421)@766
    assign i_add_ptr73_4_cnn931_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_4_cnn931_mult_x_im0_shift0_q[12]}}, i_add_ptr73_4_cnn931_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_4_cnn931_mult_x_sums_align_5_q = i_add_ptr73_4_cnn931_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_4_cnn931_mult_x_im5_shift0(BITSHIFT,8689)@766
    assign i_add_ptr73_4_cnn931_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_4_cnn931_mult_x_im5_shift0_q = i_add_ptr73_4_cnn931_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_align_3(BITSHIFT,7419)@766
    assign i_add_ptr73_4_cnn931_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_4_cnn931_mult_x_im5_shift0_q[20]}}, i_add_ptr73_4_cnn931_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_4_cnn931_mult_x_sums_align_3_q = i_add_ptr73_4_cnn931_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1(ADD,7424)@766 + 1
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_4_cnn931_mult_x_sums_align_3_q[58]}}, i_add_ptr73_4_cnn931_mult_x_sums_align_3_q};
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_4_cnn931_mult_x_sums_align_5_q[68]}}, i_add_ptr73_4_cnn931_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_q = i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17042)@767
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_4_cnn931_mult_x_im10_shift0(BITSHIFT,8690)@766
    assign i_add_ptr73_4_cnn931_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_4_cnn931_mult_x_im10_shift0_q = i_add_ptr73_4_cnn931_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_align_1(BITSHIFT,7417)@766
    assign i_add_ptr73_4_cnn931_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_4_cnn931_mult_x_im10_shift0_q[20]}}, i_add_ptr73_4_cnn931_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_4_cnn931_mult_x_sums_align_1_q = i_add_ptr73_4_cnn931_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_4_cnn931_mult_x_im15_shift0(BITSHIFT,8691)@766
    assign i_add_ptr73_4_cnn931_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_4_cnn931_mult_x_im15_shift0_q = i_add_ptr73_4_cnn931_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0(ADD,7423)@766 + 1
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_4_cnn931_mult_x_im15_shift0_q[20]}}, i_add_ptr73_4_cnn931_mult_x_im15_shift0_q};
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_4_cnn931_mult_x_sums_align_1_q[40]}}, i_add_ptr73_4_cnn931_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_q = i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17070)@767
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2(ADD,11108)@767 + 1
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17075)@767
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_4_cnn931_mult_x_sums_result_add_0_1_q[69:69];

    // redist76_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17993)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist76_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist77_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17994)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist77_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2(ADD,11109)@768 + 1
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist77_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist77_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist76_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist76_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist600_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18517)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist600_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11110)@769
    assign i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p2_of_2_q, redist600_i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_4_cnn931_mult_extender_x(BITJOIN,2647)@769
    assign i_add_ptr73_4_cnn931_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_4_cnn931_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_4_cnn931_trunc_sel_x(BITSELECT,2649)@769
    assign i_add_ptr73_4_cnn931_trunc_sel_x_b = i_add_ptr73_4_cnn931_mult_extender_x_q[63:0];

    // i_add_ptr70_4_cnn929_mult_x_im0_shift0(BITSHIFT,8432)@765
    assign i_add_ptr70_4_cnn929_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_4_cnn929_mult_x_im0_shift0_q = i_add_ptr70_4_cnn929_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_align_5(BITSHIFT,5501)@765
    assign i_add_ptr70_4_cnn929_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_4_cnn929_mult_x_im0_shift0_q[12]}}, i_add_ptr70_4_cnn929_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_4_cnn929_mult_x_sums_align_5_q = i_add_ptr70_4_cnn929_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_4_cnn929_mult_x_im5_shift0(BITSHIFT,8433)@765
    assign i_add_ptr70_4_cnn929_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_4_cnn929_mult_x_im5_shift0_q = i_add_ptr70_4_cnn929_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_align_3(BITSHIFT,5499)@765
    assign i_add_ptr70_4_cnn929_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_4_cnn929_mult_x_im5_shift0_q[20]}}, i_add_ptr70_4_cnn929_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_4_cnn929_mult_x_sums_align_3_q = i_add_ptr70_4_cnn929_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1(ADD,5504)@765 + 1
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_4_cnn929_mult_x_sums_align_3_q[58]}}, i_add_ptr70_4_cnn929_mult_x_sums_align_3_q};
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_4_cnn929_mult_x_sums_align_5_q[68]}}, i_add_ptr70_4_cnn929_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_q = i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14738)@766
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_4_cnn929_mult_x_im10_shift0(BITSHIFT,8434)@765
    assign i_add_ptr70_4_cnn929_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_4_cnn929_mult_x_im10_shift0_q = i_add_ptr70_4_cnn929_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_align_1(BITSHIFT,5497)@765
    assign i_add_ptr70_4_cnn929_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_4_cnn929_mult_x_im10_shift0_q[20]}}, i_add_ptr70_4_cnn929_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_4_cnn929_mult_x_sums_align_1_q = i_add_ptr70_4_cnn929_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_4_cnn929_mult_x_im15_shift0(BITSHIFT,8435)@765
    assign i_add_ptr70_4_cnn929_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_4_cnn929_mult_x_im15_shift0_q = i_add_ptr70_4_cnn929_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0(ADD,5503)@765 + 1
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_4_cnn929_mult_x_im15_shift0_q[20]}}, i_add_ptr70_4_cnn929_mult_x_im15_shift0_q};
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_4_cnn929_mult_x_sums_align_1_q[40]}}, i_add_ptr70_4_cnn929_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_q = i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14766)@766
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2(ADD,10404)@766 + 1
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14771)@766
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_4_cnn929_mult_x_sums_result_add_0_1_q[69:69];

    // redist204_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18121)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist204_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist205_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18122)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist205_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2(ADD,10405)@767 + 1
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist205_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist205_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist204_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist204_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist664_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18581)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist664_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10406)@768
    assign i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p2_of_2_q, redist664_i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_4_cnn929_mult_extender_x(BITJOIN,2007)@768
    assign i_add_ptr70_4_cnn929_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_4_cnn929_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_4_cnn929_trunc_sel_x(BITSELECT,2009)@768
    assign i_add_ptr70_4_cnn929_trunc_sel_x_b = i_add_ptr70_4_cnn929_mult_extender_x_q[63:0];

    // i_add_ptr70_4_cnn929_add_x(ADD,2001)@768
    assign i_add_ptr70_4_cnn929_add_x_a = {1'b0, i_add_ptr66_4_cnn926_vt_join_q};
    assign i_add_ptr70_4_cnn929_add_x_b = {1'b0, i_add_ptr70_4_cnn929_trunc_sel_x_b};
    assign i_add_ptr70_4_cnn929_add_x_o = $unsigned(i_add_ptr70_4_cnn929_add_x_a) + $unsigned(i_add_ptr70_4_cnn929_add_x_b);
    assign i_add_ptr70_4_cnn929_add_x_q = i_add_ptr70_4_cnn929_add_x_o[64:0];

    // i_add_ptr70_4_cnn929_dupName_0_trunc_sel_x(BITSELECT,2010)@768
    assign i_add_ptr70_4_cnn929_dupName_0_trunc_sel_x_b = i_add_ptr70_4_cnn929_add_x_q[63:0];

    // i_add_ptr70_4_cnn928_vt_select_63(BITSELECT,273)@768
    assign i_add_ptr70_4_cnn928_vt_select_63_b = i_add_ptr70_4_cnn929_dupName_0_trunc_sel_x_b[63:2];

    // redist805_i_add_ptr70_4_cnn928_vt_select_63_b_1(DELAY,18722)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist805_i_add_ptr70_4_cnn928_vt_select_63_b_1_q <= i_add_ptr70_4_cnn928_vt_select_63_b;
        end
    end

    // i_add_ptr70_4_cnn928_vt_join(BITJOIN,272)@769
    assign i_add_ptr70_4_cnn928_vt_join_q = {redist805_i_add_ptr70_4_cnn928_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_4_cnn931_add_x(ADD,2641)@769
    assign i_add_ptr73_4_cnn931_add_x_a = {1'b0, i_add_ptr70_4_cnn928_vt_join_q};
    assign i_add_ptr73_4_cnn931_add_x_b = {1'b0, i_add_ptr73_4_cnn931_trunc_sel_x_b};
    assign i_add_ptr73_4_cnn931_add_x_o = $unsigned(i_add_ptr73_4_cnn931_add_x_a) + $unsigned(i_add_ptr73_4_cnn931_add_x_b);
    assign i_add_ptr73_4_cnn931_add_x_q = i_add_ptr73_4_cnn931_add_x_o[64:0];

    // i_add_ptr73_4_cnn931_dupName_0_trunc_sel_x(BITSELECT,2650)@769
    assign i_add_ptr73_4_cnn931_dupName_0_trunc_sel_x_b = i_add_ptr73_4_cnn931_add_x_q[63:0];

    // i_add_ptr73_4_cnn930_vt_select_63(BITSELECT,465)@769
    assign i_add_ptr73_4_cnn930_vt_select_63_b = i_add_ptr73_4_cnn931_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_4_cnn930_vt_join(BITJOIN,464)@769
    assign i_add_ptr73_4_cnn930_vt_join_q = {i_add_ptr73_4_cnn930_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_select_63(BITSELECT,762)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_select_63_b = i_add_ptr73_4_cnn930_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_join(BITJOIN,761)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn124_cnn918(BLACKBOX,588)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_124_cnn919 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn124_cnn918 (
        .in_intel_reserved_ffwd_43_0(in_intel_reserved_ffwd_43_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_43_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn124_cnn918_out_dest_data_out_43_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_3_cnn916_mult_x_im0_shift0(BITSHIFT,8656)@766
    assign i_add_ptr73_371_3_cnn916_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_3_cnn916_mult_x_im0_shift0_q = i_add_ptr73_371_3_cnn916_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_align_5(BITSHIFT,7181)@766
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_3_cnn916_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_3_cnn916_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_align_5_q = i_add_ptr73_371_3_cnn916_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_3_cnn916_mult_x_im5_shift0(BITSHIFT,8657)@766
    assign i_add_ptr73_371_3_cnn916_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_3_cnn916_mult_x_im5_shift0_q = i_add_ptr73_371_3_cnn916_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_align_3(BITSHIFT,7179)@766
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_3_cnn916_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_3_cnn916_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_align_3_q = i_add_ptr73_371_3_cnn916_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1(ADD,7184)@766 + 1
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_3_cnn916_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_3_cnn916_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_3_cnn916_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_3_cnn916_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16754)@767
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_3_cnn916_mult_x_im10_shift0(BITSHIFT,8658)@766
    assign i_add_ptr73_371_3_cnn916_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_3_cnn916_mult_x_im10_shift0_q = i_add_ptr73_371_3_cnn916_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_align_1(BITSHIFT,7177)@766
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_3_cnn916_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_3_cnn916_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_align_1_q = i_add_ptr73_371_3_cnn916_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_3_cnn916_mult_x_im15_shift0(BITSHIFT,8659)@766
    assign i_add_ptr73_371_3_cnn916_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_3_cnn916_mult_x_im15_shift0_q = i_add_ptr73_371_3_cnn916_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0(ADD,7183)@766 + 1
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_3_cnn916_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_3_cnn916_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_3_cnn916_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_3_cnn916_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16782)@767
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2(ADD,11020)@767 + 1
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16787)@767
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_0_1_q[69:69];

    // redist92_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18009)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist92_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist93_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18010)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist93_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2(ADD,11021)@768 + 1
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist93_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist93_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist92_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist92_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist608_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18525)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist608_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11022)@769
    assign i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p2_of_2_q, redist608_i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_3_cnn916_mult_extender_x(BITJOIN,2567)@769
    assign i_add_ptr73_371_3_cnn916_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_3_cnn916_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_3_cnn916_trunc_sel_x(BITSELECT,2569)@769
    assign i_add_ptr73_371_3_cnn916_trunc_sel_x_b = i_add_ptr73_371_3_cnn916_mult_extender_x_q[63:0];

    // i_add_ptr70_3_3_cnn914_mult_x_im0_shift0(BITSHIFT,8400)@765
    assign i_add_ptr70_3_3_cnn914_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_3_cnn914_mult_x_im0_shift0_q = i_add_ptr70_3_3_cnn914_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_align_5(BITSHIFT,5261)@765
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_3_cnn914_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_3_cnn914_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_align_5_q = i_add_ptr70_3_3_cnn914_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_3_cnn914_mult_x_im5_shift0(BITSHIFT,8401)@765
    assign i_add_ptr70_3_3_cnn914_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_3_cnn914_mult_x_im5_shift0_q = i_add_ptr70_3_3_cnn914_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_align_3(BITSHIFT,5259)@765
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_3_cnn914_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_3_cnn914_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_align_3_q = i_add_ptr70_3_3_cnn914_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1(ADD,5264)@765 + 1
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_3_cnn914_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_3_cnn914_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_3_cnn914_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_3_cnn914_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14450)@766
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_3_cnn914_mult_x_im10_shift0(BITSHIFT,8402)@765
    assign i_add_ptr70_3_3_cnn914_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_3_cnn914_mult_x_im10_shift0_q = i_add_ptr70_3_3_cnn914_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_align_1(BITSHIFT,5257)@765
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_3_cnn914_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_3_cnn914_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_align_1_q = i_add_ptr70_3_3_cnn914_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_3_cnn914_mult_x_im15_shift0(BITSHIFT,8403)@765
    assign i_add_ptr70_3_3_cnn914_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_3_cnn914_mult_x_im15_shift0_q = i_add_ptr70_3_3_cnn914_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0(ADD,5263)@765 + 1
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_3_cnn914_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_3_cnn914_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_3_cnn914_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_3_cnn914_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14478)@766
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2(ADD,10316)@766 + 1
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14483)@766
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_0_1_q[69:69];

    // redist220_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18137)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist220_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist221_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18138)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist221_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2(ADD,10317)@767 + 1
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist221_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist221_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist220_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist220_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist672_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18589)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist672_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10318)@768
    assign i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p2_of_2_q, redist672_i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_3_cnn914_mult_extender_x(BITJOIN,1927)@768
    assign i_add_ptr70_3_3_cnn914_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_3_cnn914_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_3_cnn914_trunc_sel_x(BITSELECT,1929)@768
    assign i_add_ptr70_3_3_cnn914_trunc_sel_x_b = i_add_ptr70_3_3_cnn914_mult_extender_x_q[63:0];

    // c_i64_3gr(CONSTANT,43)
    assign c_i64_3gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000011;

    // i_inc79_2_cnn882(LOGICAL,518)@754
    assign i_inc79_2_cnn882_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_3gr_q;

    // i_inc79_2_cnn882_vt_select_63(BITSELECT,521)@754
    assign i_inc79_2_cnn882_vt_select_63_b = i_inc79_2_cnn882_q[63:2];

    // i_inc79_2_cnn882_vt_join(BITJOIN,520)@754
    assign i_inc79_2_cnn882_vt_join_q = {i_inc79_2_cnn882_vt_select_63_b, i_inc79_10_cnn1194_vt_const_1_q};

    // i_mul65_3_cnn883_bs1_merged_bit_select(BITSELECT,17880)@754
    assign i_mul65_3_cnn883_bs1_merged_bit_select_b = i_inc79_2_cnn882_vt_join_q[63:54];
    assign i_mul65_3_cnn883_bs1_merged_bit_select_c = i_inc79_2_cnn882_vt_join_q[53:36];
    assign i_mul65_3_cnn883_bs1_merged_bit_select_d = i_inc79_2_cnn882_vt_join_q[35:18];
    assign i_mul65_3_cnn883_bs1_merged_bit_select_e = i_inc79_2_cnn882_vt_join_q[17:0];

    // i_mul65_3_cnn883_bjA2(BITJOIN,3018)@754
    assign i_mul65_3_cnn883_bjA2_q = {GND_q, i_mul65_3_cnn883_bs1_merged_bit_select_b};

    // i_mul65_3_cnn883_im0_cma(CHAINMULTADD,17837)@754 + 5
    // out q@760
    assign i_mul65_3_cnn883_im0_cma_reset = ~ (resetn);
    assign i_mul65_3_cnn883_im0_cma_ena0 = 1'b1;
    assign i_mul65_3_cnn883_im0_cma_ena1 = i_mul65_3_cnn883_im0_cma_ena0;
    assign i_mul65_3_cnn883_im0_cma_ena2 = i_mul65_3_cnn883_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_im0_cma_ah[0] <= i_mul65_3_cnn883_bjA2_q;
        end
    end

    assign i_mul65_3_cnn883_im0_cma_a0 = i_mul65_3_cnn883_im0_cma_ah[0];
    assign i_mul65_3_cnn883_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_3_cnn883_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_3_cnn883_im0_cma_ena2, i_mul65_3_cnn883_im0_cma_ena1, i_mul65_3_cnn883_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_3_cnn883_im0_cma_a0),
        .coefsela(i_mul65_3_cnn883_im0_cma_c0),
        .resulta(i_mul65_3_cnn883_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_3_cnn883_im0_cma_delay ( .xin(i_mul65_3_cnn883_im0_cma_s0), .xout(i_mul65_3_cnn883_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_3_cnn883_im0_cma_q = i_mul65_3_cnn883_im0_cma_qq[21:0];

    // redist31_i_mul65_3_cnn883_im0_cma_q_1(DELAY,17948)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist31_i_mul65_3_cnn883_im0_cma_q_1_q <= i_mul65_3_cnn883_im0_cma_q;
        end
    end

    // i_mul65_3_cnn883_sums_align_5(BITSHIFT,3041)@761
    assign i_mul65_3_cnn883_sums_align_5_qint = { redist31_i_mul65_3_cnn883_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_3_cnn883_sums_align_5_q = i_mul65_3_cnn883_sums_align_5_qint[74:0];

    // i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11639)@761
    assign i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_3_cnn883_sums_align_5_q[69:0];

    // i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11626)@761
    assign i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_3_cnn883_sums_align_3_q[64:64];

    // i_mul65_3_cnn883_bjA7(BITJOIN,3023)@754
    assign i_mul65_3_cnn883_bjA7_q = {GND_q, i_mul65_3_cnn883_bs1_merged_bit_select_c};

    // i_mul65_3_cnn883_im5_cma(CHAINMULTADD,17838)@754 + 5
    // out q@760
    assign i_mul65_3_cnn883_im5_cma_reset = ~ (resetn);
    assign i_mul65_3_cnn883_im5_cma_ena0 = 1'b1;
    assign i_mul65_3_cnn883_im5_cma_ena1 = i_mul65_3_cnn883_im5_cma_ena0;
    assign i_mul65_3_cnn883_im5_cma_ena2 = i_mul65_3_cnn883_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_im5_cma_ah[0] <= i_mul65_3_cnn883_bjA7_q;
        end
    end

    assign i_mul65_3_cnn883_im5_cma_a0 = i_mul65_3_cnn883_im5_cma_ah[0];
    assign i_mul65_3_cnn883_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_3_cnn883_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_3_cnn883_im5_cma_ena2, i_mul65_3_cnn883_im5_cma_ena1, i_mul65_3_cnn883_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_3_cnn883_im5_cma_a0),
        .coefsela(i_mul65_3_cnn883_im5_cma_c0),
        .resulta(i_mul65_3_cnn883_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_3_cnn883_im5_cma_delay ( .xin(i_mul65_3_cnn883_im5_cma_s0), .xout(i_mul65_3_cnn883_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_3_cnn883_im5_cma_q = i_mul65_3_cnn883_im5_cma_qq[29:0];

    // redist30_i_mul65_3_cnn883_im5_cma_q_1(DELAY,17947)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist30_i_mul65_3_cnn883_im5_cma_q_1_q <= i_mul65_3_cnn883_im5_cma_q;
        end
    end

    // i_mul65_3_cnn883_sums_align_3(BITSHIFT,3039)@761
    assign i_mul65_3_cnn883_sums_align_3_qint = { redist30_i_mul65_3_cnn883_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_3_cnn883_sums_align_3_q = i_mul65_3_cnn883_sums_align_3_qint[64:0];

    // i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11631)@761
    assign i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_align_3_q};

    // i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2(ADD,9414)@761 + 1
    assign i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_q = i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11645)@762
    assign i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_3_cnn883_sums_result_add_0_0_q[47:47];

    // i_mul65_3_cnn883_bjA12(BITJOIN,3028)@754
    assign i_mul65_3_cnn883_bjA12_q = {GND_q, i_mul65_3_cnn883_bs1_merged_bit_select_d};

    // i_mul65_3_cnn883_im10_cma(CHAINMULTADD,17839)@754 + 5
    // out q@760
    assign i_mul65_3_cnn883_im10_cma_reset = ~ (resetn);
    assign i_mul65_3_cnn883_im10_cma_ena0 = 1'b1;
    assign i_mul65_3_cnn883_im10_cma_ena1 = i_mul65_3_cnn883_im10_cma_ena0;
    assign i_mul65_3_cnn883_im10_cma_ena2 = i_mul65_3_cnn883_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_im10_cma_ah[0] <= i_mul65_3_cnn883_bjA12_q;
        end
    end

    assign i_mul65_3_cnn883_im10_cma_a0 = i_mul65_3_cnn883_im10_cma_ah[0];
    assign i_mul65_3_cnn883_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_3_cnn883_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_3_cnn883_im10_cma_ena2, i_mul65_3_cnn883_im10_cma_ena1, i_mul65_3_cnn883_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_3_cnn883_im10_cma_a0),
        .coefsela(i_mul65_3_cnn883_im10_cma_c0),
        .resulta(i_mul65_3_cnn883_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_3_cnn883_im10_cma_delay ( .xin(i_mul65_3_cnn883_im10_cma_s0), .xout(i_mul65_3_cnn883_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_3_cnn883_im10_cma_q = i_mul65_3_cnn883_im10_cma_qq[29:0];

    // redist29_i_mul65_3_cnn883_im10_cma_q_1(DELAY,17946)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist29_i_mul65_3_cnn883_im10_cma_q_1_q <= i_mul65_3_cnn883_im10_cma_q;
        end
    end

    // i_mul65_3_cnn883_sums_align_1(BITSHIFT,3037)@761
    assign i_mul65_3_cnn883_sums_align_1_qint = { redist29_i_mul65_3_cnn883_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_3_cnn883_sums_align_1_q = i_mul65_3_cnn883_sums_align_1_qint[46:0];

    // i_mul65_3_cnn883_bjA17(BITJOIN,3033)@754
    assign i_mul65_3_cnn883_bjA17_q = {GND_q, i_mul65_3_cnn883_bs1_merged_bit_select_e};

    // i_mul65_3_cnn883_im15_cma(CHAINMULTADD,17840)@754 + 5
    // out q@760
    assign i_mul65_3_cnn883_im15_cma_reset = ~ (resetn);
    assign i_mul65_3_cnn883_im15_cma_ena0 = 1'b1;
    assign i_mul65_3_cnn883_im15_cma_ena1 = i_mul65_3_cnn883_im15_cma_ena0;
    assign i_mul65_3_cnn883_im15_cma_ena2 = i_mul65_3_cnn883_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_im15_cma_ah[0] <= i_mul65_3_cnn883_bjA17_q;
        end
    end

    assign i_mul65_3_cnn883_im15_cma_a0 = i_mul65_3_cnn883_im15_cma_ah[0];
    assign i_mul65_3_cnn883_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_3_cnn883_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_3_cnn883_im15_cma_ena2, i_mul65_3_cnn883_im15_cma_ena1, i_mul65_3_cnn883_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_3_cnn883_im15_cma_a0),
        .coefsela(i_mul65_3_cnn883_im15_cma_c0),
        .resulta(i_mul65_3_cnn883_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_3_cnn883_im15_cma_delay ( .xin(i_mul65_3_cnn883_im15_cma_s0), .xout(i_mul65_3_cnn883_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_3_cnn883_im15_cma_q = i_mul65_3_cnn883_im15_cma_qq[29:0];

    // redist28_i_mul65_3_cnn883_im15_cma_q_1(DELAY,17945)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist28_i_mul65_3_cnn883_im15_cma_q_1_q <= i_mul65_3_cnn883_im15_cma_q;
        end
    end

    // i_mul65_3_cnn883_sums_result_add_0_0(ADD,3043)@761 + 1
    assign i_mul65_3_cnn883_sums_result_add_0_0_a = {{18{redist28_i_mul65_3_cnn883_im15_cma_q_1_q[29]}}, redist28_i_mul65_3_cnn883_im15_cma_q_1_q};
    assign i_mul65_3_cnn883_sums_result_add_0_0_b = {{1{i_mul65_3_cnn883_sums_align_1_q[46]}}, i_mul65_3_cnn883_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_sums_result_add_0_0_o <= $signed(i_mul65_3_cnn883_sums_result_add_0_0_a) + $signed(i_mul65_3_cnn883_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_3_cnn883_sums_result_add_0_0_q = i_mul65_3_cnn883_sums_result_add_0_0_o[47:0];

    // i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11667)@762
    assign i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_3_cnn883_sums_result_add_0_0_q};

    // i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2(ADD,9425)@762 + 1
    assign i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_q = i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11679)@763
    assign i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11642)@761
    assign i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_3_cnn883_sums_align_5_q[74:74];

    // redist466_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18383)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist466_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11641)@761
    assign i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_3_cnn883_sums_align_5_q[74:70];

    // redist467_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18384)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist467_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11643)@762
    assign i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist466_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist467_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18385)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11638)@762
    assign i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist468_i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2(ADD,9415)@762 + 1
    assign i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_cin = i_mul65_3_cnn883_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_3_cnn883_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_q = i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11680)@763
    assign i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_3_cnn883_sums_result_add_0_1_p2_of_2_q};

    // redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18376)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11675)@763
    assign i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist459_i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2(ADD,9426)@763 + 1
    assign i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_cin = i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_3_cnn883_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_q = i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist746_i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_q_1(DELAY,18663)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist746_i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_3_cnn883_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9427)@764
    assign i_mul65_3_cnn883_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_3_cnn883_sums_result_add_1_0_p2_of_2_q, redist746_i_mul65_3_cnn883_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_3_cnn883_extender_x(BITJOIN,2731)@764
    assign i_mul65_3_cnn883_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_3_cnn883_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_3_cnn883_sel_x(BITSELECT,1055)@764
    assign bgTrunc_i_mul65_3_cnn883_sel_x_b = i_mul65_3_cnn883_extender_x_q[63:0];

    // i_mul65_3_cnn883_vt_select_63(BITSELECT,1013)@764
    assign i_mul65_3_cnn883_vt_select_63_b = bgTrunc_i_mul65_3_cnn883_sel_x_b[63:2];

    // i_mul65_3_cnn883_vt_join(BITJOIN,1012)@764
    assign i_mul65_3_cnn883_vt_join_q = {i_mul65_3_cnn883_vt_select_63_b, i_inc79_10_cnn1194_vt_const_1_q};

    // i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select(BITSELECT,17905)@764
    assign i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_b = i_mul65_3_cnn883_vt_join_q[63:54];
    assign i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_c = i_mul65_3_cnn883_vt_join_q[53:36];
    assign i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_d = i_mul65_3_cnn883_vt_join_q[35:18];
    assign i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_e = i_mul65_3_cnn883_vt_join_q[17:0];

    // i_add_ptr66_3_cnn888_mult_x_bjA2(BITJOIN,3528)@764
    assign i_add_ptr66_3_cnn888_mult_x_bjA2_q = {GND_q, i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_3_cnn888_mult_x_im0_shift0(BITSHIFT,8172)@764
    assign i_add_ptr66_3_cnn888_mult_x_im0_shift0_qint = { i_add_ptr66_3_cnn888_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_3_cnn888_mult_x_im0_shift0_q = i_add_ptr66_3_cnn888_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_align_5(BITSHIFT,3551)@764
    assign i_add_ptr66_3_cnn888_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_3_cnn888_mult_x_im0_shift0_q[12]}}, i_add_ptr66_3_cnn888_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_3_cnn888_mult_x_sums_align_5_q = i_add_ptr66_3_cnn888_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_3_cnn888_mult_x_bjA7(BITJOIN,3533)@764
    assign i_add_ptr66_3_cnn888_mult_x_bjA7_q = {GND_q, i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_3_cnn888_mult_x_im5_shift0(BITSHIFT,8173)@764
    assign i_add_ptr66_3_cnn888_mult_x_im5_shift0_qint = { i_add_ptr66_3_cnn888_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_3_cnn888_mult_x_im5_shift0_q = i_add_ptr66_3_cnn888_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_align_3(BITSHIFT,3549)@764
    assign i_add_ptr66_3_cnn888_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_3_cnn888_mult_x_im5_shift0_q[20]}}, i_add_ptr66_3_cnn888_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_3_cnn888_mult_x_sums_align_3_q = i_add_ptr66_3_cnn888_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1(ADD,3554)@764 + 1
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_3_cnn888_mult_x_sums_align_3_q[58]}}, i_add_ptr66_3_cnn888_mult_x_sums_align_3_q};
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_3_cnn888_mult_x_sums_align_5_q[68]}}, i_add_ptr66_3_cnn888_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_q = i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12398)@765
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_3_cnn888_mult_x_bjA12(BITJOIN,3538)@764
    assign i_add_ptr66_3_cnn888_mult_x_bjA12_q = {GND_q, i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_3_cnn888_mult_x_im10_shift0(BITSHIFT,8174)@764
    assign i_add_ptr66_3_cnn888_mult_x_im10_shift0_qint = { i_add_ptr66_3_cnn888_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_3_cnn888_mult_x_im10_shift0_q = i_add_ptr66_3_cnn888_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_align_1(BITSHIFT,3547)@764
    assign i_add_ptr66_3_cnn888_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_3_cnn888_mult_x_im10_shift0_q[20]}}, i_add_ptr66_3_cnn888_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_3_cnn888_mult_x_sums_align_1_q = i_add_ptr66_3_cnn888_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_3_cnn888_mult_x_bjA17(BITJOIN,3543)@764
    assign i_add_ptr66_3_cnn888_mult_x_bjA17_q = {GND_q, i_add_ptr66_3_cnn888_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_3_cnn888_mult_x_im15_shift0(BITSHIFT,8175)@764
    assign i_add_ptr66_3_cnn888_mult_x_im15_shift0_qint = { i_add_ptr66_3_cnn888_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_3_cnn888_mult_x_im15_shift0_q = i_add_ptr66_3_cnn888_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0(ADD,3553)@764 + 1
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_3_cnn888_mult_x_im15_shift0_q[20]}}, i_add_ptr66_3_cnn888_mult_x_im15_shift0_q};
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_3_cnn888_mult_x_sums_align_1_q[40]}}, i_add_ptr66_3_cnn888_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_q = i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12426)@765
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2(ADD,9689)@765 + 1
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12431)@765
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_3_cnn888_mult_x_sums_result_add_0_1_q[69:69];

    // redist334_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18251)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist334_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist335_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18252)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist335_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2(ADD,9690)@766 + 1
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist335_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist335_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist334_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist334_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist729_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18646)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist729_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9691)@767
    assign i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p2_of_2_q, redist729_i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_3_cnn888_mult_extender_x(BITJOIN,1357)@767
    assign i_add_ptr66_3_cnn888_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_3_cnn888_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_3_cnn888_trunc_sel_x(BITSELECT,1359)@767
    assign i_add_ptr66_3_cnn888_trunc_sel_x_b = i_add_ptr66_3_cnn888_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884(BLACKBOX,714)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_885 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_select_63(BITSELECT,717)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_join(BITJOIN,716)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_3_cnn888_add_x(ADD,1351)@767
    assign i_add_ptr66_3_cnn888_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer7_cnn884_vt_join_q};
    assign i_add_ptr66_3_cnn888_add_x_b = {1'b0, i_add_ptr66_3_cnn888_trunc_sel_x_b};
    assign i_add_ptr66_3_cnn888_add_x_o = $unsigned(i_add_ptr66_3_cnn888_add_x_a) + $unsigned(i_add_ptr66_3_cnn888_add_x_b);
    assign i_add_ptr66_3_cnn888_add_x_q = i_add_ptr66_3_cnn888_add_x_o[64:0];

    // i_add_ptr66_3_cnn888_dupName_0_trunc_sel_x(BITSELECT,1360)@767
    assign i_add_ptr66_3_cnn888_dupName_0_trunc_sel_x_b = i_add_ptr66_3_cnn888_add_x_q[63:0];

    // i_add_ptr66_3_cnn887_vt_select_63(BITSELECT,78)@767
    assign i_add_ptr66_3_cnn887_vt_select_63_b = i_add_ptr66_3_cnn888_dupName_0_trunc_sel_x_b[63:4];

    // redist870_i_add_ptr66_3_cnn887_vt_select_63_b_1(DELAY,18787)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist870_i_add_ptr66_3_cnn887_vt_select_63_b_1_q <= i_add_ptr66_3_cnn887_vt_select_63_b;
        end
    end

    // i_add_ptr66_3_cnn887_vt_join(BITJOIN,77)@768
    assign i_add_ptr66_3_cnn887_vt_join_q = {redist870_i_add_ptr66_3_cnn887_vt_select_63_b_1_q, i_add_ptr66_11_cnn1199_vt_const_3_q};

    // i_add_ptr70_3_3_cnn914_add_x(ADD,1921)@768
    assign i_add_ptr70_3_3_cnn914_add_x_a = {1'b0, i_add_ptr66_3_cnn887_vt_join_q};
    assign i_add_ptr70_3_3_cnn914_add_x_b = {1'b0, i_add_ptr70_3_3_cnn914_trunc_sel_x_b};
    assign i_add_ptr70_3_3_cnn914_add_x_o = $unsigned(i_add_ptr70_3_3_cnn914_add_x_a) + $unsigned(i_add_ptr70_3_3_cnn914_add_x_b);
    assign i_add_ptr70_3_3_cnn914_add_x_q = i_add_ptr70_3_3_cnn914_add_x_o[64:0];

    // i_add_ptr70_3_3_cnn914_dupName_0_trunc_sel_x(BITSELECT,1930)@768
    assign i_add_ptr70_3_3_cnn914_dupName_0_trunc_sel_x_b = i_add_ptr70_3_3_cnn914_add_x_q[63:0];

    // i_add_ptr70_3_3_cnn913_vt_select_63(BITSELECT,249)@768
    assign i_add_ptr70_3_3_cnn913_vt_select_63_b = i_add_ptr70_3_3_cnn914_dupName_0_trunc_sel_x_b[63:2];

    // redist813_i_add_ptr70_3_3_cnn913_vt_select_63_b_1(DELAY,18730)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist813_i_add_ptr70_3_3_cnn913_vt_select_63_b_1_q <= i_add_ptr70_3_3_cnn913_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_3_cnn913_vt_join(BITJOIN,248)@769
    assign i_add_ptr70_3_3_cnn913_vt_join_q = {redist813_i_add_ptr70_3_3_cnn913_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_3_cnn916_add_x(ADD,2561)@769
    assign i_add_ptr73_371_3_cnn916_add_x_a = {1'b0, i_add_ptr70_3_3_cnn913_vt_join_q};
    assign i_add_ptr73_371_3_cnn916_add_x_b = {1'b0, i_add_ptr73_371_3_cnn916_trunc_sel_x_b};
    assign i_add_ptr73_371_3_cnn916_add_x_o = $unsigned(i_add_ptr73_371_3_cnn916_add_x_a) + $unsigned(i_add_ptr73_371_3_cnn916_add_x_b);
    assign i_add_ptr73_371_3_cnn916_add_x_q = i_add_ptr73_371_3_cnn916_add_x_o[64:0];

    // i_add_ptr73_371_3_cnn916_dupName_0_trunc_sel_x(BITSELECT,2570)@769
    assign i_add_ptr73_371_3_cnn916_dupName_0_trunc_sel_x_b = i_add_ptr73_371_3_cnn916_add_x_q[63:0];

    // i_add_ptr73_371_3_cnn915_vt_select_63(BITSELECT,441)@769
    assign i_add_ptr73_371_3_cnn915_vt_select_63_b = i_add_ptr73_371_3_cnn916_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_3_cnn915_vt_join(BITJOIN,440)@769
    assign i_add_ptr73_371_3_cnn915_vt_join_q = {i_add_ptr73_371_3_cnn915_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_select_63(BITSELECT,758)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_select_63_b = i_add_ptr73_371_3_cnn915_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_join(BITJOIN,757)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn123_cnn910(BLACKBOX,587)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_123_cnn911 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn123_cnn910 (
        .in_intel_reserved_ffwd_42_0(in_intel_reserved_ffwd_42_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_42_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn123_cnn910_out_dest_data_out_42_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_3_cnn908_mult_x_im0_shift0(BITSHIFT,8584)@766
    assign i_add_ptr73_270_3_cnn908_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_3_cnn908_mult_x_im0_shift0_q = i_add_ptr73_270_3_cnn908_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_align_5(BITSHIFT,6641)@766
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_3_cnn908_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_3_cnn908_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_align_5_q = i_add_ptr73_270_3_cnn908_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_3_cnn908_mult_x_im5_shift0(BITSHIFT,8585)@766
    assign i_add_ptr73_270_3_cnn908_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_3_cnn908_mult_x_im5_shift0_q = i_add_ptr73_270_3_cnn908_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_align_3(BITSHIFT,6639)@766
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_3_cnn908_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_3_cnn908_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_align_3_q = i_add_ptr73_270_3_cnn908_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1(ADD,6644)@766 + 1
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_3_cnn908_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_3_cnn908_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_3_cnn908_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_3_cnn908_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16106)@767
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_3_cnn908_mult_x_im10_shift0(BITSHIFT,8586)@766
    assign i_add_ptr73_270_3_cnn908_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_3_cnn908_mult_x_im10_shift0_q = i_add_ptr73_270_3_cnn908_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_align_1(BITSHIFT,6637)@766
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_3_cnn908_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_3_cnn908_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_align_1_q = i_add_ptr73_270_3_cnn908_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_3_cnn908_mult_x_im15_shift0(BITSHIFT,8587)@766
    assign i_add_ptr73_270_3_cnn908_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_3_cnn908_mult_x_im15_shift0_q = i_add_ptr73_270_3_cnn908_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0(ADD,6643)@766 + 1
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_3_cnn908_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_3_cnn908_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_3_cnn908_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_3_cnn908_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16134)@767
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2(ADD,10822)@767 + 1
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16139)@767
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_0_1_q[69:69];

    // redist128_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18045)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist128_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist129_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18046)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist129_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2(ADD,10823)@768 + 1
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist129_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist129_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist128_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist128_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist626_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18543)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist626_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10824)@769
    assign i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p2_of_2_q, redist626_i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_3_cnn908_mult_extender_x(BITJOIN,2387)@769
    assign i_add_ptr73_270_3_cnn908_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_3_cnn908_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_3_cnn908_trunc_sel_x(BITSELECT,2389)@769
    assign i_add_ptr73_270_3_cnn908_trunc_sel_x_b = i_add_ptr73_270_3_cnn908_mult_extender_x_q[63:0];

    // i_add_ptr70_2_3_cnn906_mult_x_im0_shift0(BITSHIFT,8332)@765
    assign i_add_ptr70_2_3_cnn906_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_3_cnn906_mult_x_im0_shift0_q = i_add_ptr70_2_3_cnn906_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_align_5(BITSHIFT,4751)@765
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_3_cnn906_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_3_cnn906_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_align_5_q = i_add_ptr70_2_3_cnn906_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_3_cnn906_mult_x_im5_shift0(BITSHIFT,8333)@765
    assign i_add_ptr70_2_3_cnn906_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_3_cnn906_mult_x_im5_shift0_q = i_add_ptr70_2_3_cnn906_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_align_3(BITSHIFT,4749)@765
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_3_cnn906_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_3_cnn906_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_align_3_q = i_add_ptr70_2_3_cnn906_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1(ADD,4754)@765 + 1
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_3_cnn906_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_3_cnn906_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_3_cnn906_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_3_cnn906_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13838)@766
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_3_cnn906_mult_x_im10_shift0(BITSHIFT,8334)@765
    assign i_add_ptr70_2_3_cnn906_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_3_cnn906_mult_x_im10_shift0_q = i_add_ptr70_2_3_cnn906_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_align_1(BITSHIFT,4747)@765
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_3_cnn906_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_3_cnn906_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_align_1_q = i_add_ptr70_2_3_cnn906_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_3_cnn906_mult_x_im15_shift0(BITSHIFT,8335)@765
    assign i_add_ptr70_2_3_cnn906_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_3_cnn906_mult_x_im15_shift0_q = i_add_ptr70_2_3_cnn906_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0(ADD,4753)@765 + 1
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_3_cnn906_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_3_cnn906_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_3_cnn906_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_3_cnn906_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13866)@766
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2(ADD,10129)@766 + 1
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13871)@766
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_0_1_q[69:69];

    // redist254_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18171)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist254_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist255_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18172)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist255_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2(ADD,10130)@767 + 1
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist255_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist255_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist254_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist254_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist689_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18606)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist689_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10131)@768
    assign i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p2_of_2_q, redist689_i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_3_cnn906_mult_extender_x(BITJOIN,1757)@768
    assign i_add_ptr70_2_3_cnn906_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_3_cnn906_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_3_cnn906_trunc_sel_x(BITSELECT,1759)@768
    assign i_add_ptr70_2_3_cnn906_trunc_sel_x_b = i_add_ptr70_2_3_cnn906_mult_extender_x_q[63:0];

    // i_add_ptr70_2_3_cnn906_add_x(ADD,1751)@768
    assign i_add_ptr70_2_3_cnn906_add_x_a = {1'b0, i_add_ptr66_3_cnn887_vt_join_q};
    assign i_add_ptr70_2_3_cnn906_add_x_b = {1'b0, i_add_ptr70_2_3_cnn906_trunc_sel_x_b};
    assign i_add_ptr70_2_3_cnn906_add_x_o = $unsigned(i_add_ptr70_2_3_cnn906_add_x_a) + $unsigned(i_add_ptr70_2_3_cnn906_add_x_b);
    assign i_add_ptr70_2_3_cnn906_add_x_q = i_add_ptr70_2_3_cnn906_add_x_o[64:0];

    // i_add_ptr70_2_3_cnn906_dupName_0_trunc_sel_x(BITSELECT,1760)@768
    assign i_add_ptr70_2_3_cnn906_dupName_0_trunc_sel_x_b = i_add_ptr70_2_3_cnn906_add_x_q[63:0];

    // i_add_ptr70_2_3_cnn905_vt_select_63(BITSELECT,198)@768
    assign i_add_ptr70_2_3_cnn905_vt_select_63_b = i_add_ptr70_2_3_cnn906_dupName_0_trunc_sel_x_b[63:2];

    // redist830_i_add_ptr70_2_3_cnn905_vt_select_63_b_1(DELAY,18747)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist830_i_add_ptr70_2_3_cnn905_vt_select_63_b_1_q <= i_add_ptr70_2_3_cnn905_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_3_cnn905_vt_join(BITJOIN,197)@769
    assign i_add_ptr70_2_3_cnn905_vt_join_q = {redist830_i_add_ptr70_2_3_cnn905_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_3_cnn908_add_x(ADD,2381)@769
    assign i_add_ptr73_270_3_cnn908_add_x_a = {1'b0, i_add_ptr70_2_3_cnn905_vt_join_q};
    assign i_add_ptr73_270_3_cnn908_add_x_b = {1'b0, i_add_ptr73_270_3_cnn908_trunc_sel_x_b};
    assign i_add_ptr73_270_3_cnn908_add_x_o = $unsigned(i_add_ptr73_270_3_cnn908_add_x_a) + $unsigned(i_add_ptr73_270_3_cnn908_add_x_b);
    assign i_add_ptr73_270_3_cnn908_add_x_q = i_add_ptr73_270_3_cnn908_add_x_o[64:0];

    // i_add_ptr73_270_3_cnn908_dupName_0_trunc_sel_x(BITSELECT,2390)@769
    assign i_add_ptr73_270_3_cnn908_dupName_0_trunc_sel_x_b = i_add_ptr73_270_3_cnn908_add_x_q[63:0];

    // i_add_ptr73_270_3_cnn907_vt_select_63(BITSELECT,387)@769
    assign i_add_ptr73_270_3_cnn907_vt_select_63_b = i_add_ptr73_270_3_cnn908_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_3_cnn907_vt_join(BITJOIN,386)@769
    assign i_add_ptr73_270_3_cnn907_vt_join_q = {i_add_ptr73_270_3_cnn907_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_select_63(BITSELECT,754)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_select_63_b = i_add_ptr73_270_3_cnn907_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_join(BITJOIN,753)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn122_cnn902(BLACKBOX,586)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_122_cnn903 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn122_cnn902 (
        .in_intel_reserved_ffwd_41_0(in_intel_reserved_ffwd_41_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_41_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn122_cnn902_out_dest_data_out_41_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_3_cnn900_mult_x_im0_shift0(BITSHIFT,8516)@766
    assign i_add_ptr73_169_3_cnn900_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_3_cnn900_mult_x_im0_shift0_q = i_add_ptr73_169_3_cnn900_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_align_5(BITSHIFT,6131)@766
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_3_cnn900_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_3_cnn900_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_align_5_q = i_add_ptr73_169_3_cnn900_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_3_cnn900_mult_x_im5_shift0(BITSHIFT,8517)@766
    assign i_add_ptr73_169_3_cnn900_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_3_cnn900_mult_x_im5_shift0_q = i_add_ptr73_169_3_cnn900_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_align_3(BITSHIFT,6129)@766
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_3_cnn900_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_3_cnn900_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_align_3_q = i_add_ptr73_169_3_cnn900_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1(ADD,6134)@766 + 1
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_3_cnn900_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_3_cnn900_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_3_cnn900_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_3_cnn900_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15494)@767
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_3_cnn900_mult_x_im10_shift0(BITSHIFT,8518)@766
    assign i_add_ptr73_169_3_cnn900_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_3_cnn900_mult_x_im10_shift0_q = i_add_ptr73_169_3_cnn900_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_align_1(BITSHIFT,6127)@766
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_3_cnn900_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_3_cnn900_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_align_1_q = i_add_ptr73_169_3_cnn900_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_3_cnn900_mult_x_im15_shift0(BITSHIFT,8519)@766
    assign i_add_ptr73_169_3_cnn900_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_3_cnn900_mult_x_im15_shift0_q = i_add_ptr73_169_3_cnn900_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0(ADD,6133)@766 + 1
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_3_cnn900_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_3_cnn900_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_3_cnn900_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_3_cnn900_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15522)@767
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2(ADD,10635)@767 + 1
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15527)@767
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_0_1_q[69:69];

    // redist162_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18079)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist162_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist163_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18080)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist163_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2(ADD,10636)@768 + 1
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist163_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist163_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist162_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist162_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist643_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18560)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist643_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10637)@769
    assign i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p2_of_2_q, redist643_i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_3_cnn900_mult_extender_x(BITJOIN,2217)@769
    assign i_add_ptr73_169_3_cnn900_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_3_cnn900_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_3_cnn900_trunc_sel_x(BITSELECT,2219)@769
    assign i_add_ptr73_169_3_cnn900_trunc_sel_x_b = i_add_ptr73_169_3_cnn900_mult_extender_x_q[63:0];

    // i_add_ptr70_1_3_cnn898_mult_x_im0_shift0(BITSHIFT,8264)@765
    assign i_add_ptr70_1_3_cnn898_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_3_cnn898_mult_x_im0_shift0_q = i_add_ptr70_1_3_cnn898_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_align_5(BITSHIFT,4241)@765
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_3_cnn898_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_3_cnn898_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_align_5_q = i_add_ptr70_1_3_cnn898_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_3_cnn898_mult_x_im5_shift0(BITSHIFT,8265)@765
    assign i_add_ptr70_1_3_cnn898_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_3_cnn898_mult_x_im5_shift0_q = i_add_ptr70_1_3_cnn898_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_align_3(BITSHIFT,4239)@765
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_3_cnn898_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_3_cnn898_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_align_3_q = i_add_ptr70_1_3_cnn898_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1(ADD,4244)@765 + 1
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_3_cnn898_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_3_cnn898_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_3_cnn898_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_3_cnn898_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13226)@766
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_3_cnn898_mult_x_im10_shift0(BITSHIFT,8266)@765
    assign i_add_ptr70_1_3_cnn898_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_3_cnn898_mult_x_im10_shift0_q = i_add_ptr70_1_3_cnn898_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_align_1(BITSHIFT,4237)@765
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_3_cnn898_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_3_cnn898_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_align_1_q = i_add_ptr70_1_3_cnn898_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_3_cnn898_mult_x_im15_shift0(BITSHIFT,8267)@765
    assign i_add_ptr70_1_3_cnn898_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_3_cnn898_mult_x_im15_shift0_q = i_add_ptr70_1_3_cnn898_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0(ADD,4243)@765 + 1
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_3_cnn898_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_3_cnn898_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_3_cnn898_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_3_cnn898_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13254)@766
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2(ADD,9942)@766 + 1
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13259)@766
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_0_1_q[69:69];

    // redist288_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18205)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist288_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist289_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18206)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist289_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2(ADD,9943)@767 + 1
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist289_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist289_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist288_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist288_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist706_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18623)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist706_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9944)@768
    assign i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p2_of_2_q, redist706_i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_3_cnn898_mult_extender_x(BITJOIN,1587)@768
    assign i_add_ptr70_1_3_cnn898_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_3_cnn898_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_3_cnn898_trunc_sel_x(BITSELECT,1589)@768
    assign i_add_ptr70_1_3_cnn898_trunc_sel_x_b = i_add_ptr70_1_3_cnn898_mult_extender_x_q[63:0];

    // i_add_ptr70_1_3_cnn898_add_x(ADD,1581)@768
    assign i_add_ptr70_1_3_cnn898_add_x_a = {1'b0, i_add_ptr66_3_cnn887_vt_join_q};
    assign i_add_ptr70_1_3_cnn898_add_x_b = {1'b0, i_add_ptr70_1_3_cnn898_trunc_sel_x_b};
    assign i_add_ptr70_1_3_cnn898_add_x_o = $unsigned(i_add_ptr70_1_3_cnn898_add_x_a) + $unsigned(i_add_ptr70_1_3_cnn898_add_x_b);
    assign i_add_ptr70_1_3_cnn898_add_x_q = i_add_ptr70_1_3_cnn898_add_x_o[64:0];

    // i_add_ptr70_1_3_cnn898_dupName_0_trunc_sel_x(BITSELECT,1590)@768
    assign i_add_ptr70_1_3_cnn898_dupName_0_trunc_sel_x_b = i_add_ptr70_1_3_cnn898_add_x_q[63:0];

    // i_add_ptr70_1_3_cnn897_vt_select_63(BITSELECT,147)@768
    assign i_add_ptr70_1_3_cnn897_vt_select_63_b = i_add_ptr70_1_3_cnn898_dupName_0_trunc_sel_x_b[63:2];

    // redist847_i_add_ptr70_1_3_cnn897_vt_select_63_b_1(DELAY,18764)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist847_i_add_ptr70_1_3_cnn897_vt_select_63_b_1_q <= i_add_ptr70_1_3_cnn897_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_3_cnn897_vt_join(BITJOIN,146)@769
    assign i_add_ptr70_1_3_cnn897_vt_join_q = {redist847_i_add_ptr70_1_3_cnn897_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_3_cnn900_add_x(ADD,2211)@769
    assign i_add_ptr73_169_3_cnn900_add_x_a = {1'b0, i_add_ptr70_1_3_cnn897_vt_join_q};
    assign i_add_ptr73_169_3_cnn900_add_x_b = {1'b0, i_add_ptr73_169_3_cnn900_trunc_sel_x_b};
    assign i_add_ptr73_169_3_cnn900_add_x_o = $unsigned(i_add_ptr73_169_3_cnn900_add_x_a) + $unsigned(i_add_ptr73_169_3_cnn900_add_x_b);
    assign i_add_ptr73_169_3_cnn900_add_x_q = i_add_ptr73_169_3_cnn900_add_x_o[64:0];

    // i_add_ptr73_169_3_cnn900_dupName_0_trunc_sel_x(BITSELECT,2220)@769
    assign i_add_ptr73_169_3_cnn900_dupName_0_trunc_sel_x_b = i_add_ptr73_169_3_cnn900_add_x_q[63:0];

    // i_add_ptr73_169_3_cnn899_vt_select_63(BITSELECT,336)@769
    assign i_add_ptr73_169_3_cnn899_vt_select_63_b = i_add_ptr73_169_3_cnn900_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_3_cnn899_vt_join(BITJOIN,335)@769
    assign i_add_ptr73_169_3_cnn899_vt_join_q = {i_add_ptr73_169_3_cnn899_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_select_63(BITSELECT,750)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_select_63_b = i_add_ptr73_169_3_cnn899_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_join(BITJOIN,749)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn121_cnn894(BLACKBOX,585)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_121_cnn895 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn121_cnn894 (
        .in_intel_reserved_ffwd_40_0(in_intel_reserved_ffwd_40_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_40_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn121_cnn894_out_dest_data_out_40_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_3100_cnn892_mult_x_im0_shift0(BITSHIFT,8620)@766
    assign i_add_ptr73_3100_cnn892_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_3100_cnn892_mult_x_im0_shift0_q = i_add_ptr73_3100_cnn892_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_align_5(BITSHIFT,6911)@766
    assign i_add_ptr73_3100_cnn892_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_3100_cnn892_mult_x_im0_shift0_q[12]}}, i_add_ptr73_3100_cnn892_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_3100_cnn892_mult_x_sums_align_5_q = i_add_ptr73_3100_cnn892_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_3100_cnn892_mult_x_im5_shift0(BITSHIFT,8621)@766
    assign i_add_ptr73_3100_cnn892_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_3100_cnn892_mult_x_im5_shift0_q = i_add_ptr73_3100_cnn892_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_align_3(BITSHIFT,6909)@766
    assign i_add_ptr73_3100_cnn892_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_3100_cnn892_mult_x_im5_shift0_q[20]}}, i_add_ptr73_3100_cnn892_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_3100_cnn892_mult_x_sums_align_3_q = i_add_ptr73_3100_cnn892_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1(ADD,6914)@766 + 1
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_3100_cnn892_mult_x_sums_align_3_q[58]}}, i_add_ptr73_3100_cnn892_mult_x_sums_align_3_q};
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_3100_cnn892_mult_x_sums_align_5_q[68]}}, i_add_ptr73_3100_cnn892_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_q = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16430)@767
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_3100_cnn892_mult_x_im10_shift0(BITSHIFT,8622)@766
    assign i_add_ptr73_3100_cnn892_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_3100_cnn892_mult_x_im10_shift0_q = i_add_ptr73_3100_cnn892_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_align_1(BITSHIFT,6907)@766
    assign i_add_ptr73_3100_cnn892_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_3100_cnn892_mult_x_im10_shift0_q[20]}}, i_add_ptr73_3100_cnn892_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_3100_cnn892_mult_x_sums_align_1_q = i_add_ptr73_3100_cnn892_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_3100_cnn892_mult_x_im15_shift0(BITSHIFT,8623)@766
    assign i_add_ptr73_3100_cnn892_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_3100_cnn892_mult_x_im15_shift0_q = i_add_ptr73_3100_cnn892_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0(ADD,6913)@766 + 1
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_3100_cnn892_mult_x_im15_shift0_q[20]}}, i_add_ptr73_3100_cnn892_mult_x_im15_shift0_q};
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_3100_cnn892_mult_x_sums_align_1_q[40]}}, i_add_ptr73_3100_cnn892_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_q = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16458)@767
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2(ADD,10921)@767 + 1
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16463)@767
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_0_1_q[69:69];

    // redist110_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18027)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist110_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist111_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18028)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist111_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2(ADD,10922)@768 + 1
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist111_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist111_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist110_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist110_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist617_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18534)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist617_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10923)@769
    assign i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p2_of_2_q, redist617_i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_3100_cnn892_mult_extender_x(BITJOIN,2477)@769
    assign i_add_ptr73_3100_cnn892_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_3100_cnn892_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_3100_cnn892_trunc_sel_x(BITSELECT,2479)@769
    assign i_add_ptr73_3100_cnn892_trunc_sel_x_b = i_add_ptr73_3100_cnn892_mult_extender_x_q[63:0];

    // i_add_ptr70_399_cnn890_mult_x_im0_shift0(BITSHIFT,8364)@765
    assign i_add_ptr70_399_cnn890_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_399_cnn890_mult_x_im0_shift0_q = i_add_ptr70_399_cnn890_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_align_5(BITSHIFT,4991)@765
    assign i_add_ptr70_399_cnn890_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_399_cnn890_mult_x_im0_shift0_q[12]}}, i_add_ptr70_399_cnn890_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_399_cnn890_mult_x_sums_align_5_q = i_add_ptr70_399_cnn890_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_399_cnn890_mult_x_im5_shift0(BITSHIFT,8365)@765
    assign i_add_ptr70_399_cnn890_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_399_cnn890_mult_x_im5_shift0_q = i_add_ptr70_399_cnn890_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_align_3(BITSHIFT,4989)@765
    assign i_add_ptr70_399_cnn890_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_399_cnn890_mult_x_im5_shift0_q[20]}}, i_add_ptr70_399_cnn890_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_399_cnn890_mult_x_sums_align_3_q = i_add_ptr70_399_cnn890_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1(ADD,4994)@765 + 1
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_399_cnn890_mult_x_sums_align_3_q[58]}}, i_add_ptr70_399_cnn890_mult_x_sums_align_3_q};
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_399_cnn890_mult_x_sums_align_5_q[68]}}, i_add_ptr70_399_cnn890_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_q = i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14126)@766
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_399_cnn890_mult_x_im10_shift0(BITSHIFT,8366)@765
    assign i_add_ptr70_399_cnn890_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_399_cnn890_mult_x_im10_shift0_q = i_add_ptr70_399_cnn890_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_align_1(BITSHIFT,4987)@765
    assign i_add_ptr70_399_cnn890_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_399_cnn890_mult_x_im10_shift0_q[20]}}, i_add_ptr70_399_cnn890_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_399_cnn890_mult_x_sums_align_1_q = i_add_ptr70_399_cnn890_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_399_cnn890_mult_x_im15_shift0(BITSHIFT,8367)@765
    assign i_add_ptr70_399_cnn890_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_399_cnn890_mult_x_im15_shift0_q = i_add_ptr70_399_cnn890_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0(ADD,4993)@765 + 1
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_399_cnn890_mult_x_im15_shift0_q[20]}}, i_add_ptr70_399_cnn890_mult_x_im15_shift0_q};
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_399_cnn890_mult_x_sums_align_1_q[40]}}, i_add_ptr70_399_cnn890_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_q = i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14154)@766
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2(ADD,10217)@766 + 1
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14159)@766
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_399_cnn890_mult_x_sums_result_add_0_1_q[69:69];

    // redist238_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18155)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist238_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist239_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18156)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist239_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2(ADD,10218)@767 + 1
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist239_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist239_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist238_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist238_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist681_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18598)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist681_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10219)@768
    assign i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p2_of_2_q, redist681_i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_399_cnn890_mult_extender_x(BITJOIN,1837)@768
    assign i_add_ptr70_399_cnn890_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_399_cnn890_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_399_cnn890_trunc_sel_x(BITSELECT,1839)@768
    assign i_add_ptr70_399_cnn890_trunc_sel_x_b = i_add_ptr70_399_cnn890_mult_extender_x_q[63:0];

    // i_add_ptr70_399_cnn890_add_x(ADD,1831)@768
    assign i_add_ptr70_399_cnn890_add_x_a = {1'b0, i_add_ptr66_3_cnn887_vt_join_q};
    assign i_add_ptr70_399_cnn890_add_x_b = {1'b0, i_add_ptr70_399_cnn890_trunc_sel_x_b};
    assign i_add_ptr70_399_cnn890_add_x_o = $unsigned(i_add_ptr70_399_cnn890_add_x_a) + $unsigned(i_add_ptr70_399_cnn890_add_x_b);
    assign i_add_ptr70_399_cnn890_add_x_q = i_add_ptr70_399_cnn890_add_x_o[64:0];

    // i_add_ptr70_399_cnn890_dupName_0_trunc_sel_x(BITSELECT,1840)@768
    assign i_add_ptr70_399_cnn890_dupName_0_trunc_sel_x_b = i_add_ptr70_399_cnn890_add_x_q[63:0];

    // i_add_ptr70_399_cnn889_vt_select_63(BITSELECT,222)@768
    assign i_add_ptr70_399_cnn889_vt_select_63_b = i_add_ptr70_399_cnn890_dupName_0_trunc_sel_x_b[63:2];

    // redist822_i_add_ptr70_399_cnn889_vt_select_63_b_1(DELAY,18739)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist822_i_add_ptr70_399_cnn889_vt_select_63_b_1_q <= i_add_ptr70_399_cnn889_vt_select_63_b;
        end
    end

    // i_add_ptr70_399_cnn889_vt_join(BITJOIN,221)@769
    assign i_add_ptr70_399_cnn889_vt_join_q = {redist822_i_add_ptr70_399_cnn889_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_3100_cnn892_add_x(ADD,2471)@769
    assign i_add_ptr73_3100_cnn892_add_x_a = {1'b0, i_add_ptr70_399_cnn889_vt_join_q};
    assign i_add_ptr73_3100_cnn892_add_x_b = {1'b0, i_add_ptr73_3100_cnn892_trunc_sel_x_b};
    assign i_add_ptr73_3100_cnn892_add_x_o = $unsigned(i_add_ptr73_3100_cnn892_add_x_a) + $unsigned(i_add_ptr73_3100_cnn892_add_x_b);
    assign i_add_ptr73_3100_cnn892_add_x_q = i_add_ptr73_3100_cnn892_add_x_o[64:0];

    // i_add_ptr73_3100_cnn892_dupName_0_trunc_sel_x(BITSELECT,2480)@769
    assign i_add_ptr73_3100_cnn892_dupName_0_trunc_sel_x_b = i_add_ptr73_3100_cnn892_add_x_q[63:0];

    // i_add_ptr73_3100_cnn891_vt_select_63(BITSELECT,414)@769
    assign i_add_ptr73_3100_cnn891_vt_select_63_b = i_add_ptr73_3100_cnn892_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_3100_cnn891_vt_join(BITJOIN,413)@769
    assign i_add_ptr73_3100_cnn891_vt_join_q = {i_add_ptr73_3100_cnn891_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_select_63(BITSELECT,746)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_select_63_b = i_add_ptr73_3100_cnn891_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_join(BITJOIN,745)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn120_cnn879(BLACKBOX,584)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_120_cnn880 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn120_cnn879 (
        .in_intel_reserved_ffwd_39_0(in_intel_reserved_ffwd_39_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_39_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn120_cnn879_out_dest_data_out_39_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_2_cnn877_mult_x_im0_shift0(BITSHIFT,8652)@766
    assign i_add_ptr73_371_2_cnn877_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_2_cnn877_mult_x_im0_shift0_q = i_add_ptr73_371_2_cnn877_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_align_5(BITSHIFT,7151)@766
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_2_cnn877_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_2_cnn877_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_align_5_q = i_add_ptr73_371_2_cnn877_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_2_cnn877_mult_x_im5_shift0(BITSHIFT,8653)@766
    assign i_add_ptr73_371_2_cnn877_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_2_cnn877_mult_x_im5_shift0_q = i_add_ptr73_371_2_cnn877_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_align_3(BITSHIFT,7149)@766
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_2_cnn877_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_2_cnn877_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_align_3_q = i_add_ptr73_371_2_cnn877_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1(ADD,7154)@766 + 1
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_2_cnn877_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_2_cnn877_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_2_cnn877_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_2_cnn877_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16718)@767
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_2_cnn877_mult_x_im10_shift0(BITSHIFT,8654)@766
    assign i_add_ptr73_371_2_cnn877_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_2_cnn877_mult_x_im10_shift0_q = i_add_ptr73_371_2_cnn877_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_align_1(BITSHIFT,7147)@766
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_2_cnn877_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_2_cnn877_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_align_1_q = i_add_ptr73_371_2_cnn877_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_2_cnn877_mult_x_im15_shift0(BITSHIFT,8655)@766
    assign i_add_ptr73_371_2_cnn877_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_2_cnn877_mult_x_im15_shift0_q = i_add_ptr73_371_2_cnn877_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0(ADD,7153)@766 + 1
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_2_cnn877_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_2_cnn877_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_2_cnn877_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_2_cnn877_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16746)@767
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2(ADD,11009)@767 + 1
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16751)@767
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_0_1_q[69:69];

    // redist94_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18011)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist94_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist95_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18012)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist95_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2(ADD,11010)@768 + 1
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist95_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist95_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist94_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist94_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist609_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18526)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist609_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11011)@769
    assign i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p2_of_2_q, redist609_i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_2_cnn877_mult_extender_x(BITJOIN,2557)@769
    assign i_add_ptr73_371_2_cnn877_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_2_cnn877_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_2_cnn877_trunc_sel_x(BITSELECT,2559)@769
    assign i_add_ptr73_371_2_cnn877_trunc_sel_x_b = i_add_ptr73_371_2_cnn877_mult_extender_x_q[63:0];

    // i_add_ptr70_3_2_cnn875_mult_x_im0_shift0(BITSHIFT,8396)@765
    assign i_add_ptr70_3_2_cnn875_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_2_cnn875_mult_x_im0_shift0_q = i_add_ptr70_3_2_cnn875_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_align_5(BITSHIFT,5231)@765
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_2_cnn875_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_2_cnn875_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_align_5_q = i_add_ptr70_3_2_cnn875_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_2_cnn875_mult_x_im5_shift0(BITSHIFT,8397)@765
    assign i_add_ptr70_3_2_cnn875_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_2_cnn875_mult_x_im5_shift0_q = i_add_ptr70_3_2_cnn875_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_align_3(BITSHIFT,5229)@765
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_2_cnn875_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_2_cnn875_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_align_3_q = i_add_ptr70_3_2_cnn875_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1(ADD,5234)@765 + 1
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_2_cnn875_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_2_cnn875_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_2_cnn875_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_2_cnn875_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14414)@766
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_2_cnn875_mult_x_im10_shift0(BITSHIFT,8398)@765
    assign i_add_ptr70_3_2_cnn875_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_2_cnn875_mult_x_im10_shift0_q = i_add_ptr70_3_2_cnn875_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_align_1(BITSHIFT,5227)@765
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_2_cnn875_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_2_cnn875_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_align_1_q = i_add_ptr70_3_2_cnn875_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_2_cnn875_mult_x_im15_shift0(BITSHIFT,8399)@765
    assign i_add_ptr70_3_2_cnn875_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_2_cnn875_mult_x_im15_shift0_q = i_add_ptr70_3_2_cnn875_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0(ADD,5233)@765 + 1
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_2_cnn875_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_2_cnn875_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_2_cnn875_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_2_cnn875_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14442)@766
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2(ADD,10305)@766 + 1
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14447)@766
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_0_1_q[69:69];

    // redist222_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18139)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist222_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist223_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18140)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist223_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2(ADD,10306)@767 + 1
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist223_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist223_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist222_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist222_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist673_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18590)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist673_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10307)@768
    assign i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p2_of_2_q, redist673_i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_2_cnn875_mult_extender_x(BITJOIN,1917)@768
    assign i_add_ptr70_3_2_cnn875_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_2_cnn875_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_2_cnn875_trunc_sel_x(BITSELECT,1919)@768
    assign i_add_ptr70_3_2_cnn875_trunc_sel_x_b = i_add_ptr70_3_2_cnn875_mult_extender_x_q[63:0];

    // c_i64_2gr(CONSTANT,40)
    assign c_i64_2gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000010;

    // i_inc79_1_cnn843(LOGICAL,513)@754
    assign i_inc79_1_cnn843_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_2gr_q;

    // i_inc79_1_cnn843_vt_select_0_merged_bit_select(BITSELECT,17878)@754
    assign i_inc79_1_cnn843_vt_select_0_merged_bit_select_b = i_inc79_1_cnn843_q[0:0];
    assign i_inc79_1_cnn843_vt_select_0_merged_bit_select_c = i_inc79_1_cnn843_q[63:2];

    // i_inc79_1_cnn843_vt_join(BITJOIN,515)@754
    assign i_inc79_1_cnn843_vt_join_q = {i_inc79_1_cnn843_vt_select_0_merged_bit_select_c, VCC_q, i_inc79_1_cnn843_vt_select_0_merged_bit_select_b};

    // i_mul65_2_cnn844_bs1_merged_bit_select(BITSELECT,17879)@754
    assign i_mul65_2_cnn844_bs1_merged_bit_select_b = i_inc79_1_cnn843_vt_join_q[63:54];
    assign i_mul65_2_cnn844_bs1_merged_bit_select_c = i_inc79_1_cnn843_vt_join_q[53:36];
    assign i_mul65_2_cnn844_bs1_merged_bit_select_d = i_inc79_1_cnn843_vt_join_q[35:18];
    assign i_mul65_2_cnn844_bs1_merged_bit_select_e = i_inc79_1_cnn843_vt_join_q[17:0];

    // i_mul65_2_cnn844_bjA2(BITJOIN,2988)@754
    assign i_mul65_2_cnn844_bjA2_q = {GND_q, i_mul65_2_cnn844_bs1_merged_bit_select_b};

    // i_mul65_2_cnn844_im0_cma(CHAINMULTADD,17833)@754 + 5
    // out q@760
    assign i_mul65_2_cnn844_im0_cma_reset = ~ (resetn);
    assign i_mul65_2_cnn844_im0_cma_ena0 = 1'b1;
    assign i_mul65_2_cnn844_im0_cma_ena1 = i_mul65_2_cnn844_im0_cma_ena0;
    assign i_mul65_2_cnn844_im0_cma_ena2 = i_mul65_2_cnn844_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_im0_cma_ah[0] <= i_mul65_2_cnn844_bjA2_q;
        end
    end

    assign i_mul65_2_cnn844_im0_cma_a0 = i_mul65_2_cnn844_im0_cma_ah[0];
    assign i_mul65_2_cnn844_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_2_cnn844_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_2_cnn844_im0_cma_ena2, i_mul65_2_cnn844_im0_cma_ena1, i_mul65_2_cnn844_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_2_cnn844_im0_cma_a0),
        .coefsela(i_mul65_2_cnn844_im0_cma_c0),
        .resulta(i_mul65_2_cnn844_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_2_cnn844_im0_cma_delay ( .xin(i_mul65_2_cnn844_im0_cma_s0), .xout(i_mul65_2_cnn844_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_2_cnn844_im0_cma_q = i_mul65_2_cnn844_im0_cma_qq[21:0];

    // redist35_i_mul65_2_cnn844_im0_cma_q_1(DELAY,17952)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist35_i_mul65_2_cnn844_im0_cma_q_1_q <= i_mul65_2_cnn844_im0_cma_q;
        end
    end

    // i_mul65_2_cnn844_sums_align_5(BITSHIFT,3011)@761
    assign i_mul65_2_cnn844_sums_align_5_qint = { redist35_i_mul65_2_cnn844_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_2_cnn844_sums_align_5_q = i_mul65_2_cnn844_sums_align_5_qint[74:0];

    // i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11583)@761
    assign i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_2_cnn844_sums_align_5_q[69:0];

    // i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11570)@761
    assign i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_2_cnn844_sums_align_3_q[64:64];

    // i_mul65_2_cnn844_bjA7(BITJOIN,2993)@754
    assign i_mul65_2_cnn844_bjA7_q = {GND_q, i_mul65_2_cnn844_bs1_merged_bit_select_c};

    // i_mul65_2_cnn844_im5_cma(CHAINMULTADD,17834)@754 + 5
    // out q@760
    assign i_mul65_2_cnn844_im5_cma_reset = ~ (resetn);
    assign i_mul65_2_cnn844_im5_cma_ena0 = 1'b1;
    assign i_mul65_2_cnn844_im5_cma_ena1 = i_mul65_2_cnn844_im5_cma_ena0;
    assign i_mul65_2_cnn844_im5_cma_ena2 = i_mul65_2_cnn844_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_im5_cma_ah[0] <= i_mul65_2_cnn844_bjA7_q;
        end
    end

    assign i_mul65_2_cnn844_im5_cma_a0 = i_mul65_2_cnn844_im5_cma_ah[0];
    assign i_mul65_2_cnn844_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_2_cnn844_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_2_cnn844_im5_cma_ena2, i_mul65_2_cnn844_im5_cma_ena1, i_mul65_2_cnn844_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_2_cnn844_im5_cma_a0),
        .coefsela(i_mul65_2_cnn844_im5_cma_c0),
        .resulta(i_mul65_2_cnn844_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_2_cnn844_im5_cma_delay ( .xin(i_mul65_2_cnn844_im5_cma_s0), .xout(i_mul65_2_cnn844_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_2_cnn844_im5_cma_q = i_mul65_2_cnn844_im5_cma_qq[29:0];

    // redist34_i_mul65_2_cnn844_im5_cma_q_1(DELAY,17951)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist34_i_mul65_2_cnn844_im5_cma_q_1_q <= i_mul65_2_cnn844_im5_cma_q;
        end
    end

    // i_mul65_2_cnn844_sums_align_3(BITSHIFT,3009)@761
    assign i_mul65_2_cnn844_sums_align_3_qint = { redist34_i_mul65_2_cnn844_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_2_cnn844_sums_align_3_q = i_mul65_2_cnn844_sums_align_3_qint[64:0];

    // i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11575)@761
    assign i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_align_3_q};

    // i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2(ADD,9392)@761 + 1
    assign i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_q = i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11589)@762
    assign i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_2_cnn844_sums_result_add_0_0_q[47:47];

    // i_mul65_2_cnn844_bjA12(BITJOIN,2998)@754
    assign i_mul65_2_cnn844_bjA12_q = {GND_q, i_mul65_2_cnn844_bs1_merged_bit_select_d};

    // i_mul65_2_cnn844_im10_cma(CHAINMULTADD,17835)@754 + 5
    // out q@760
    assign i_mul65_2_cnn844_im10_cma_reset = ~ (resetn);
    assign i_mul65_2_cnn844_im10_cma_ena0 = 1'b1;
    assign i_mul65_2_cnn844_im10_cma_ena1 = i_mul65_2_cnn844_im10_cma_ena0;
    assign i_mul65_2_cnn844_im10_cma_ena2 = i_mul65_2_cnn844_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_im10_cma_ah[0] <= i_mul65_2_cnn844_bjA12_q;
        end
    end

    assign i_mul65_2_cnn844_im10_cma_a0 = i_mul65_2_cnn844_im10_cma_ah[0];
    assign i_mul65_2_cnn844_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_2_cnn844_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_2_cnn844_im10_cma_ena2, i_mul65_2_cnn844_im10_cma_ena1, i_mul65_2_cnn844_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_2_cnn844_im10_cma_a0),
        .coefsela(i_mul65_2_cnn844_im10_cma_c0),
        .resulta(i_mul65_2_cnn844_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_2_cnn844_im10_cma_delay ( .xin(i_mul65_2_cnn844_im10_cma_s0), .xout(i_mul65_2_cnn844_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_2_cnn844_im10_cma_q = i_mul65_2_cnn844_im10_cma_qq[29:0];

    // redist33_i_mul65_2_cnn844_im10_cma_q_1(DELAY,17950)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist33_i_mul65_2_cnn844_im10_cma_q_1_q <= i_mul65_2_cnn844_im10_cma_q;
        end
    end

    // i_mul65_2_cnn844_sums_align_1(BITSHIFT,3007)@761
    assign i_mul65_2_cnn844_sums_align_1_qint = { redist33_i_mul65_2_cnn844_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_2_cnn844_sums_align_1_q = i_mul65_2_cnn844_sums_align_1_qint[46:0];

    // i_mul65_2_cnn844_bjA17(BITJOIN,3003)@754
    assign i_mul65_2_cnn844_bjA17_q = {GND_q, i_mul65_2_cnn844_bs1_merged_bit_select_e};

    // i_mul65_2_cnn844_im15_cma(CHAINMULTADD,17836)@754 + 5
    // out q@760
    assign i_mul65_2_cnn844_im15_cma_reset = ~ (resetn);
    assign i_mul65_2_cnn844_im15_cma_ena0 = 1'b1;
    assign i_mul65_2_cnn844_im15_cma_ena1 = i_mul65_2_cnn844_im15_cma_ena0;
    assign i_mul65_2_cnn844_im15_cma_ena2 = i_mul65_2_cnn844_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_im15_cma_ah[0] <= i_mul65_2_cnn844_bjA17_q;
        end
    end

    assign i_mul65_2_cnn844_im15_cma_a0 = i_mul65_2_cnn844_im15_cma_ah[0];
    assign i_mul65_2_cnn844_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_2_cnn844_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_2_cnn844_im15_cma_ena2, i_mul65_2_cnn844_im15_cma_ena1, i_mul65_2_cnn844_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_2_cnn844_im15_cma_a0),
        .coefsela(i_mul65_2_cnn844_im15_cma_c0),
        .resulta(i_mul65_2_cnn844_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_2_cnn844_im15_cma_delay ( .xin(i_mul65_2_cnn844_im15_cma_s0), .xout(i_mul65_2_cnn844_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_2_cnn844_im15_cma_q = i_mul65_2_cnn844_im15_cma_qq[29:0];

    // redist32_i_mul65_2_cnn844_im15_cma_q_1(DELAY,17949)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist32_i_mul65_2_cnn844_im15_cma_q_1_q <= i_mul65_2_cnn844_im15_cma_q;
        end
    end

    // i_mul65_2_cnn844_sums_result_add_0_0(ADD,3013)@761 + 1
    assign i_mul65_2_cnn844_sums_result_add_0_0_a = {{18{redist32_i_mul65_2_cnn844_im15_cma_q_1_q[29]}}, redist32_i_mul65_2_cnn844_im15_cma_q_1_q};
    assign i_mul65_2_cnn844_sums_result_add_0_0_b = {{1{i_mul65_2_cnn844_sums_align_1_q[46]}}, i_mul65_2_cnn844_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_sums_result_add_0_0_o <= $signed(i_mul65_2_cnn844_sums_result_add_0_0_a) + $signed(i_mul65_2_cnn844_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_2_cnn844_sums_result_add_0_0_q = i_mul65_2_cnn844_sums_result_add_0_0_o[47:0];

    // i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11611)@762
    assign i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_2_cnn844_sums_result_add_0_0_q};

    // i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2(ADD,9403)@762 + 1
    assign i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_q = i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11623)@763
    assign i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11586)@761
    assign i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_2_cnn844_sums_align_5_q[74:74];

    // redist481_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18398)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist481_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11585)@761
    assign i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_2_cnn844_sums_align_5_q[74:70];

    // redist482_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18399)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist482_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11587)@762
    assign i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist481_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist482_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18400)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11582)@762
    assign i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist483_i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2(ADD,9393)@762 + 1
    assign i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_cin = i_mul65_2_cnn844_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_2_cnn844_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_q = i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11624)@763
    assign i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_2_cnn844_sums_result_add_0_1_p2_of_2_q};

    // redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18391)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11619)@763
    assign i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist474_i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2(ADD,9404)@763 + 1
    assign i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_cin = i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_2_cnn844_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_q = i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist747_i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_q_1(DELAY,18664)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist747_i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_2_cnn844_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9405)@764
    assign i_mul65_2_cnn844_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_2_cnn844_sums_result_add_1_0_p2_of_2_q, redist747_i_mul65_2_cnn844_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_2_cnn844_extender_x(BITJOIN,2729)@764
    assign i_mul65_2_cnn844_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_2_cnn844_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_2_cnn844_sel_x(BITSELECT,1054)@764
    assign bgTrunc_i_mul65_2_cnn844_sel_x_b = i_mul65_2_cnn844_extender_x_q[63:0];

    // i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select(BITSELECT,17912)@764
    assign i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_2_cnn844_sel_x_b[63:54];
    assign i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_2_cnn844_sel_x_b[53:36];
    assign i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_2_cnn844_sel_x_b[35:18];
    assign i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_2_cnn844_sel_x_b[17:0];

    // i_add_ptr66_2_cnn849_mult_x_bjA2(BITJOIN,3498)@764
    assign i_add_ptr66_2_cnn849_mult_x_bjA2_q = {GND_q, i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_2_cnn849_mult_x_im0_shift0(BITSHIFT,8168)@764
    assign i_add_ptr66_2_cnn849_mult_x_im0_shift0_qint = { i_add_ptr66_2_cnn849_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_2_cnn849_mult_x_im0_shift0_q = i_add_ptr66_2_cnn849_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_align_5(BITSHIFT,3521)@764
    assign i_add_ptr66_2_cnn849_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_2_cnn849_mult_x_im0_shift0_q[12]}}, i_add_ptr66_2_cnn849_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_2_cnn849_mult_x_sums_align_5_q = i_add_ptr66_2_cnn849_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_2_cnn849_mult_x_bjA7(BITJOIN,3503)@764
    assign i_add_ptr66_2_cnn849_mult_x_bjA7_q = {GND_q, i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_2_cnn849_mult_x_im5_shift0(BITSHIFT,8169)@764
    assign i_add_ptr66_2_cnn849_mult_x_im5_shift0_qint = { i_add_ptr66_2_cnn849_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_2_cnn849_mult_x_im5_shift0_q = i_add_ptr66_2_cnn849_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_align_3(BITSHIFT,3519)@764
    assign i_add_ptr66_2_cnn849_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_2_cnn849_mult_x_im5_shift0_q[20]}}, i_add_ptr66_2_cnn849_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_2_cnn849_mult_x_sums_align_3_q = i_add_ptr66_2_cnn849_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1(ADD,3524)@764 + 1
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_2_cnn849_mult_x_sums_align_3_q[58]}}, i_add_ptr66_2_cnn849_mult_x_sums_align_3_q};
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_2_cnn849_mult_x_sums_align_5_q[68]}}, i_add_ptr66_2_cnn849_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_q = i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12362)@765
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_2_cnn849_mult_x_bjA12(BITJOIN,3508)@764
    assign i_add_ptr66_2_cnn849_mult_x_bjA12_q = {GND_q, i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_2_cnn849_mult_x_im10_shift0(BITSHIFT,8170)@764
    assign i_add_ptr66_2_cnn849_mult_x_im10_shift0_qint = { i_add_ptr66_2_cnn849_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_2_cnn849_mult_x_im10_shift0_q = i_add_ptr66_2_cnn849_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_align_1(BITSHIFT,3517)@764
    assign i_add_ptr66_2_cnn849_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_2_cnn849_mult_x_im10_shift0_q[20]}}, i_add_ptr66_2_cnn849_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_2_cnn849_mult_x_sums_align_1_q = i_add_ptr66_2_cnn849_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_2_cnn849_mult_x_bjA17(BITJOIN,3513)@764
    assign i_add_ptr66_2_cnn849_mult_x_bjA17_q = {GND_q, i_add_ptr66_2_cnn849_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_2_cnn849_mult_x_im15_shift0(BITSHIFT,8171)@764
    assign i_add_ptr66_2_cnn849_mult_x_im15_shift0_qint = { i_add_ptr66_2_cnn849_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_2_cnn849_mult_x_im15_shift0_q = i_add_ptr66_2_cnn849_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0(ADD,3523)@764 + 1
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_2_cnn849_mult_x_im15_shift0_q[20]}}, i_add_ptr66_2_cnn849_mult_x_im15_shift0_q};
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_2_cnn849_mult_x_sums_align_1_q[40]}}, i_add_ptr66_2_cnn849_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_q = i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12390)@765
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2(ADD,9678)@765 + 1
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12395)@765
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_2_cnn849_mult_x_sums_result_add_0_1_q[69:69];

    // redist336_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18253)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist336_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist337_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18254)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist337_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2(ADD,9679)@766 + 1
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist337_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist337_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist336_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist336_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist730_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18647)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist730_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9680)@767
    assign i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p2_of_2_q, redist730_i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_2_cnn849_mult_extender_x(BITJOIN,1347)@767
    assign i_add_ptr66_2_cnn849_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_2_cnn849_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_2_cnn849_trunc_sel_x(BITSELECT,1349)@767
    assign i_add_ptr66_2_cnn849_trunc_sel_x_b = i_add_ptr66_2_cnn849_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845(BLACKBOX,710)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_846 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_select_63(BITSELECT,713)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_join(BITJOIN,712)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_2_cnn849_add_x(ADD,1341)@767
    assign i_add_ptr66_2_cnn849_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer6_cnn845_vt_join_q};
    assign i_add_ptr66_2_cnn849_add_x_b = {1'b0, i_add_ptr66_2_cnn849_trunc_sel_x_b};
    assign i_add_ptr66_2_cnn849_add_x_o = $unsigned(i_add_ptr66_2_cnn849_add_x_a) + $unsigned(i_add_ptr66_2_cnn849_add_x_b);
    assign i_add_ptr66_2_cnn849_add_x_q = i_add_ptr66_2_cnn849_add_x_o[64:0];

    // i_add_ptr66_2_cnn849_dupName_0_trunc_sel_x(BITSELECT,1350)@767
    assign i_add_ptr66_2_cnn849_dupName_0_trunc_sel_x_b = i_add_ptr66_2_cnn849_add_x_q[63:0];

    // i_add_ptr66_2_cnn848_vt_select_63(BITSELECT,75)@767
    assign i_add_ptr66_2_cnn848_vt_select_63_b = i_add_ptr66_2_cnn849_dupName_0_trunc_sel_x_b[63:2];

    // redist871_i_add_ptr66_2_cnn848_vt_select_63_b_1(DELAY,18788)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist871_i_add_ptr66_2_cnn848_vt_select_63_b_1_q <= i_add_ptr66_2_cnn848_vt_select_63_b;
        end
    end

    // i_add_ptr66_2_cnn848_vt_join(BITJOIN,74)@768
    assign i_add_ptr66_2_cnn848_vt_join_q = {redist871_i_add_ptr66_2_cnn848_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_2_cnn875_add_x(ADD,1911)@768
    assign i_add_ptr70_3_2_cnn875_add_x_a = {1'b0, i_add_ptr66_2_cnn848_vt_join_q};
    assign i_add_ptr70_3_2_cnn875_add_x_b = {1'b0, i_add_ptr70_3_2_cnn875_trunc_sel_x_b};
    assign i_add_ptr70_3_2_cnn875_add_x_o = $unsigned(i_add_ptr70_3_2_cnn875_add_x_a) + $unsigned(i_add_ptr70_3_2_cnn875_add_x_b);
    assign i_add_ptr70_3_2_cnn875_add_x_q = i_add_ptr70_3_2_cnn875_add_x_o[64:0];

    // i_add_ptr70_3_2_cnn875_dupName_0_trunc_sel_x(BITSELECT,1920)@768
    assign i_add_ptr70_3_2_cnn875_dupName_0_trunc_sel_x_b = i_add_ptr70_3_2_cnn875_add_x_q[63:0];

    // i_add_ptr70_3_2_cnn874_vt_select_63(BITSELECT,246)@768
    assign i_add_ptr70_3_2_cnn874_vt_select_63_b = i_add_ptr70_3_2_cnn875_dupName_0_trunc_sel_x_b[63:2];

    // redist814_i_add_ptr70_3_2_cnn874_vt_select_63_b_1(DELAY,18731)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist814_i_add_ptr70_3_2_cnn874_vt_select_63_b_1_q <= i_add_ptr70_3_2_cnn874_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_2_cnn874_vt_join(BITJOIN,245)@769
    assign i_add_ptr70_3_2_cnn874_vt_join_q = {redist814_i_add_ptr70_3_2_cnn874_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_2_cnn877_add_x(ADD,2551)@769
    assign i_add_ptr73_371_2_cnn877_add_x_a = {1'b0, i_add_ptr70_3_2_cnn874_vt_join_q};
    assign i_add_ptr73_371_2_cnn877_add_x_b = {1'b0, i_add_ptr73_371_2_cnn877_trunc_sel_x_b};
    assign i_add_ptr73_371_2_cnn877_add_x_o = $unsigned(i_add_ptr73_371_2_cnn877_add_x_a) + $unsigned(i_add_ptr73_371_2_cnn877_add_x_b);
    assign i_add_ptr73_371_2_cnn877_add_x_q = i_add_ptr73_371_2_cnn877_add_x_o[64:0];

    // i_add_ptr73_371_2_cnn877_dupName_0_trunc_sel_x(BITSELECT,2560)@769
    assign i_add_ptr73_371_2_cnn877_dupName_0_trunc_sel_x_b = i_add_ptr73_371_2_cnn877_add_x_q[63:0];

    // i_add_ptr73_371_2_cnn876_vt_select_63(BITSELECT,438)@769
    assign i_add_ptr73_371_2_cnn876_vt_select_63_b = i_add_ptr73_371_2_cnn877_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_2_cnn876_vt_join(BITJOIN,437)@769
    assign i_add_ptr73_371_2_cnn876_vt_join_q = {i_add_ptr73_371_2_cnn876_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_select_63(BITSELECT,742)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_select_63_b = i_add_ptr73_371_2_cnn876_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_join(BITJOIN,741)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn119_cnn871(BLACKBOX,583)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_119_cnn872 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn119_cnn871 (
        .in_intel_reserved_ffwd_38_0(in_intel_reserved_ffwd_38_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_38_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn119_cnn871_out_dest_data_out_38_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_2_cnn869_mult_x_im0_shift0(BITSHIFT,8580)@766
    assign i_add_ptr73_270_2_cnn869_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_2_cnn869_mult_x_im0_shift0_q = i_add_ptr73_270_2_cnn869_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_align_5(BITSHIFT,6611)@766
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_2_cnn869_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_2_cnn869_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_align_5_q = i_add_ptr73_270_2_cnn869_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_2_cnn869_mult_x_im5_shift0(BITSHIFT,8581)@766
    assign i_add_ptr73_270_2_cnn869_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_2_cnn869_mult_x_im5_shift0_q = i_add_ptr73_270_2_cnn869_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_align_3(BITSHIFT,6609)@766
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_2_cnn869_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_2_cnn869_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_align_3_q = i_add_ptr73_270_2_cnn869_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1(ADD,6614)@766 + 1
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_2_cnn869_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_2_cnn869_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_2_cnn869_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_2_cnn869_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16070)@767
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_2_cnn869_mult_x_im10_shift0(BITSHIFT,8582)@766
    assign i_add_ptr73_270_2_cnn869_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_2_cnn869_mult_x_im10_shift0_q = i_add_ptr73_270_2_cnn869_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_align_1(BITSHIFT,6607)@766
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_2_cnn869_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_2_cnn869_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_align_1_q = i_add_ptr73_270_2_cnn869_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_2_cnn869_mult_x_im15_shift0(BITSHIFT,8583)@766
    assign i_add_ptr73_270_2_cnn869_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_2_cnn869_mult_x_im15_shift0_q = i_add_ptr73_270_2_cnn869_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0(ADD,6613)@766 + 1
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_2_cnn869_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_2_cnn869_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_2_cnn869_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_2_cnn869_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16098)@767
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2(ADD,10811)@767 + 1
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16103)@767
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_0_1_q[69:69];

    // redist130_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18047)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist130_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist131_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18048)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist131_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2(ADD,10812)@768 + 1
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist131_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist131_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist130_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist130_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist627_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18544)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist627_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10813)@769
    assign i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p2_of_2_q, redist627_i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_2_cnn869_mult_extender_x(BITJOIN,2377)@769
    assign i_add_ptr73_270_2_cnn869_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_2_cnn869_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_2_cnn869_trunc_sel_x(BITSELECT,2379)@769
    assign i_add_ptr73_270_2_cnn869_trunc_sel_x_b = i_add_ptr73_270_2_cnn869_mult_extender_x_q[63:0];

    // i_add_ptr70_2_2_cnn867_mult_x_im0_shift0(BITSHIFT,8328)@765
    assign i_add_ptr70_2_2_cnn867_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_2_cnn867_mult_x_im0_shift0_q = i_add_ptr70_2_2_cnn867_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_align_5(BITSHIFT,4721)@765
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_2_cnn867_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_2_cnn867_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_align_5_q = i_add_ptr70_2_2_cnn867_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_2_cnn867_mult_x_im5_shift0(BITSHIFT,8329)@765
    assign i_add_ptr70_2_2_cnn867_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_2_cnn867_mult_x_im5_shift0_q = i_add_ptr70_2_2_cnn867_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_align_3(BITSHIFT,4719)@765
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_2_cnn867_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_2_cnn867_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_align_3_q = i_add_ptr70_2_2_cnn867_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1(ADD,4724)@765 + 1
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_2_cnn867_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_2_cnn867_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_2_cnn867_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_2_cnn867_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13802)@766
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_2_cnn867_mult_x_im10_shift0(BITSHIFT,8330)@765
    assign i_add_ptr70_2_2_cnn867_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_2_cnn867_mult_x_im10_shift0_q = i_add_ptr70_2_2_cnn867_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_align_1(BITSHIFT,4717)@765
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_2_cnn867_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_2_cnn867_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_align_1_q = i_add_ptr70_2_2_cnn867_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_2_cnn867_mult_x_im15_shift0(BITSHIFT,8331)@765
    assign i_add_ptr70_2_2_cnn867_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_2_cnn867_mult_x_im15_shift0_q = i_add_ptr70_2_2_cnn867_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0(ADD,4723)@765 + 1
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_2_cnn867_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_2_cnn867_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_2_cnn867_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_2_cnn867_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13830)@766
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2(ADD,10118)@766 + 1
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13835)@766
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_0_1_q[69:69];

    // redist256_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18173)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist256_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist257_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18174)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist257_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2(ADD,10119)@767 + 1
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist257_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist257_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist256_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist256_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist690_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18607)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist690_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10120)@768
    assign i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p2_of_2_q, redist690_i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_2_cnn867_mult_extender_x(BITJOIN,1747)@768
    assign i_add_ptr70_2_2_cnn867_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_2_cnn867_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_2_cnn867_trunc_sel_x(BITSELECT,1749)@768
    assign i_add_ptr70_2_2_cnn867_trunc_sel_x_b = i_add_ptr70_2_2_cnn867_mult_extender_x_q[63:0];

    // i_add_ptr70_2_2_cnn867_add_x(ADD,1741)@768
    assign i_add_ptr70_2_2_cnn867_add_x_a = {1'b0, i_add_ptr66_2_cnn848_vt_join_q};
    assign i_add_ptr70_2_2_cnn867_add_x_b = {1'b0, i_add_ptr70_2_2_cnn867_trunc_sel_x_b};
    assign i_add_ptr70_2_2_cnn867_add_x_o = $unsigned(i_add_ptr70_2_2_cnn867_add_x_a) + $unsigned(i_add_ptr70_2_2_cnn867_add_x_b);
    assign i_add_ptr70_2_2_cnn867_add_x_q = i_add_ptr70_2_2_cnn867_add_x_o[64:0];

    // i_add_ptr70_2_2_cnn867_dupName_0_trunc_sel_x(BITSELECT,1750)@768
    assign i_add_ptr70_2_2_cnn867_dupName_0_trunc_sel_x_b = i_add_ptr70_2_2_cnn867_add_x_q[63:0];

    // i_add_ptr70_2_2_cnn866_vt_select_63(BITSELECT,195)@768
    assign i_add_ptr70_2_2_cnn866_vt_select_63_b = i_add_ptr70_2_2_cnn867_dupName_0_trunc_sel_x_b[63:2];

    // redist831_i_add_ptr70_2_2_cnn866_vt_select_63_b_1(DELAY,18748)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist831_i_add_ptr70_2_2_cnn866_vt_select_63_b_1_q <= i_add_ptr70_2_2_cnn866_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_2_cnn866_vt_join(BITJOIN,194)@769
    assign i_add_ptr70_2_2_cnn866_vt_join_q = {redist831_i_add_ptr70_2_2_cnn866_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_2_cnn869_add_x(ADD,2371)@769
    assign i_add_ptr73_270_2_cnn869_add_x_a = {1'b0, i_add_ptr70_2_2_cnn866_vt_join_q};
    assign i_add_ptr73_270_2_cnn869_add_x_b = {1'b0, i_add_ptr73_270_2_cnn869_trunc_sel_x_b};
    assign i_add_ptr73_270_2_cnn869_add_x_o = $unsigned(i_add_ptr73_270_2_cnn869_add_x_a) + $unsigned(i_add_ptr73_270_2_cnn869_add_x_b);
    assign i_add_ptr73_270_2_cnn869_add_x_q = i_add_ptr73_270_2_cnn869_add_x_o[64:0];

    // i_add_ptr73_270_2_cnn869_dupName_0_trunc_sel_x(BITSELECT,2380)@769
    assign i_add_ptr73_270_2_cnn869_dupName_0_trunc_sel_x_b = i_add_ptr73_270_2_cnn869_add_x_q[63:0];

    // i_add_ptr73_270_2_cnn868_vt_select_63(BITSELECT,384)@769
    assign i_add_ptr73_270_2_cnn868_vt_select_63_b = i_add_ptr73_270_2_cnn869_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_2_cnn868_vt_join(BITJOIN,383)@769
    assign i_add_ptr73_270_2_cnn868_vt_join_q = {i_add_ptr73_270_2_cnn868_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_select_63(BITSELECT,738)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_select_63_b = i_add_ptr73_270_2_cnn868_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_join(BITJOIN,737)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn118_cnn863(BLACKBOX,582)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_118_cnn864 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn118_cnn863 (
        .in_intel_reserved_ffwd_37_0(in_intel_reserved_ffwd_37_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_37_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn118_cnn863_out_dest_data_out_37_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_2_cnn861_mult_x_im0_shift0(BITSHIFT,8512)@766
    assign i_add_ptr73_169_2_cnn861_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_2_cnn861_mult_x_im0_shift0_q = i_add_ptr73_169_2_cnn861_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_align_5(BITSHIFT,6101)@766
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_2_cnn861_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_2_cnn861_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_align_5_q = i_add_ptr73_169_2_cnn861_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_2_cnn861_mult_x_im5_shift0(BITSHIFT,8513)@766
    assign i_add_ptr73_169_2_cnn861_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_2_cnn861_mult_x_im5_shift0_q = i_add_ptr73_169_2_cnn861_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_align_3(BITSHIFT,6099)@766
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_2_cnn861_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_2_cnn861_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_align_3_q = i_add_ptr73_169_2_cnn861_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1(ADD,6104)@766 + 1
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_2_cnn861_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_2_cnn861_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_2_cnn861_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_2_cnn861_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15458)@767
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_2_cnn861_mult_x_im10_shift0(BITSHIFT,8514)@766
    assign i_add_ptr73_169_2_cnn861_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_2_cnn861_mult_x_im10_shift0_q = i_add_ptr73_169_2_cnn861_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_align_1(BITSHIFT,6097)@766
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_2_cnn861_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_2_cnn861_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_align_1_q = i_add_ptr73_169_2_cnn861_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_2_cnn861_mult_x_im15_shift0(BITSHIFT,8515)@766
    assign i_add_ptr73_169_2_cnn861_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_2_cnn861_mult_x_im15_shift0_q = i_add_ptr73_169_2_cnn861_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0(ADD,6103)@766 + 1
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_2_cnn861_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_2_cnn861_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_2_cnn861_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_2_cnn861_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15486)@767
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2(ADD,10624)@767 + 1
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15491)@767
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_0_1_q[69:69];

    // redist164_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18081)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist164_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist165_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18082)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist165_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2(ADD,10625)@768 + 1
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist165_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist165_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist164_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist164_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist644_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18561)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist644_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10626)@769
    assign i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p2_of_2_q, redist644_i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_2_cnn861_mult_extender_x(BITJOIN,2207)@769
    assign i_add_ptr73_169_2_cnn861_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_2_cnn861_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_2_cnn861_trunc_sel_x(BITSELECT,2209)@769
    assign i_add_ptr73_169_2_cnn861_trunc_sel_x_b = i_add_ptr73_169_2_cnn861_mult_extender_x_q[63:0];

    // i_add_ptr70_1_2_cnn859_mult_x_im0_shift0(BITSHIFT,8260)@765
    assign i_add_ptr70_1_2_cnn859_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_2_cnn859_mult_x_im0_shift0_q = i_add_ptr70_1_2_cnn859_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_align_5(BITSHIFT,4211)@765
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_2_cnn859_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_2_cnn859_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_align_5_q = i_add_ptr70_1_2_cnn859_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_2_cnn859_mult_x_im5_shift0(BITSHIFT,8261)@765
    assign i_add_ptr70_1_2_cnn859_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_2_cnn859_mult_x_im5_shift0_q = i_add_ptr70_1_2_cnn859_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_align_3(BITSHIFT,4209)@765
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_2_cnn859_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_2_cnn859_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_align_3_q = i_add_ptr70_1_2_cnn859_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1(ADD,4214)@765 + 1
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_2_cnn859_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_2_cnn859_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_2_cnn859_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_2_cnn859_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13190)@766
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_2_cnn859_mult_x_im10_shift0(BITSHIFT,8262)@765
    assign i_add_ptr70_1_2_cnn859_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_2_cnn859_mult_x_im10_shift0_q = i_add_ptr70_1_2_cnn859_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_align_1(BITSHIFT,4207)@765
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_2_cnn859_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_2_cnn859_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_align_1_q = i_add_ptr70_1_2_cnn859_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_2_cnn859_mult_x_im15_shift0(BITSHIFT,8263)@765
    assign i_add_ptr70_1_2_cnn859_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_2_cnn859_mult_x_im15_shift0_q = i_add_ptr70_1_2_cnn859_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0(ADD,4213)@765 + 1
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_2_cnn859_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_2_cnn859_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_2_cnn859_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_2_cnn859_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13218)@766
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2(ADD,9931)@766 + 1
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13223)@766
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_0_1_q[69:69];

    // redist290_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18207)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist290_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist291_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18208)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist291_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2(ADD,9932)@767 + 1
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist291_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist291_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist290_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist290_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist707_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18624)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist707_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9933)@768
    assign i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p2_of_2_q, redist707_i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_2_cnn859_mult_extender_x(BITJOIN,1577)@768
    assign i_add_ptr70_1_2_cnn859_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_2_cnn859_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_2_cnn859_trunc_sel_x(BITSELECT,1579)@768
    assign i_add_ptr70_1_2_cnn859_trunc_sel_x_b = i_add_ptr70_1_2_cnn859_mult_extender_x_q[63:0];

    // i_add_ptr70_1_2_cnn859_add_x(ADD,1571)@768
    assign i_add_ptr70_1_2_cnn859_add_x_a = {1'b0, i_add_ptr66_2_cnn848_vt_join_q};
    assign i_add_ptr70_1_2_cnn859_add_x_b = {1'b0, i_add_ptr70_1_2_cnn859_trunc_sel_x_b};
    assign i_add_ptr70_1_2_cnn859_add_x_o = $unsigned(i_add_ptr70_1_2_cnn859_add_x_a) + $unsigned(i_add_ptr70_1_2_cnn859_add_x_b);
    assign i_add_ptr70_1_2_cnn859_add_x_q = i_add_ptr70_1_2_cnn859_add_x_o[64:0];

    // i_add_ptr70_1_2_cnn859_dupName_0_trunc_sel_x(BITSELECT,1580)@768
    assign i_add_ptr70_1_2_cnn859_dupName_0_trunc_sel_x_b = i_add_ptr70_1_2_cnn859_add_x_q[63:0];

    // i_add_ptr70_1_2_cnn858_vt_select_63(BITSELECT,144)@768
    assign i_add_ptr70_1_2_cnn858_vt_select_63_b = i_add_ptr70_1_2_cnn859_dupName_0_trunc_sel_x_b[63:2];

    // redist848_i_add_ptr70_1_2_cnn858_vt_select_63_b_1(DELAY,18765)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist848_i_add_ptr70_1_2_cnn858_vt_select_63_b_1_q <= i_add_ptr70_1_2_cnn858_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_2_cnn858_vt_join(BITJOIN,143)@769
    assign i_add_ptr70_1_2_cnn858_vt_join_q = {redist848_i_add_ptr70_1_2_cnn858_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_2_cnn861_add_x(ADD,2201)@769
    assign i_add_ptr73_169_2_cnn861_add_x_a = {1'b0, i_add_ptr70_1_2_cnn858_vt_join_q};
    assign i_add_ptr73_169_2_cnn861_add_x_b = {1'b0, i_add_ptr73_169_2_cnn861_trunc_sel_x_b};
    assign i_add_ptr73_169_2_cnn861_add_x_o = $unsigned(i_add_ptr73_169_2_cnn861_add_x_a) + $unsigned(i_add_ptr73_169_2_cnn861_add_x_b);
    assign i_add_ptr73_169_2_cnn861_add_x_q = i_add_ptr73_169_2_cnn861_add_x_o[64:0];

    // i_add_ptr73_169_2_cnn861_dupName_0_trunc_sel_x(BITSELECT,2210)@769
    assign i_add_ptr73_169_2_cnn861_dupName_0_trunc_sel_x_b = i_add_ptr73_169_2_cnn861_add_x_q[63:0];

    // i_add_ptr73_169_2_cnn860_vt_select_63(BITSELECT,333)@769
    assign i_add_ptr73_169_2_cnn860_vt_select_63_b = i_add_ptr73_169_2_cnn861_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_2_cnn860_vt_join(BITJOIN,332)@769
    assign i_add_ptr73_169_2_cnn860_vt_join_q = {i_add_ptr73_169_2_cnn860_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_select_63(BITSELECT,734)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_select_63_b = i_add_ptr73_169_2_cnn860_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_join(BITJOIN,733)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn117_cnn855(BLACKBOX,581)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_117_cnn856 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn117_cnn855 (
        .in_intel_reserved_ffwd_36_0(in_intel_reserved_ffwd_36_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_36_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn117_cnn855_out_dest_data_out_36_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_287_cnn853_mult_x_im0_shift0(BITSHIFT,8616)@766
    assign i_add_ptr73_287_cnn853_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_287_cnn853_mult_x_im0_shift0_q = i_add_ptr73_287_cnn853_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_align_5(BITSHIFT,6881)@766
    assign i_add_ptr73_287_cnn853_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_287_cnn853_mult_x_im0_shift0_q[12]}}, i_add_ptr73_287_cnn853_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_287_cnn853_mult_x_sums_align_5_q = i_add_ptr73_287_cnn853_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_287_cnn853_mult_x_im5_shift0(BITSHIFT,8617)@766
    assign i_add_ptr73_287_cnn853_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_287_cnn853_mult_x_im5_shift0_q = i_add_ptr73_287_cnn853_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_align_3(BITSHIFT,6879)@766
    assign i_add_ptr73_287_cnn853_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_287_cnn853_mult_x_im5_shift0_q[20]}}, i_add_ptr73_287_cnn853_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_287_cnn853_mult_x_sums_align_3_q = i_add_ptr73_287_cnn853_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1(ADD,6884)@766 + 1
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_287_cnn853_mult_x_sums_align_3_q[58]}}, i_add_ptr73_287_cnn853_mult_x_sums_align_3_q};
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_287_cnn853_mult_x_sums_align_5_q[68]}}, i_add_ptr73_287_cnn853_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_q = i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16394)@767
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_287_cnn853_mult_x_im10_shift0(BITSHIFT,8618)@766
    assign i_add_ptr73_287_cnn853_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_287_cnn853_mult_x_im10_shift0_q = i_add_ptr73_287_cnn853_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_align_1(BITSHIFT,6877)@766
    assign i_add_ptr73_287_cnn853_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_287_cnn853_mult_x_im10_shift0_q[20]}}, i_add_ptr73_287_cnn853_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_287_cnn853_mult_x_sums_align_1_q = i_add_ptr73_287_cnn853_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_287_cnn853_mult_x_im15_shift0(BITSHIFT,8619)@766
    assign i_add_ptr73_287_cnn853_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_287_cnn853_mult_x_im15_shift0_q = i_add_ptr73_287_cnn853_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0(ADD,6883)@766 + 1
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_287_cnn853_mult_x_im15_shift0_q[20]}}, i_add_ptr73_287_cnn853_mult_x_im15_shift0_q};
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_287_cnn853_mult_x_sums_align_1_q[40]}}, i_add_ptr73_287_cnn853_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_q = i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16422)@767
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2(ADD,10910)@767 + 1
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16427)@767
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_287_cnn853_mult_x_sums_result_add_0_1_q[69:69];

    // redist112_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18029)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist112_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist113_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18030)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist113_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2(ADD,10911)@768 + 1
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist113_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist113_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist112_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist112_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist618_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18535)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist618_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10912)@769
    assign i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p2_of_2_q, redist618_i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_287_cnn853_mult_extender_x(BITJOIN,2467)@769
    assign i_add_ptr73_287_cnn853_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_287_cnn853_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_287_cnn853_trunc_sel_x(BITSELECT,2469)@769
    assign i_add_ptr73_287_cnn853_trunc_sel_x_b = i_add_ptr73_287_cnn853_mult_extender_x_q[63:0];

    // i_add_ptr70_286_cnn851_mult_x_im0_shift0(BITSHIFT,8296)@765
    assign i_add_ptr70_286_cnn851_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_286_cnn851_mult_x_im0_shift0_q = i_add_ptr70_286_cnn851_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_align_5(BITSHIFT,4481)@765
    assign i_add_ptr70_286_cnn851_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_286_cnn851_mult_x_im0_shift0_q[12]}}, i_add_ptr70_286_cnn851_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_286_cnn851_mult_x_sums_align_5_q = i_add_ptr70_286_cnn851_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_286_cnn851_mult_x_im5_shift0(BITSHIFT,8297)@765
    assign i_add_ptr70_286_cnn851_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_286_cnn851_mult_x_im5_shift0_q = i_add_ptr70_286_cnn851_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_align_3(BITSHIFT,4479)@765
    assign i_add_ptr70_286_cnn851_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_286_cnn851_mult_x_im5_shift0_q[20]}}, i_add_ptr70_286_cnn851_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_286_cnn851_mult_x_sums_align_3_q = i_add_ptr70_286_cnn851_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1(ADD,4484)@765 + 1
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_286_cnn851_mult_x_sums_align_3_q[58]}}, i_add_ptr70_286_cnn851_mult_x_sums_align_3_q};
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_286_cnn851_mult_x_sums_align_5_q[68]}}, i_add_ptr70_286_cnn851_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_q = i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13514)@766
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_286_cnn851_mult_x_im10_shift0(BITSHIFT,8298)@765
    assign i_add_ptr70_286_cnn851_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_286_cnn851_mult_x_im10_shift0_q = i_add_ptr70_286_cnn851_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_align_1(BITSHIFT,4477)@765
    assign i_add_ptr70_286_cnn851_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_286_cnn851_mult_x_im10_shift0_q[20]}}, i_add_ptr70_286_cnn851_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_286_cnn851_mult_x_sums_align_1_q = i_add_ptr70_286_cnn851_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_286_cnn851_mult_x_im15_shift0(BITSHIFT,8299)@765
    assign i_add_ptr70_286_cnn851_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_286_cnn851_mult_x_im15_shift0_q = i_add_ptr70_286_cnn851_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0(ADD,4483)@765 + 1
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_286_cnn851_mult_x_im15_shift0_q[20]}}, i_add_ptr70_286_cnn851_mult_x_im15_shift0_q};
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_286_cnn851_mult_x_sums_align_1_q[40]}}, i_add_ptr70_286_cnn851_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_q = i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13542)@766
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2(ADD,10030)@766 + 1
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13547)@766
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_286_cnn851_mult_x_sums_result_add_0_1_q[69:69];

    // redist272_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18189)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist272_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist273_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18190)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist273_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2(ADD,10031)@767 + 1
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist273_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist273_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist272_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist272_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist698_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18615)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist698_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10032)@768
    assign i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p2_of_2_q, redist698_i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_286_cnn851_mult_extender_x(BITJOIN,1667)@768
    assign i_add_ptr70_286_cnn851_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_286_cnn851_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_286_cnn851_trunc_sel_x(BITSELECT,1669)@768
    assign i_add_ptr70_286_cnn851_trunc_sel_x_b = i_add_ptr70_286_cnn851_mult_extender_x_q[63:0];

    // i_add_ptr70_286_cnn851_add_x(ADD,1661)@768
    assign i_add_ptr70_286_cnn851_add_x_a = {1'b0, i_add_ptr66_2_cnn848_vt_join_q};
    assign i_add_ptr70_286_cnn851_add_x_b = {1'b0, i_add_ptr70_286_cnn851_trunc_sel_x_b};
    assign i_add_ptr70_286_cnn851_add_x_o = $unsigned(i_add_ptr70_286_cnn851_add_x_a) + $unsigned(i_add_ptr70_286_cnn851_add_x_b);
    assign i_add_ptr70_286_cnn851_add_x_q = i_add_ptr70_286_cnn851_add_x_o[64:0];

    // i_add_ptr70_286_cnn851_dupName_0_trunc_sel_x(BITSELECT,1670)@768
    assign i_add_ptr70_286_cnn851_dupName_0_trunc_sel_x_b = i_add_ptr70_286_cnn851_add_x_q[63:0];

    // i_add_ptr70_286_cnn850_vt_select_63(BITSELECT,171)@768
    assign i_add_ptr70_286_cnn850_vt_select_63_b = i_add_ptr70_286_cnn851_dupName_0_trunc_sel_x_b[63:2];

    // redist839_i_add_ptr70_286_cnn850_vt_select_63_b_1(DELAY,18756)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist839_i_add_ptr70_286_cnn850_vt_select_63_b_1_q <= i_add_ptr70_286_cnn850_vt_select_63_b;
        end
    end

    // i_add_ptr70_286_cnn850_vt_join(BITJOIN,170)@769
    assign i_add_ptr70_286_cnn850_vt_join_q = {redist839_i_add_ptr70_286_cnn850_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_287_cnn853_add_x(ADD,2461)@769
    assign i_add_ptr73_287_cnn853_add_x_a = {1'b0, i_add_ptr70_286_cnn850_vt_join_q};
    assign i_add_ptr73_287_cnn853_add_x_b = {1'b0, i_add_ptr73_287_cnn853_trunc_sel_x_b};
    assign i_add_ptr73_287_cnn853_add_x_o = $unsigned(i_add_ptr73_287_cnn853_add_x_a) + $unsigned(i_add_ptr73_287_cnn853_add_x_b);
    assign i_add_ptr73_287_cnn853_add_x_q = i_add_ptr73_287_cnn853_add_x_o[64:0];

    // i_add_ptr73_287_cnn853_dupName_0_trunc_sel_x(BITSELECT,2470)@769
    assign i_add_ptr73_287_cnn853_dupName_0_trunc_sel_x_b = i_add_ptr73_287_cnn853_add_x_q[63:0];

    // i_add_ptr73_287_cnn852_vt_select_63(BITSELECT,411)@769
    assign i_add_ptr73_287_cnn852_vt_select_63_b = i_add_ptr73_287_cnn853_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_287_cnn852_vt_join(BITJOIN,410)@769
    assign i_add_ptr73_287_cnn852_vt_join_q = {i_add_ptr73_287_cnn852_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_select_63(BITSELECT,986)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_select_63_b = i_add_ptr73_287_cnn852_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_join(BITJOIN,985)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn116_cnn840(BLACKBOX,580)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_116_cnn841 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn116_cnn840 (
        .in_intel_reserved_ffwd_35_0(in_intel_reserved_ffwd_35_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_35_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn116_cnn840_out_dest_data_out_35_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_1_cnn838_mult_x_im0_shift0(BITSHIFT,8648)@766
    assign i_add_ptr73_371_1_cnn838_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_1_cnn838_mult_x_im0_shift0_q = i_add_ptr73_371_1_cnn838_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_align_5(BITSHIFT,7121)@766
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_1_cnn838_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_1_cnn838_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_align_5_q = i_add_ptr73_371_1_cnn838_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_1_cnn838_mult_x_im5_shift0(BITSHIFT,8649)@766
    assign i_add_ptr73_371_1_cnn838_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_1_cnn838_mult_x_im5_shift0_q = i_add_ptr73_371_1_cnn838_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_align_3(BITSHIFT,7119)@766
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_1_cnn838_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_1_cnn838_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_align_3_q = i_add_ptr73_371_1_cnn838_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1(ADD,7124)@766 + 1
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_1_cnn838_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_1_cnn838_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_1_cnn838_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_1_cnn838_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16682)@767
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_1_cnn838_mult_x_im10_shift0(BITSHIFT,8650)@766
    assign i_add_ptr73_371_1_cnn838_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_1_cnn838_mult_x_im10_shift0_q = i_add_ptr73_371_1_cnn838_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_align_1(BITSHIFT,7117)@766
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_1_cnn838_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_1_cnn838_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_align_1_q = i_add_ptr73_371_1_cnn838_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_1_cnn838_mult_x_im15_shift0(BITSHIFT,8651)@766
    assign i_add_ptr73_371_1_cnn838_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_1_cnn838_mult_x_im15_shift0_q = i_add_ptr73_371_1_cnn838_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0(ADD,7123)@766 + 1
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_1_cnn838_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_1_cnn838_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_1_cnn838_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_1_cnn838_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16710)@767
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2(ADD,10998)@767 + 1
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16715)@767
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_0_1_q[69:69];

    // redist96_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18013)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist96_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist97_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18014)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist97_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2(ADD,10999)@768 + 1
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist97_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist97_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist96_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist96_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist610_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18527)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist610_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11000)@769
    assign i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p2_of_2_q, redist610_i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_1_cnn838_mult_extender_x(BITJOIN,2547)@769
    assign i_add_ptr73_371_1_cnn838_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_1_cnn838_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_1_cnn838_trunc_sel_x(BITSELECT,2549)@769
    assign i_add_ptr73_371_1_cnn838_trunc_sel_x_b = i_add_ptr73_371_1_cnn838_mult_extender_x_q[63:0];

    // i_add_ptr70_3_1_cnn836_mult_x_im0_shift0(BITSHIFT,8392)@765
    assign i_add_ptr70_3_1_cnn836_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_1_cnn836_mult_x_im0_shift0_q = i_add_ptr70_3_1_cnn836_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_align_5(BITSHIFT,5201)@765
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_1_cnn836_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_1_cnn836_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_align_5_q = i_add_ptr70_3_1_cnn836_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_1_cnn836_mult_x_im5_shift0(BITSHIFT,8393)@765
    assign i_add_ptr70_3_1_cnn836_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_1_cnn836_mult_x_im5_shift0_q = i_add_ptr70_3_1_cnn836_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_align_3(BITSHIFT,5199)@765
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_1_cnn836_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_1_cnn836_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_align_3_q = i_add_ptr70_3_1_cnn836_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1(ADD,5204)@765 + 1
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_1_cnn836_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_1_cnn836_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_1_cnn836_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_1_cnn836_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14378)@766
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_1_cnn836_mult_x_im10_shift0(BITSHIFT,8394)@765
    assign i_add_ptr70_3_1_cnn836_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_1_cnn836_mult_x_im10_shift0_q = i_add_ptr70_3_1_cnn836_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_align_1(BITSHIFT,5197)@765
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_1_cnn836_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_1_cnn836_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_align_1_q = i_add_ptr70_3_1_cnn836_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_1_cnn836_mult_x_im15_shift0(BITSHIFT,8395)@765
    assign i_add_ptr70_3_1_cnn836_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_1_cnn836_mult_x_im15_shift0_q = i_add_ptr70_3_1_cnn836_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0(ADD,5203)@765 + 1
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_1_cnn836_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_1_cnn836_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_1_cnn836_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_1_cnn836_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14406)@766
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2(ADD,10294)@766 + 1
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14411)@766
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_0_1_q[69:69];

    // redist224_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18141)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist224_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist225_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18142)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist225_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2(ADD,10295)@767 + 1
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist225_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist225_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist224_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist224_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist674_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18591)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist674_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10296)@768
    assign i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p2_of_2_q, redist674_i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_1_cnn836_mult_extender_x(BITJOIN,1907)@768
    assign i_add_ptr70_3_1_cnn836_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_1_cnn836_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_1_cnn836_trunc_sel_x(BITSELECT,1909)@768
    assign i_add_ptr70_3_1_cnn836_trunc_sel_x_b = i_add_ptr70_3_1_cnn836_mult_extender_x_q[63:0];

    // c_i64_1gr(CONSTANT,39)
    assign c_i64_1gr_q = 64'b0000000000000000000000000000000000000000000000000000000000000001;

    // i_inc79_cnn804(LOGICAL,560)@754
    assign i_inc79_cnn804_q = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out | c_i64_1gr_q;

    // i_inc79_cnn804_vt_select_63(BITSELECT,563)@754
    assign i_inc79_cnn804_vt_select_63_b = i_inc79_cnn804_q[63:1];

    // i_inc79_cnn804_vt_join(BITJOIN,562)@754
    assign i_inc79_cnn804_vt_join_q = {i_inc79_cnn804_vt_select_63_b, VCC_q};

    // i_mul65_1_cnn805_bs1_merged_bit_select(BITSELECT,17894)@754
    assign i_mul65_1_cnn805_bs1_merged_bit_select_b = i_inc79_cnn804_vt_join_q[63:54];
    assign i_mul65_1_cnn805_bs1_merged_bit_select_c = i_inc79_cnn804_vt_join_q[53:36];
    assign i_mul65_1_cnn805_bs1_merged_bit_select_d = i_inc79_cnn804_vt_join_q[35:18];
    assign i_mul65_1_cnn805_bs1_merged_bit_select_e = i_inc79_cnn804_vt_join_q[17:0];

    // i_mul65_1_cnn805_bjA2(BITJOIN,2958)@754
    assign i_mul65_1_cnn805_bjA2_q = {GND_q, i_mul65_1_cnn805_bs1_merged_bit_select_b};

    // i_mul65_1_cnn805_im0_cma(CHAINMULTADD,17829)@754 + 5
    // out q@760
    assign i_mul65_1_cnn805_im0_cma_reset = ~ (resetn);
    assign i_mul65_1_cnn805_im0_cma_ena0 = 1'b1;
    assign i_mul65_1_cnn805_im0_cma_ena1 = i_mul65_1_cnn805_im0_cma_ena0;
    assign i_mul65_1_cnn805_im0_cma_ena2 = i_mul65_1_cnn805_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_im0_cma_ah[0] <= i_mul65_1_cnn805_bjA2_q;
        end
    end

    assign i_mul65_1_cnn805_im0_cma_a0 = i_mul65_1_cnn805_im0_cma_ah[0];
    assign i_mul65_1_cnn805_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_1_cnn805_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_1_cnn805_im0_cma_ena2, i_mul65_1_cnn805_im0_cma_ena1, i_mul65_1_cnn805_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_1_cnn805_im0_cma_a0),
        .coefsela(i_mul65_1_cnn805_im0_cma_c0),
        .resulta(i_mul65_1_cnn805_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_1_cnn805_im0_cma_delay ( .xin(i_mul65_1_cnn805_im0_cma_s0), .xout(i_mul65_1_cnn805_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_1_cnn805_im0_cma_q = i_mul65_1_cnn805_im0_cma_qq[21:0];

    // redist39_i_mul65_1_cnn805_im0_cma_q_1(DELAY,17956)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist39_i_mul65_1_cnn805_im0_cma_q_1_q <= i_mul65_1_cnn805_im0_cma_q;
        end
    end

    // i_mul65_1_cnn805_sums_align_5(BITSHIFT,2981)@761
    assign i_mul65_1_cnn805_sums_align_5_qint = { redist39_i_mul65_1_cnn805_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_1_cnn805_sums_align_5_q = i_mul65_1_cnn805_sums_align_5_qint[74:0];

    // i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,11527)@761
    assign i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_1_cnn805_sums_align_5_q[69:0];

    // i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,11514)@761
    assign i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_1_cnn805_sums_align_3_q[64:64];

    // i_mul65_1_cnn805_bjA7(BITJOIN,2963)@754
    assign i_mul65_1_cnn805_bjA7_q = {GND_q, i_mul65_1_cnn805_bs1_merged_bit_select_c};

    // i_mul65_1_cnn805_im5_cma(CHAINMULTADD,17830)@754 + 5
    // out q@760
    assign i_mul65_1_cnn805_im5_cma_reset = ~ (resetn);
    assign i_mul65_1_cnn805_im5_cma_ena0 = 1'b1;
    assign i_mul65_1_cnn805_im5_cma_ena1 = i_mul65_1_cnn805_im5_cma_ena0;
    assign i_mul65_1_cnn805_im5_cma_ena2 = i_mul65_1_cnn805_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_im5_cma_ah[0] <= i_mul65_1_cnn805_bjA7_q;
        end
    end

    assign i_mul65_1_cnn805_im5_cma_a0 = i_mul65_1_cnn805_im5_cma_ah[0];
    assign i_mul65_1_cnn805_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_1_cnn805_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_1_cnn805_im5_cma_ena2, i_mul65_1_cnn805_im5_cma_ena1, i_mul65_1_cnn805_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_1_cnn805_im5_cma_a0),
        .coefsela(i_mul65_1_cnn805_im5_cma_c0),
        .resulta(i_mul65_1_cnn805_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_1_cnn805_im5_cma_delay ( .xin(i_mul65_1_cnn805_im5_cma_s0), .xout(i_mul65_1_cnn805_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_1_cnn805_im5_cma_q = i_mul65_1_cnn805_im5_cma_qq[29:0];

    // redist38_i_mul65_1_cnn805_im5_cma_q_1(DELAY,17955)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist38_i_mul65_1_cnn805_im5_cma_q_1_q <= i_mul65_1_cnn805_im5_cma_q;
        end
    end

    // i_mul65_1_cnn805_sums_align_3(BITSHIFT,2979)@761
    assign i_mul65_1_cnn805_sums_align_3_qint = { redist38_i_mul65_1_cnn805_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_1_cnn805_sums_align_3_q = i_mul65_1_cnn805_sums_align_3_qint[64:0];

    // i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,11519)@761
    assign i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_align_3_q};

    // i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2(ADD,9370)@761 + 1
    assign i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_q = i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,11533)@762
    assign i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_1_cnn805_sums_result_add_0_0_q[47:47];

    // i_mul65_1_cnn805_bjA12(BITJOIN,2968)@754
    assign i_mul65_1_cnn805_bjA12_q = {GND_q, i_mul65_1_cnn805_bs1_merged_bit_select_d};

    // i_mul65_1_cnn805_im10_cma(CHAINMULTADD,17831)@754 + 5
    // out q@760
    assign i_mul65_1_cnn805_im10_cma_reset = ~ (resetn);
    assign i_mul65_1_cnn805_im10_cma_ena0 = 1'b1;
    assign i_mul65_1_cnn805_im10_cma_ena1 = i_mul65_1_cnn805_im10_cma_ena0;
    assign i_mul65_1_cnn805_im10_cma_ena2 = i_mul65_1_cnn805_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_im10_cma_ah[0] <= i_mul65_1_cnn805_bjA12_q;
        end
    end

    assign i_mul65_1_cnn805_im10_cma_a0 = i_mul65_1_cnn805_im10_cma_ah[0];
    assign i_mul65_1_cnn805_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_1_cnn805_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_1_cnn805_im10_cma_ena2, i_mul65_1_cnn805_im10_cma_ena1, i_mul65_1_cnn805_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_1_cnn805_im10_cma_a0),
        .coefsela(i_mul65_1_cnn805_im10_cma_c0),
        .resulta(i_mul65_1_cnn805_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_1_cnn805_im10_cma_delay ( .xin(i_mul65_1_cnn805_im10_cma_s0), .xout(i_mul65_1_cnn805_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_1_cnn805_im10_cma_q = i_mul65_1_cnn805_im10_cma_qq[29:0];

    // redist37_i_mul65_1_cnn805_im10_cma_q_1(DELAY,17954)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist37_i_mul65_1_cnn805_im10_cma_q_1_q <= i_mul65_1_cnn805_im10_cma_q;
        end
    end

    // i_mul65_1_cnn805_sums_align_1(BITSHIFT,2977)@761
    assign i_mul65_1_cnn805_sums_align_1_qint = { redist37_i_mul65_1_cnn805_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_1_cnn805_sums_align_1_q = i_mul65_1_cnn805_sums_align_1_qint[46:0];

    // i_mul65_1_cnn805_bjA17(BITJOIN,2973)@754
    assign i_mul65_1_cnn805_bjA17_q = {GND_q, i_mul65_1_cnn805_bs1_merged_bit_select_e};

    // i_mul65_1_cnn805_im15_cma(CHAINMULTADD,17832)@754 + 5
    // out q@760
    assign i_mul65_1_cnn805_im15_cma_reset = ~ (resetn);
    assign i_mul65_1_cnn805_im15_cma_ena0 = 1'b1;
    assign i_mul65_1_cnn805_im15_cma_ena1 = i_mul65_1_cnn805_im15_cma_ena0;
    assign i_mul65_1_cnn805_im15_cma_ena2 = i_mul65_1_cnn805_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_im15_cma_ah[0] <= i_mul65_1_cnn805_bjA17_q;
        end
    end

    assign i_mul65_1_cnn805_im15_cma_a0 = i_mul65_1_cnn805_im15_cma_ah[0];
    assign i_mul65_1_cnn805_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_1_cnn805_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_1_cnn805_im15_cma_ena2, i_mul65_1_cnn805_im15_cma_ena1, i_mul65_1_cnn805_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_1_cnn805_im15_cma_a0),
        .coefsela(i_mul65_1_cnn805_im15_cma_c0),
        .resulta(i_mul65_1_cnn805_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_1_cnn805_im15_cma_delay ( .xin(i_mul65_1_cnn805_im15_cma_s0), .xout(i_mul65_1_cnn805_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_1_cnn805_im15_cma_q = i_mul65_1_cnn805_im15_cma_qq[29:0];

    // redist36_i_mul65_1_cnn805_im15_cma_q_1(DELAY,17953)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist36_i_mul65_1_cnn805_im15_cma_q_1_q <= i_mul65_1_cnn805_im15_cma_q;
        end
    end

    // i_mul65_1_cnn805_sums_result_add_0_0(ADD,2983)@761 + 1
    assign i_mul65_1_cnn805_sums_result_add_0_0_a = {{18{redist36_i_mul65_1_cnn805_im15_cma_q_1_q[29]}}, redist36_i_mul65_1_cnn805_im15_cma_q_1_q};
    assign i_mul65_1_cnn805_sums_result_add_0_0_b = {{1{i_mul65_1_cnn805_sums_align_1_q[46]}}, i_mul65_1_cnn805_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_sums_result_add_0_0_o <= $signed(i_mul65_1_cnn805_sums_result_add_0_0_a) + $signed(i_mul65_1_cnn805_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_1_cnn805_sums_result_add_0_0_q = i_mul65_1_cnn805_sums_result_add_0_0_o[47:0];

    // i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,11555)@762
    assign i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_1_cnn805_sums_result_add_0_0_q};

    // i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2(ADD,9381)@762 + 1
    assign i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_q = i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,11567)@763
    assign i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,11530)@761
    assign i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_1_cnn805_sums_align_5_q[74:74];

    // redist496_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18413)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist496_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,11529)@761
    assign i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_1_cnn805_sums_align_5_q[74:70];

    // redist497_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18414)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist497_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,11531)@762
    assign i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist496_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist497_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18415)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,11526)@762
    assign i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist498_i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2(ADD,9371)@762 + 1
    assign i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_cin = i_mul65_1_cnn805_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_1_cnn805_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_q = i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,11568)@763
    assign i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_1_cnn805_sums_result_add_0_1_p2_of_2_q};

    // redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18406)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,11563)@763
    assign i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist489_i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2(ADD,9382)@763 + 1
    assign i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_cin = i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_1_cnn805_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_q = i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist748_i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_q_1(DELAY,18665)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist748_i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_1_cnn805_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9383)@764
    assign i_mul65_1_cnn805_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_1_cnn805_sums_result_add_1_0_p2_of_2_q, redist748_i_mul65_1_cnn805_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_1_cnn805_extender_x(BITJOIN,2727)@764
    assign i_mul65_1_cnn805_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_1_cnn805_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_1_cnn805_sel_x(BITSELECT,1053)@764
    assign bgTrunc_i_mul65_1_cnn805_sel_x_b = i_mul65_1_cnn805_extender_x_q[63:0];

    // i_mul65_1_cnn805_vt_select_63(BITSELECT,1008)@764
    assign i_mul65_1_cnn805_vt_select_63_b = bgTrunc_i_mul65_1_cnn805_sel_x_b[63:1];

    // i_mul65_1_cnn805_vt_join(BITJOIN,1007)@764
    assign i_mul65_1_cnn805_vt_join_q = {i_mul65_1_cnn805_vt_select_63_b, VCC_q};

    // i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select(BITSELECT,17904)@764
    assign i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_b = i_mul65_1_cnn805_vt_join_q[63:54];
    assign i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_c = i_mul65_1_cnn805_vt_join_q[53:36];
    assign i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_d = i_mul65_1_cnn805_vt_join_q[35:18];
    assign i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_e = i_mul65_1_cnn805_vt_join_q[17:0];

    // i_add_ptr66_1_cnn810_mult_x_bjA2(BITJOIN,3468)@764
    assign i_add_ptr66_1_cnn810_mult_x_bjA2_q = {GND_q, i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_1_cnn810_mult_x_im0_shift0(BITSHIFT,8164)@764
    assign i_add_ptr66_1_cnn810_mult_x_im0_shift0_qint = { i_add_ptr66_1_cnn810_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_1_cnn810_mult_x_im0_shift0_q = i_add_ptr66_1_cnn810_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_align_5(BITSHIFT,3491)@764
    assign i_add_ptr66_1_cnn810_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_1_cnn810_mult_x_im0_shift0_q[12]}}, i_add_ptr66_1_cnn810_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_1_cnn810_mult_x_sums_align_5_q = i_add_ptr66_1_cnn810_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_1_cnn810_mult_x_bjA7(BITJOIN,3473)@764
    assign i_add_ptr66_1_cnn810_mult_x_bjA7_q = {GND_q, i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_1_cnn810_mult_x_im5_shift0(BITSHIFT,8165)@764
    assign i_add_ptr66_1_cnn810_mult_x_im5_shift0_qint = { i_add_ptr66_1_cnn810_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_1_cnn810_mult_x_im5_shift0_q = i_add_ptr66_1_cnn810_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_align_3(BITSHIFT,3489)@764
    assign i_add_ptr66_1_cnn810_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_1_cnn810_mult_x_im5_shift0_q[20]}}, i_add_ptr66_1_cnn810_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_1_cnn810_mult_x_sums_align_3_q = i_add_ptr66_1_cnn810_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1(ADD,3494)@764 + 1
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_1_cnn810_mult_x_sums_align_3_q[58]}}, i_add_ptr66_1_cnn810_mult_x_sums_align_3_q};
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_1_cnn810_mult_x_sums_align_5_q[68]}}, i_add_ptr66_1_cnn810_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_q = i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12326)@765
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_1_cnn810_mult_x_bjA12(BITJOIN,3478)@764
    assign i_add_ptr66_1_cnn810_mult_x_bjA12_q = {GND_q, i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_1_cnn810_mult_x_im10_shift0(BITSHIFT,8166)@764
    assign i_add_ptr66_1_cnn810_mult_x_im10_shift0_qint = { i_add_ptr66_1_cnn810_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_1_cnn810_mult_x_im10_shift0_q = i_add_ptr66_1_cnn810_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_align_1(BITSHIFT,3487)@764
    assign i_add_ptr66_1_cnn810_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_1_cnn810_mult_x_im10_shift0_q[20]}}, i_add_ptr66_1_cnn810_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_1_cnn810_mult_x_sums_align_1_q = i_add_ptr66_1_cnn810_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_1_cnn810_mult_x_bjA17(BITJOIN,3483)@764
    assign i_add_ptr66_1_cnn810_mult_x_bjA17_q = {GND_q, i_add_ptr66_1_cnn810_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_1_cnn810_mult_x_im15_shift0(BITSHIFT,8167)@764
    assign i_add_ptr66_1_cnn810_mult_x_im15_shift0_qint = { i_add_ptr66_1_cnn810_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_1_cnn810_mult_x_im15_shift0_q = i_add_ptr66_1_cnn810_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0(ADD,3493)@764 + 1
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_1_cnn810_mult_x_im15_shift0_q[20]}}, i_add_ptr66_1_cnn810_mult_x_im15_shift0_q};
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_1_cnn810_mult_x_sums_align_1_q[40]}}, i_add_ptr66_1_cnn810_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_q = i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12354)@765
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2(ADD,9667)@765 + 1
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12359)@765
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_1_cnn810_mult_x_sums_result_add_0_1_q[69:69];

    // redist338_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18255)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist338_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist339_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18256)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist339_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2(ADD,9668)@766 + 1
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist339_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist339_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist338_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist338_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist731_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18648)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist731_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9669)@767
    assign i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p2_of_2_q, redist731_i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_1_cnn810_mult_extender_x(BITJOIN,1337)@767
    assign i_add_ptr66_1_cnn810_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_1_cnn810_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_1_cnn810_trunc_sel_x(BITSELECT,1339)@767
    assign i_add_ptr66_1_cnn810_trunc_sel_x_b = i_add_ptr66_1_cnn810_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806(BLACKBOX,706)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_807 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_select_63(BITSELECT,709)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_join(BITJOIN,708)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_1_cnn810_add_x(ADD,1331)@767
    assign i_add_ptr66_1_cnn810_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer5_cnn806_vt_join_q};
    assign i_add_ptr66_1_cnn810_add_x_b = {1'b0, i_add_ptr66_1_cnn810_trunc_sel_x_b};
    assign i_add_ptr66_1_cnn810_add_x_o = $unsigned(i_add_ptr66_1_cnn810_add_x_a) + $unsigned(i_add_ptr66_1_cnn810_add_x_b);
    assign i_add_ptr66_1_cnn810_add_x_q = i_add_ptr66_1_cnn810_add_x_o[64:0];

    // i_add_ptr66_1_cnn810_dupName_0_trunc_sel_x(BITSELECT,1340)@767
    assign i_add_ptr66_1_cnn810_dupName_0_trunc_sel_x_b = i_add_ptr66_1_cnn810_add_x_q[63:0];

    // i_add_ptr66_1_cnn809_vt_select_63(BITSELECT,72)@767
    assign i_add_ptr66_1_cnn809_vt_select_63_b = i_add_ptr66_1_cnn810_dupName_0_trunc_sel_x_b[63:3];

    // redist872_i_add_ptr66_1_cnn809_vt_select_63_b_1(DELAY,18789)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist872_i_add_ptr66_1_cnn809_vt_select_63_b_1_q <= i_add_ptr66_1_cnn809_vt_select_63_b;
        end
    end

    // i_add_ptr66_1_cnn809_vt_join(BITJOIN,71)@768
    assign i_add_ptr66_1_cnn809_vt_join_q = {redist872_i_add_ptr66_1_cnn809_vt_select_63_b_1_q, i_add_ptr66_13_cnn1277_vt_const_2_q};

    // i_add_ptr70_3_1_cnn836_add_x(ADD,1901)@768
    assign i_add_ptr70_3_1_cnn836_add_x_a = {1'b0, i_add_ptr66_1_cnn809_vt_join_q};
    assign i_add_ptr70_3_1_cnn836_add_x_b = {1'b0, i_add_ptr70_3_1_cnn836_trunc_sel_x_b};
    assign i_add_ptr70_3_1_cnn836_add_x_o = $unsigned(i_add_ptr70_3_1_cnn836_add_x_a) + $unsigned(i_add_ptr70_3_1_cnn836_add_x_b);
    assign i_add_ptr70_3_1_cnn836_add_x_q = i_add_ptr70_3_1_cnn836_add_x_o[64:0];

    // i_add_ptr70_3_1_cnn836_dupName_0_trunc_sel_x(BITSELECT,1910)@768
    assign i_add_ptr70_3_1_cnn836_dupName_0_trunc_sel_x_b = i_add_ptr70_3_1_cnn836_add_x_q[63:0];

    // i_add_ptr70_3_1_cnn835_vt_select_63(BITSELECT,243)@768
    assign i_add_ptr70_3_1_cnn835_vt_select_63_b = i_add_ptr70_3_1_cnn836_dupName_0_trunc_sel_x_b[63:2];

    // redist815_i_add_ptr70_3_1_cnn835_vt_select_63_b_1(DELAY,18732)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist815_i_add_ptr70_3_1_cnn835_vt_select_63_b_1_q <= i_add_ptr70_3_1_cnn835_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_1_cnn835_vt_join(BITJOIN,242)@769
    assign i_add_ptr70_3_1_cnn835_vt_join_q = {redist815_i_add_ptr70_3_1_cnn835_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_1_cnn838_add_x(ADD,2541)@769
    assign i_add_ptr73_371_1_cnn838_add_x_a = {1'b0, i_add_ptr70_3_1_cnn835_vt_join_q};
    assign i_add_ptr73_371_1_cnn838_add_x_b = {1'b0, i_add_ptr73_371_1_cnn838_trunc_sel_x_b};
    assign i_add_ptr73_371_1_cnn838_add_x_o = $unsigned(i_add_ptr73_371_1_cnn838_add_x_a) + $unsigned(i_add_ptr73_371_1_cnn838_add_x_b);
    assign i_add_ptr73_371_1_cnn838_add_x_q = i_add_ptr73_371_1_cnn838_add_x_o[64:0];

    // i_add_ptr73_371_1_cnn838_dupName_0_trunc_sel_x(BITSELECT,2550)@769
    assign i_add_ptr73_371_1_cnn838_dupName_0_trunc_sel_x_b = i_add_ptr73_371_1_cnn838_add_x_q[63:0];

    // i_add_ptr73_371_1_cnn837_vt_select_63(BITSELECT,435)@769
    assign i_add_ptr73_371_1_cnn837_vt_select_63_b = i_add_ptr73_371_1_cnn838_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_1_cnn837_vt_join(BITJOIN,434)@769
    assign i_add_ptr73_371_1_cnn837_vt_join_q = {i_add_ptr73_371_1_cnn837_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_select_63(BITSELECT,982)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_select_63_b = i_add_ptr73_371_1_cnn837_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_join(BITJOIN,981)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn115_cnn832(BLACKBOX,579)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_115_cnn833 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn115_cnn832 (
        .in_intel_reserved_ffwd_34_0(in_intel_reserved_ffwd_34_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_34_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn115_cnn832_out_dest_data_out_34_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_1_cnn830_mult_x_im0_shift0(BITSHIFT,8576)@766
    assign i_add_ptr73_270_1_cnn830_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_1_cnn830_mult_x_im0_shift0_q = i_add_ptr73_270_1_cnn830_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_align_5(BITSHIFT,6581)@766
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_1_cnn830_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_1_cnn830_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_align_5_q = i_add_ptr73_270_1_cnn830_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_1_cnn830_mult_x_im5_shift0(BITSHIFT,8577)@766
    assign i_add_ptr73_270_1_cnn830_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_1_cnn830_mult_x_im5_shift0_q = i_add_ptr73_270_1_cnn830_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_align_3(BITSHIFT,6579)@766
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_1_cnn830_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_1_cnn830_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_align_3_q = i_add_ptr73_270_1_cnn830_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1(ADD,6584)@766 + 1
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_1_cnn830_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_1_cnn830_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_1_cnn830_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_1_cnn830_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16034)@767
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_1_cnn830_mult_x_im10_shift0(BITSHIFT,8578)@766
    assign i_add_ptr73_270_1_cnn830_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_1_cnn830_mult_x_im10_shift0_q = i_add_ptr73_270_1_cnn830_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_align_1(BITSHIFT,6577)@766
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_1_cnn830_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_1_cnn830_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_align_1_q = i_add_ptr73_270_1_cnn830_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_1_cnn830_mult_x_im15_shift0(BITSHIFT,8579)@766
    assign i_add_ptr73_270_1_cnn830_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_1_cnn830_mult_x_im15_shift0_q = i_add_ptr73_270_1_cnn830_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0(ADD,6583)@766 + 1
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_1_cnn830_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_1_cnn830_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_1_cnn830_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_1_cnn830_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16062)@767
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2(ADD,10800)@767 + 1
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16067)@767
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_0_1_q[69:69];

    // redist132_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18049)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist132_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist133_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18050)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist133_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2(ADD,10801)@768 + 1
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist133_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist133_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist132_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist132_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist628_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18545)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist628_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10802)@769
    assign i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p2_of_2_q, redist628_i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_1_cnn830_mult_extender_x(BITJOIN,2367)@769
    assign i_add_ptr73_270_1_cnn830_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_1_cnn830_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_1_cnn830_trunc_sel_x(BITSELECT,2369)@769
    assign i_add_ptr73_270_1_cnn830_trunc_sel_x_b = i_add_ptr73_270_1_cnn830_mult_extender_x_q[63:0];

    // i_add_ptr70_2_1_cnn828_mult_x_im0_shift0(BITSHIFT,8324)@765
    assign i_add_ptr70_2_1_cnn828_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_1_cnn828_mult_x_im0_shift0_q = i_add_ptr70_2_1_cnn828_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_align_5(BITSHIFT,4691)@765
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_1_cnn828_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_1_cnn828_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_align_5_q = i_add_ptr70_2_1_cnn828_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_1_cnn828_mult_x_im5_shift0(BITSHIFT,8325)@765
    assign i_add_ptr70_2_1_cnn828_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_1_cnn828_mult_x_im5_shift0_q = i_add_ptr70_2_1_cnn828_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_align_3(BITSHIFT,4689)@765
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_1_cnn828_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_1_cnn828_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_align_3_q = i_add_ptr70_2_1_cnn828_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1(ADD,4694)@765 + 1
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_1_cnn828_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_1_cnn828_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_1_cnn828_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_1_cnn828_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13766)@766
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_1_cnn828_mult_x_im10_shift0(BITSHIFT,8326)@765
    assign i_add_ptr70_2_1_cnn828_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_1_cnn828_mult_x_im10_shift0_q = i_add_ptr70_2_1_cnn828_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_align_1(BITSHIFT,4687)@765
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_1_cnn828_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_1_cnn828_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_align_1_q = i_add_ptr70_2_1_cnn828_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_1_cnn828_mult_x_im15_shift0(BITSHIFT,8327)@765
    assign i_add_ptr70_2_1_cnn828_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_1_cnn828_mult_x_im15_shift0_q = i_add_ptr70_2_1_cnn828_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0(ADD,4693)@765 + 1
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_1_cnn828_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_1_cnn828_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_1_cnn828_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_1_cnn828_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13794)@766
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2(ADD,10107)@766 + 1
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13799)@766
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_0_1_q[69:69];

    // redist258_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18175)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist258_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist259_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18176)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist259_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2(ADD,10108)@767 + 1
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist259_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist259_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist258_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist258_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist691_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18608)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist691_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10109)@768
    assign i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p2_of_2_q, redist691_i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_1_cnn828_mult_extender_x(BITJOIN,1737)@768
    assign i_add_ptr70_2_1_cnn828_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_1_cnn828_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_1_cnn828_trunc_sel_x(BITSELECT,1739)@768
    assign i_add_ptr70_2_1_cnn828_trunc_sel_x_b = i_add_ptr70_2_1_cnn828_mult_extender_x_q[63:0];

    // i_add_ptr70_2_1_cnn828_add_x(ADD,1731)@768
    assign i_add_ptr70_2_1_cnn828_add_x_a = {1'b0, i_add_ptr66_1_cnn809_vt_join_q};
    assign i_add_ptr70_2_1_cnn828_add_x_b = {1'b0, i_add_ptr70_2_1_cnn828_trunc_sel_x_b};
    assign i_add_ptr70_2_1_cnn828_add_x_o = $unsigned(i_add_ptr70_2_1_cnn828_add_x_a) + $unsigned(i_add_ptr70_2_1_cnn828_add_x_b);
    assign i_add_ptr70_2_1_cnn828_add_x_q = i_add_ptr70_2_1_cnn828_add_x_o[64:0];

    // i_add_ptr70_2_1_cnn828_dupName_0_trunc_sel_x(BITSELECT,1740)@768
    assign i_add_ptr70_2_1_cnn828_dupName_0_trunc_sel_x_b = i_add_ptr70_2_1_cnn828_add_x_q[63:0];

    // i_add_ptr70_2_1_cnn827_vt_select_63(BITSELECT,192)@768
    assign i_add_ptr70_2_1_cnn827_vt_select_63_b = i_add_ptr70_2_1_cnn828_dupName_0_trunc_sel_x_b[63:2];

    // redist832_i_add_ptr70_2_1_cnn827_vt_select_63_b_1(DELAY,18749)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist832_i_add_ptr70_2_1_cnn827_vt_select_63_b_1_q <= i_add_ptr70_2_1_cnn827_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_1_cnn827_vt_join(BITJOIN,191)@769
    assign i_add_ptr70_2_1_cnn827_vt_join_q = {redist832_i_add_ptr70_2_1_cnn827_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_1_cnn830_add_x(ADD,2361)@769
    assign i_add_ptr73_270_1_cnn830_add_x_a = {1'b0, i_add_ptr70_2_1_cnn827_vt_join_q};
    assign i_add_ptr73_270_1_cnn830_add_x_b = {1'b0, i_add_ptr73_270_1_cnn830_trunc_sel_x_b};
    assign i_add_ptr73_270_1_cnn830_add_x_o = $unsigned(i_add_ptr73_270_1_cnn830_add_x_a) + $unsigned(i_add_ptr73_270_1_cnn830_add_x_b);
    assign i_add_ptr73_270_1_cnn830_add_x_q = i_add_ptr73_270_1_cnn830_add_x_o[64:0];

    // i_add_ptr73_270_1_cnn830_dupName_0_trunc_sel_x(BITSELECT,2370)@769
    assign i_add_ptr73_270_1_cnn830_dupName_0_trunc_sel_x_b = i_add_ptr73_270_1_cnn830_add_x_q[63:0];

    // i_add_ptr73_270_1_cnn829_vt_select_63(BITSELECT,381)@769
    assign i_add_ptr73_270_1_cnn829_vt_select_63_b = i_add_ptr73_270_1_cnn830_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_1_cnn829_vt_join(BITJOIN,380)@769
    assign i_add_ptr73_270_1_cnn829_vt_join_q = {i_add_ptr73_270_1_cnn829_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_select_63(BITSELECT,978)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_select_63_b = i_add_ptr73_270_1_cnn829_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_join(BITJOIN,977)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn114_cnn824(BLACKBOX,578)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_114_cnn825 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn114_cnn824 (
        .in_intel_reserved_ffwd_33_0(in_intel_reserved_ffwd_33_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_33_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn114_cnn824_out_dest_data_out_33_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_1_cnn822_mult_x_im0_shift0(BITSHIFT,8508)@766
    assign i_add_ptr73_169_1_cnn822_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_1_cnn822_mult_x_im0_shift0_q = i_add_ptr73_169_1_cnn822_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_align_5(BITSHIFT,6071)@766
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_1_cnn822_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_1_cnn822_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_align_5_q = i_add_ptr73_169_1_cnn822_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_1_cnn822_mult_x_im5_shift0(BITSHIFT,8509)@766
    assign i_add_ptr73_169_1_cnn822_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_1_cnn822_mult_x_im5_shift0_q = i_add_ptr73_169_1_cnn822_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_align_3(BITSHIFT,6069)@766
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_1_cnn822_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_1_cnn822_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_align_3_q = i_add_ptr73_169_1_cnn822_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1(ADD,6074)@766 + 1
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_1_cnn822_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_1_cnn822_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_1_cnn822_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_1_cnn822_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15422)@767
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_1_cnn822_mult_x_im10_shift0(BITSHIFT,8510)@766
    assign i_add_ptr73_169_1_cnn822_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_1_cnn822_mult_x_im10_shift0_q = i_add_ptr73_169_1_cnn822_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_align_1(BITSHIFT,6067)@766
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_1_cnn822_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_1_cnn822_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_align_1_q = i_add_ptr73_169_1_cnn822_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_1_cnn822_mult_x_im15_shift0(BITSHIFT,8511)@766
    assign i_add_ptr73_169_1_cnn822_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_1_cnn822_mult_x_im15_shift0_q = i_add_ptr73_169_1_cnn822_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0(ADD,6073)@766 + 1
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_1_cnn822_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_1_cnn822_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_1_cnn822_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_1_cnn822_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15450)@767
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2(ADD,10613)@767 + 1
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15455)@767
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_0_1_q[69:69];

    // redist166_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18083)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist166_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist167_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18084)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist167_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2(ADD,10614)@768 + 1
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist167_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist167_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist166_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist166_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist645_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18562)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist645_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10615)@769
    assign i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p2_of_2_q, redist645_i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_1_cnn822_mult_extender_x(BITJOIN,2197)@769
    assign i_add_ptr73_169_1_cnn822_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_1_cnn822_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_1_cnn822_trunc_sel_x(BITSELECT,2199)@769
    assign i_add_ptr73_169_1_cnn822_trunc_sel_x_b = i_add_ptr73_169_1_cnn822_mult_extender_x_q[63:0];

    // i_add_ptr70_1_1_cnn820_mult_x_im0_shift0(BITSHIFT,8256)@765
    assign i_add_ptr70_1_1_cnn820_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_1_cnn820_mult_x_im0_shift0_q = i_add_ptr70_1_1_cnn820_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_align_5(BITSHIFT,4181)@765
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_1_cnn820_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_1_cnn820_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_align_5_q = i_add_ptr70_1_1_cnn820_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_1_cnn820_mult_x_im5_shift0(BITSHIFT,8257)@765
    assign i_add_ptr70_1_1_cnn820_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_1_cnn820_mult_x_im5_shift0_q = i_add_ptr70_1_1_cnn820_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_align_3(BITSHIFT,4179)@765
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_1_cnn820_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_1_cnn820_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_align_3_q = i_add_ptr70_1_1_cnn820_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1(ADD,4184)@765 + 1
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_1_cnn820_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_1_cnn820_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_1_cnn820_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_1_cnn820_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13154)@766
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_1_cnn820_mult_x_im10_shift0(BITSHIFT,8258)@765
    assign i_add_ptr70_1_1_cnn820_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_1_cnn820_mult_x_im10_shift0_q = i_add_ptr70_1_1_cnn820_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_align_1(BITSHIFT,4177)@765
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_1_cnn820_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_1_cnn820_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_align_1_q = i_add_ptr70_1_1_cnn820_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_1_cnn820_mult_x_im15_shift0(BITSHIFT,8259)@765
    assign i_add_ptr70_1_1_cnn820_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_1_cnn820_mult_x_im15_shift0_q = i_add_ptr70_1_1_cnn820_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0(ADD,4183)@765 + 1
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_1_cnn820_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_1_cnn820_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_1_cnn820_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_1_cnn820_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13182)@766
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2(ADD,9920)@766 + 1
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13187)@766
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_0_1_q[69:69];

    // redist292_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18209)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist292_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist293_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18210)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist293_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2(ADD,9921)@767 + 1
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist293_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist293_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist292_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist292_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist708_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18625)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist708_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9922)@768
    assign i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p2_of_2_q, redist708_i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_1_cnn820_mult_extender_x(BITJOIN,1567)@768
    assign i_add_ptr70_1_1_cnn820_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_1_cnn820_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_1_cnn820_trunc_sel_x(BITSELECT,1569)@768
    assign i_add_ptr70_1_1_cnn820_trunc_sel_x_b = i_add_ptr70_1_1_cnn820_mult_extender_x_q[63:0];

    // i_add_ptr70_1_1_cnn820_add_x(ADD,1561)@768
    assign i_add_ptr70_1_1_cnn820_add_x_a = {1'b0, i_add_ptr66_1_cnn809_vt_join_q};
    assign i_add_ptr70_1_1_cnn820_add_x_b = {1'b0, i_add_ptr70_1_1_cnn820_trunc_sel_x_b};
    assign i_add_ptr70_1_1_cnn820_add_x_o = $unsigned(i_add_ptr70_1_1_cnn820_add_x_a) + $unsigned(i_add_ptr70_1_1_cnn820_add_x_b);
    assign i_add_ptr70_1_1_cnn820_add_x_q = i_add_ptr70_1_1_cnn820_add_x_o[64:0];

    // i_add_ptr70_1_1_cnn820_dupName_0_trunc_sel_x(BITSELECT,1570)@768
    assign i_add_ptr70_1_1_cnn820_dupName_0_trunc_sel_x_b = i_add_ptr70_1_1_cnn820_add_x_q[63:0];

    // i_add_ptr70_1_1_cnn819_vt_select_63(BITSELECT,141)@768
    assign i_add_ptr70_1_1_cnn819_vt_select_63_b = i_add_ptr70_1_1_cnn820_dupName_0_trunc_sel_x_b[63:2];

    // redist849_i_add_ptr70_1_1_cnn819_vt_select_63_b_1(DELAY,18766)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist849_i_add_ptr70_1_1_cnn819_vt_select_63_b_1_q <= i_add_ptr70_1_1_cnn819_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_1_cnn819_vt_join(BITJOIN,140)@769
    assign i_add_ptr70_1_1_cnn819_vt_join_q = {redist849_i_add_ptr70_1_1_cnn819_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_1_cnn822_add_x(ADD,2191)@769
    assign i_add_ptr73_169_1_cnn822_add_x_a = {1'b0, i_add_ptr70_1_1_cnn819_vt_join_q};
    assign i_add_ptr73_169_1_cnn822_add_x_b = {1'b0, i_add_ptr73_169_1_cnn822_trunc_sel_x_b};
    assign i_add_ptr73_169_1_cnn822_add_x_o = $unsigned(i_add_ptr73_169_1_cnn822_add_x_a) + $unsigned(i_add_ptr73_169_1_cnn822_add_x_b);
    assign i_add_ptr73_169_1_cnn822_add_x_q = i_add_ptr73_169_1_cnn822_add_x_o[64:0];

    // i_add_ptr73_169_1_cnn822_dupName_0_trunc_sel_x(BITSELECT,2200)@769
    assign i_add_ptr73_169_1_cnn822_dupName_0_trunc_sel_x_b = i_add_ptr73_169_1_cnn822_add_x_q[63:0];

    // i_add_ptr73_169_1_cnn821_vt_select_63(BITSELECT,330)@769
    assign i_add_ptr73_169_1_cnn821_vt_select_63_b = i_add_ptr73_169_1_cnn822_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_1_cnn821_vt_join(BITJOIN,329)@769
    assign i_add_ptr73_169_1_cnn821_vt_join_q = {i_add_ptr73_169_1_cnn821_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_select_63(BITSELECT,974)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_select_63_b = i_add_ptr73_169_1_cnn821_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_join(BITJOIN,973)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn113_cnn816(BLACKBOX,577)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_113_cnn817 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn113_cnn816 (
        .in_intel_reserved_ffwd_32_0(in_intel_reserved_ffwd_32_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_32_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn113_cnn816_out_dest_data_out_32_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_174_cnn814_mult_x_im0_shift0(BITSHIFT,8548)@766
    assign i_add_ptr73_174_cnn814_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_174_cnn814_mult_x_im0_shift0_q = i_add_ptr73_174_cnn814_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_align_5(BITSHIFT,6371)@766
    assign i_add_ptr73_174_cnn814_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_174_cnn814_mult_x_im0_shift0_q[12]}}, i_add_ptr73_174_cnn814_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_174_cnn814_mult_x_sums_align_5_q = i_add_ptr73_174_cnn814_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_174_cnn814_mult_x_im5_shift0(BITSHIFT,8549)@766
    assign i_add_ptr73_174_cnn814_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_174_cnn814_mult_x_im5_shift0_q = i_add_ptr73_174_cnn814_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_align_3(BITSHIFT,6369)@766
    assign i_add_ptr73_174_cnn814_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_174_cnn814_mult_x_im5_shift0_q[20]}}, i_add_ptr73_174_cnn814_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_174_cnn814_mult_x_sums_align_3_q = i_add_ptr73_174_cnn814_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1(ADD,6374)@766 + 1
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_174_cnn814_mult_x_sums_align_3_q[58]}}, i_add_ptr73_174_cnn814_mult_x_sums_align_3_q};
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_174_cnn814_mult_x_sums_align_5_q[68]}}, i_add_ptr73_174_cnn814_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_q = i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15782)@767
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_174_cnn814_mult_x_im10_shift0(BITSHIFT,8550)@766
    assign i_add_ptr73_174_cnn814_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_174_cnn814_mult_x_im10_shift0_q = i_add_ptr73_174_cnn814_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_align_1(BITSHIFT,6367)@766
    assign i_add_ptr73_174_cnn814_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_174_cnn814_mult_x_im10_shift0_q[20]}}, i_add_ptr73_174_cnn814_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_174_cnn814_mult_x_sums_align_1_q = i_add_ptr73_174_cnn814_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_174_cnn814_mult_x_im15_shift0(BITSHIFT,8551)@766
    assign i_add_ptr73_174_cnn814_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_174_cnn814_mult_x_im15_shift0_q = i_add_ptr73_174_cnn814_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0(ADD,6373)@766 + 1
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_174_cnn814_mult_x_im15_shift0_q[20]}}, i_add_ptr73_174_cnn814_mult_x_im15_shift0_q};
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_174_cnn814_mult_x_sums_align_1_q[40]}}, i_add_ptr73_174_cnn814_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_q = i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15810)@767
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2(ADD,10723)@767 + 1
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15815)@767
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_174_cnn814_mult_x_sums_result_add_0_1_q[69:69];

    // redist146_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18063)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist146_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist147_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18064)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist147_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2(ADD,10724)@768 + 1
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist147_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist147_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist146_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist146_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist635_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18552)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist635_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10725)@769
    assign i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p2_of_2_q, redist635_i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_174_cnn814_mult_extender_x(BITJOIN,2297)@769
    assign i_add_ptr73_174_cnn814_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_174_cnn814_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_174_cnn814_trunc_sel_x(BITSELECT,2299)@769
    assign i_add_ptr73_174_cnn814_trunc_sel_x_b = i_add_ptr73_174_cnn814_mult_extender_x_q[63:0];

    // i_add_ptr70_173_cnn812_mult_x_im0_shift0(BITSHIFT,8228)@765
    assign i_add_ptr70_173_cnn812_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_173_cnn812_mult_x_im0_shift0_q = i_add_ptr70_173_cnn812_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_align_5(BITSHIFT,3971)@765
    assign i_add_ptr70_173_cnn812_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_173_cnn812_mult_x_im0_shift0_q[12]}}, i_add_ptr70_173_cnn812_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_173_cnn812_mult_x_sums_align_5_q = i_add_ptr70_173_cnn812_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_173_cnn812_mult_x_im5_shift0(BITSHIFT,8229)@765
    assign i_add_ptr70_173_cnn812_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_173_cnn812_mult_x_im5_shift0_q = i_add_ptr70_173_cnn812_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_align_3(BITSHIFT,3969)@765
    assign i_add_ptr70_173_cnn812_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_173_cnn812_mult_x_im5_shift0_q[20]}}, i_add_ptr70_173_cnn812_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_173_cnn812_mult_x_sums_align_3_q = i_add_ptr70_173_cnn812_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1(ADD,3974)@765 + 1
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_173_cnn812_mult_x_sums_align_3_q[58]}}, i_add_ptr70_173_cnn812_mult_x_sums_align_3_q};
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_173_cnn812_mult_x_sums_align_5_q[68]}}, i_add_ptr70_173_cnn812_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_q = i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12902)@766
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_173_cnn812_mult_x_im10_shift0(BITSHIFT,8230)@765
    assign i_add_ptr70_173_cnn812_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_173_cnn812_mult_x_im10_shift0_q = i_add_ptr70_173_cnn812_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_align_1(BITSHIFT,3967)@765
    assign i_add_ptr70_173_cnn812_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_173_cnn812_mult_x_im10_shift0_q[20]}}, i_add_ptr70_173_cnn812_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_173_cnn812_mult_x_sums_align_1_q = i_add_ptr70_173_cnn812_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_173_cnn812_mult_x_im15_shift0(BITSHIFT,8231)@765
    assign i_add_ptr70_173_cnn812_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_173_cnn812_mult_x_im15_shift0_q = i_add_ptr70_173_cnn812_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0(ADD,3973)@765 + 1
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_173_cnn812_mult_x_im15_shift0_q[20]}}, i_add_ptr70_173_cnn812_mult_x_im15_shift0_q};
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_173_cnn812_mult_x_sums_align_1_q[40]}}, i_add_ptr70_173_cnn812_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_q = i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12930)@766
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2(ADD,9843)@766 + 1
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12935)@766
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_173_cnn812_mult_x_sums_result_add_0_1_q[69:69];

    // redist306_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18223)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist306_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist307_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18224)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist307_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2(ADD,9844)@767 + 1
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist307_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist307_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist306_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist306_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist715_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18632)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist715_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9845)@768
    assign i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p2_of_2_q, redist715_i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_173_cnn812_mult_extender_x(BITJOIN,1497)@768
    assign i_add_ptr70_173_cnn812_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_173_cnn812_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_173_cnn812_trunc_sel_x(BITSELECT,1499)@768
    assign i_add_ptr70_173_cnn812_trunc_sel_x_b = i_add_ptr70_173_cnn812_mult_extender_x_q[63:0];

    // i_add_ptr70_173_cnn812_add_x(ADD,1491)@768
    assign i_add_ptr70_173_cnn812_add_x_a = {1'b0, i_add_ptr66_1_cnn809_vt_join_q};
    assign i_add_ptr70_173_cnn812_add_x_b = {1'b0, i_add_ptr70_173_cnn812_trunc_sel_x_b};
    assign i_add_ptr70_173_cnn812_add_x_o = $unsigned(i_add_ptr70_173_cnn812_add_x_a) + $unsigned(i_add_ptr70_173_cnn812_add_x_b);
    assign i_add_ptr70_173_cnn812_add_x_q = i_add_ptr70_173_cnn812_add_x_o[64:0];

    // i_add_ptr70_173_cnn812_dupName_0_trunc_sel_x(BITSELECT,1500)@768
    assign i_add_ptr70_173_cnn812_dupName_0_trunc_sel_x_b = i_add_ptr70_173_cnn812_add_x_q[63:0];

    // i_add_ptr70_173_cnn811_vt_select_63(BITSELECT,120)@768
    assign i_add_ptr70_173_cnn811_vt_select_63_b = i_add_ptr70_173_cnn812_dupName_0_trunc_sel_x_b[63:2];

    // redist856_i_add_ptr70_173_cnn811_vt_select_63_b_1(DELAY,18773)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist856_i_add_ptr70_173_cnn811_vt_select_63_b_1_q <= i_add_ptr70_173_cnn811_vt_select_63_b;
        end
    end

    // i_add_ptr70_173_cnn811_vt_join(BITJOIN,119)@769
    assign i_add_ptr70_173_cnn811_vt_join_q = {redist856_i_add_ptr70_173_cnn811_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_174_cnn814_add_x(ADD,2291)@769
    assign i_add_ptr73_174_cnn814_add_x_a = {1'b0, i_add_ptr70_173_cnn811_vt_join_q};
    assign i_add_ptr73_174_cnn814_add_x_b = {1'b0, i_add_ptr73_174_cnn814_trunc_sel_x_b};
    assign i_add_ptr73_174_cnn814_add_x_o = $unsigned(i_add_ptr73_174_cnn814_add_x_a) + $unsigned(i_add_ptr73_174_cnn814_add_x_b);
    assign i_add_ptr73_174_cnn814_add_x_q = i_add_ptr73_174_cnn814_add_x_o[64:0];

    // i_add_ptr73_174_cnn814_dupName_0_trunc_sel_x(BITSELECT,2300)@769
    assign i_add_ptr73_174_cnn814_dupName_0_trunc_sel_x_b = i_add_ptr73_174_cnn814_add_x_q[63:0];

    // i_add_ptr73_174_cnn813_vt_select_63(BITSELECT,360)@769
    assign i_add_ptr73_174_cnn813_vt_select_63_b = i_add_ptr73_174_cnn814_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_174_cnn813_vt_join(BITJOIN,359)@769
    assign i_add_ptr73_174_cnn813_vt_join_q = {i_add_ptr73_174_cnn813_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_select_63(BITSELECT,950)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_select_63_b = i_add_ptr73_174_cnn813_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_join(BITJOIN,949)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn112_cnn801(BLACKBOX,576)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_112_cnn802 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn112_cnn801 (
        .in_intel_reserved_ffwd_31_0(in_intel_reserved_ffwd_31_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_31_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn112_cnn801_out_dest_data_out_31_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_371_cnn799_mult_x_im0_shift0(BITSHIFT,8684)@766
    assign i_add_ptr73_371_cnn799_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_371_cnn799_mult_x_im0_shift0_q = i_add_ptr73_371_cnn799_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_align_5(BITSHIFT,7391)@766
    assign i_add_ptr73_371_cnn799_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_371_cnn799_mult_x_im0_shift0_q[12]}}, i_add_ptr73_371_cnn799_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_371_cnn799_mult_x_sums_align_5_q = i_add_ptr73_371_cnn799_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_371_cnn799_mult_x_im5_shift0(BITSHIFT,8685)@766
    assign i_add_ptr73_371_cnn799_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_371_cnn799_mult_x_im5_shift0_q = i_add_ptr73_371_cnn799_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_align_3(BITSHIFT,7389)@766
    assign i_add_ptr73_371_cnn799_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_371_cnn799_mult_x_im5_shift0_q[20]}}, i_add_ptr73_371_cnn799_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_371_cnn799_mult_x_sums_align_3_q = i_add_ptr73_371_cnn799_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1(ADD,7394)@766 + 1
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_371_cnn799_mult_x_sums_align_3_q[58]}}, i_add_ptr73_371_cnn799_mult_x_sums_align_3_q};
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_371_cnn799_mult_x_sums_align_5_q[68]}}, i_add_ptr73_371_cnn799_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_q = i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17006)@767
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_371_cnn799_mult_x_im10_shift0(BITSHIFT,8686)@766
    assign i_add_ptr73_371_cnn799_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_371_cnn799_mult_x_im10_shift0_q = i_add_ptr73_371_cnn799_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_align_1(BITSHIFT,7387)@766
    assign i_add_ptr73_371_cnn799_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_371_cnn799_mult_x_im10_shift0_q[20]}}, i_add_ptr73_371_cnn799_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_371_cnn799_mult_x_sums_align_1_q = i_add_ptr73_371_cnn799_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_371_cnn799_mult_x_im15_shift0(BITSHIFT,8687)@766
    assign i_add_ptr73_371_cnn799_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_371_cnn799_mult_x_im15_shift0_q = i_add_ptr73_371_cnn799_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0(ADD,7393)@766 + 1
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_371_cnn799_mult_x_im15_shift0_q[20]}}, i_add_ptr73_371_cnn799_mult_x_im15_shift0_q};
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_371_cnn799_mult_x_sums_align_1_q[40]}}, i_add_ptr73_371_cnn799_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_q = i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17034)@767
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2(ADD,11097)@767 + 1
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17039)@767
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_371_cnn799_mult_x_sums_result_add_0_1_q[69:69];

    // redist78_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17995)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist78_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist79_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17996)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist79_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2(ADD,11098)@768 + 1
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist79_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist79_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist78_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist78_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist601_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18518)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist601_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11099)@769
    assign i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p2_of_2_q, redist601_i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_371_cnn799_mult_extender_x(BITJOIN,2637)@769
    assign i_add_ptr73_371_cnn799_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_371_cnn799_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_371_cnn799_trunc_sel_x(BITSELECT,2639)@769
    assign i_add_ptr73_371_cnn799_trunc_sel_x_b = i_add_ptr73_371_cnn799_mult_extender_x_q[63:0];

    // i_add_ptr70_3_cnn797_mult_x_im0_shift0(BITSHIFT,8428)@765
    assign i_add_ptr70_3_cnn797_mult_x_im0_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_3_cnn797_mult_x_im0_shift0_q = i_add_ptr70_3_cnn797_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_align_5(BITSHIFT,5471)@765
    assign i_add_ptr70_3_cnn797_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_3_cnn797_mult_x_im0_shift0_q[12]}}, i_add_ptr70_3_cnn797_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_3_cnn797_mult_x_sums_align_5_q = i_add_ptr70_3_cnn797_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_3_cnn797_mult_x_im5_shift0(BITSHIFT,8429)@765
    assign i_add_ptr70_3_cnn797_mult_x_im5_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_3_cnn797_mult_x_im5_shift0_q = i_add_ptr70_3_cnn797_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_align_3(BITSHIFT,5469)@765
    assign i_add_ptr70_3_cnn797_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_3_cnn797_mult_x_im5_shift0_q[20]}}, i_add_ptr70_3_cnn797_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_3_cnn797_mult_x_sums_align_3_q = i_add_ptr70_3_cnn797_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1(ADD,5474)@765 + 1
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_3_cnn797_mult_x_sums_align_3_q[58]}}, i_add_ptr70_3_cnn797_mult_x_sums_align_3_q};
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_3_cnn797_mult_x_sums_align_5_q[68]}}, i_add_ptr70_3_cnn797_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_q = i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14702)@766
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_3_cnn797_mult_x_im10_shift0(BITSHIFT,8430)@765
    assign i_add_ptr70_3_cnn797_mult_x_im10_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_3_cnn797_mult_x_im10_shift0_q = i_add_ptr70_3_cnn797_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_align_1(BITSHIFT,5467)@765
    assign i_add_ptr70_3_cnn797_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_3_cnn797_mult_x_im10_shift0_q[20]}}, i_add_ptr70_3_cnn797_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_3_cnn797_mult_x_sums_align_1_q = i_add_ptr70_3_cnn797_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_3_cnn797_mult_x_im15_shift0(BITSHIFT,8431)@765
    assign i_add_ptr70_3_cnn797_mult_x_im15_shift0_qint = { i_add_ptr70_3_10_cnn1187_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_3_cnn797_mult_x_im15_shift0_q = i_add_ptr70_3_cnn797_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0(ADD,5473)@765 + 1
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_3_cnn797_mult_x_im15_shift0_q[20]}}, i_add_ptr70_3_cnn797_mult_x_im15_shift0_q};
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_3_cnn797_mult_x_sums_align_1_q[40]}}, i_add_ptr70_3_cnn797_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_q = i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14730)@766
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2(ADD,10393)@766 + 1
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14735)@766
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_3_cnn797_mult_x_sums_result_add_0_1_q[69:69];

    // redist206_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18123)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist206_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist207_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18124)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist207_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2(ADD,10394)@767 + 1
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist207_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist207_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist206_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist206_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist665_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18582)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist665_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10395)@768
    assign i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p2_of_2_q, redist665_i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_3_cnn797_mult_extender_x(BITJOIN,1997)@768
    assign i_add_ptr70_3_cnn797_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_3_cnn797_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_3_cnn797_trunc_sel_x(BITSELECT,1999)@768
    assign i_add_ptr70_3_cnn797_trunc_sel_x_b = i_add_ptr70_3_cnn797_mult_extender_x_q[63:0];

    // i_mul65_cnn759_bs1(BITSELECT,3227)@754
    assign i_mul65_cnn759_bs1_b = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out[63:54];

    // i_mul65_cnn759_bjA2(BITJOIN,3228)@754
    assign i_mul65_cnn759_bjA2_q = {GND_q, i_mul65_cnn759_bs1_b};

    // i_mul65_cnn759_im0_cma(CHAINMULTADD,17865)@754 + 5
    // out q@760
    assign i_mul65_cnn759_im0_cma_reset = ~ (resetn);
    assign i_mul65_cnn759_im0_cma_ena0 = 1'b1;
    assign i_mul65_cnn759_im0_cma_ena1 = i_mul65_cnn759_im0_cma_ena0;
    assign i_mul65_cnn759_im0_cma_ena2 = i_mul65_cnn759_im0_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_im0_cma_ah[0] <= i_mul65_cnn759_bjA2_q;
        end
    end

    assign i_mul65_cnn759_im0_cma_a0 = i_mul65_cnn759_im0_cma_ah[0];
    assign i_mul65_cnn759_im0_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(11),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(22)
    ) i_mul65_cnn759_im0_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_cnn759_im0_cma_ena2, i_mul65_cnn759_im0_cma_ena1, i_mul65_cnn759_im0_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_cnn759_im0_cma_a0),
        .coefsela(i_mul65_cnn759_im0_cma_c0),
        .resulta(i_mul65_cnn759_im0_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(22), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_cnn759_im0_cma_delay ( .xin(i_mul65_cnn759_im0_cma_s0), .xout(i_mul65_cnn759_im0_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_cnn759_im0_cma_q = i_mul65_cnn759_im0_cma_qq[21:0];

    // redist3_i_mul65_cnn759_im0_cma_q_1(DELAY,17920)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist3_i_mul65_cnn759_im0_cma_q_1_q <= i_mul65_cnn759_im0_cma_q;
        end
    end

    // i_mul65_cnn759_sums_align_5(BITSHIFT,3251)@761
    assign i_mul65_cnn759_sums_align_5_qint = { redist3_i_mul65_cnn759_im0_cma_q_1_q[20:0], 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_mul65_cnn759_sums_align_5_q = i_mul65_cnn759_sums_align_5_qint[74:0];

    // i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel0_0(BITSELECT,12031)@761
    assign i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b = i_mul65_cnn759_sums_align_5_q[69:0];

    // i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1(BITSELECT,12018)@761
    assign i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b = i_mul65_cnn759_sums_align_3_q[64:64];

    // i_mul65_cnn759_bs6(BITSELECT,3232)@754
    assign i_mul65_cnn759_bs6_in = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out[53:0];
    assign i_mul65_cnn759_bs6_b = i_mul65_cnn759_bs6_in[53:36];

    // i_mul65_cnn759_bjA7(BITJOIN,3233)@754
    assign i_mul65_cnn759_bjA7_q = {GND_q, i_mul65_cnn759_bs6_b};

    // i_mul65_cnn759_im5_cma(CHAINMULTADD,17866)@754 + 5
    // out q@760
    assign i_mul65_cnn759_im5_cma_reset = ~ (resetn);
    assign i_mul65_cnn759_im5_cma_ena0 = 1'b1;
    assign i_mul65_cnn759_im5_cma_ena1 = i_mul65_cnn759_im5_cma_ena0;
    assign i_mul65_cnn759_im5_cma_ena2 = i_mul65_cnn759_im5_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_im5_cma_ah[0] <= i_mul65_cnn759_bjA7_q;
        end
    end

    assign i_mul65_cnn759_im5_cma_a0 = i_mul65_cnn759_im5_cma_ah[0];
    assign i_mul65_cnn759_im5_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_cnn759_im5_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_cnn759_im5_cma_ena2, i_mul65_cnn759_im5_cma_ena1, i_mul65_cnn759_im5_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_cnn759_im5_cma_a0),
        .coefsela(i_mul65_cnn759_im5_cma_c0),
        .resulta(i_mul65_cnn759_im5_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_cnn759_im5_cma_delay ( .xin(i_mul65_cnn759_im5_cma_s0), .xout(i_mul65_cnn759_im5_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_cnn759_im5_cma_q = i_mul65_cnn759_im5_cma_qq[29:0];

    // redist2_i_mul65_cnn759_im5_cma_q_1(DELAY,17919)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist2_i_mul65_cnn759_im5_cma_q_1_q <= i_mul65_cnn759_im5_cma_q;
        end
    end

    // i_mul65_cnn759_sums_align_3(BITSHIFT,3249)@761
    assign i_mul65_cnn759_sums_align_3_qint = { redist2_i_mul65_cnn759_im5_cma_q_1_q[28:0], 36'b000000000000000000000000000000000000 };
    assign i_mul65_cnn759_sums_align_3_q = i_mul65_cnn759_sums_align_3_qint[64:0];

    // i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b(BITJOIN,12023)@761
    assign i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_align_3_q};

    // i_mul65_cnn759_sums_result_add_0_1_p1_of_2(ADD,9568)@761 + 1
    assign i_mul65_cnn759_sums_result_add_0_1_p1_of_2_a = {1'b0, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_cnn759_sums_result_add_0_1_p1_of_2_b = {1'b0, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel0_0_b};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_sums_result_add_0_1_p1_of_2_o <= $unsigned(i_mul65_cnn759_sums_result_add_0_1_p1_of_2_a) + $unsigned(i_mul65_cnn759_sums_result_add_0_1_p1_of_2_b);
        end
    end
    assign i_mul65_cnn759_sums_result_add_0_1_p1_of_2_c[0] = i_mul65_cnn759_sums_result_add_0_1_p1_of_2_o[70];
    assign i_mul65_cnn759_sums_result_add_0_1_p1_of_2_q = i_mul65_cnn759_sums_result_add_0_1_p1_of_2_o[69:0];

    // i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12037)@762
    assign i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_mul65_cnn759_sums_result_add_0_0_q[47:47];

    // i_mul65_cnn759_bs11(BITSELECT,3237)@754
    assign i_mul65_cnn759_bs11_in = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out[35:0];
    assign i_mul65_cnn759_bs11_b = i_mul65_cnn759_bs11_in[35:18];

    // i_mul65_cnn759_bjA12(BITJOIN,3238)@754
    assign i_mul65_cnn759_bjA12_q = {GND_q, i_mul65_cnn759_bs11_b};

    // i_mul65_cnn759_im10_cma(CHAINMULTADD,17867)@754 + 5
    // out q@760
    assign i_mul65_cnn759_im10_cma_reset = ~ (resetn);
    assign i_mul65_cnn759_im10_cma_ena0 = 1'b1;
    assign i_mul65_cnn759_im10_cma_ena1 = i_mul65_cnn759_im10_cma_ena0;
    assign i_mul65_cnn759_im10_cma_ena2 = i_mul65_cnn759_im10_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_im10_cma_ah[0] <= i_mul65_cnn759_bjA12_q;
        end
    end

    assign i_mul65_cnn759_im10_cma_a0 = i_mul65_cnn759_im10_cma_ah[0];
    assign i_mul65_cnn759_im10_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_cnn759_im10_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_cnn759_im10_cma_ena2, i_mul65_cnn759_im10_cma_ena1, i_mul65_cnn759_im10_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_cnn759_im10_cma_a0),
        .coefsela(i_mul65_cnn759_im10_cma_c0),
        .resulta(i_mul65_cnn759_im10_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_cnn759_im10_cma_delay ( .xin(i_mul65_cnn759_im10_cma_s0), .xout(i_mul65_cnn759_im10_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_cnn759_im10_cma_q = i_mul65_cnn759_im10_cma_qq[29:0];

    // redist1_i_mul65_cnn759_im10_cma_q_1(DELAY,17918)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist1_i_mul65_cnn759_im10_cma_q_1_q <= i_mul65_cnn759_im10_cma_q;
        end
    end

    // i_mul65_cnn759_sums_align_1(BITSHIFT,3247)@761
    assign i_mul65_cnn759_sums_align_1_qint = { redist1_i_mul65_cnn759_im10_cma_q_1_q[28:0], 18'b000000000000000000 };
    assign i_mul65_cnn759_sums_align_1_q = i_mul65_cnn759_sums_align_1_qint[46:0];

    // i_mul65_cnn759_bs16(BITSELECT,3242)@754
    assign i_mul65_cnn759_bs16_in = i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out[17:0];
    assign i_mul65_cnn759_bs16_b = i_mul65_cnn759_bs16_in[17:0];

    // i_mul65_cnn759_bjA17(BITJOIN,3243)@754
    assign i_mul65_cnn759_bjA17_q = {GND_q, i_mul65_cnn759_bs16_b};

    // i_mul65_cnn759_im15_cma(CHAINMULTADD,17868)@754 + 5
    // out q@760
    assign i_mul65_cnn759_im15_cma_reset = ~ (resetn);
    assign i_mul65_cnn759_im15_cma_ena0 = 1'b1;
    assign i_mul65_cnn759_im15_cma_ena1 = i_mul65_cnn759_im15_cma_ena0;
    assign i_mul65_cnn759_im15_cma_ena2 = i_mul65_cnn759_im15_cma_ena0;
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_im15_cma_ah[0] <= i_mul65_cnn759_bjA17_q;
        end
    end

    assign i_mul65_cnn759_im15_cma_a0 = i_mul65_cnn759_im15_cma_ah[0];
    assign i_mul65_cnn759_im15_cma_c0 = {2'b00, GND_q[0:0]};
    fourteennm_mac #(
        .operation_mode("m18x18_full"),
        .clear_type("none"),
        .ay_scan_in_clock("0"),
        .ay_scan_in_width(19),
        .operand_source_max("coef"),
        .coef_sel_a_clock("0"),
        .coef_a_0(361),
        .signed_may("true"),
        .signed_max("true"),
        .input_pipeline_clock("2"),
        .second_pipeline_clock("2"),
        .output_clock("1"),
        .result_a_width(30)
    ) i_mul65_cnn759_im15_cma_DSP0 (
        .clk({clock,clock,clock}),
        .ena({ i_mul65_cnn759_im15_cma_ena2, i_mul65_cnn759_im15_cma_ena1, i_mul65_cnn759_im15_cma_ena0 }),
        .clr({ 1'b0, 1'b0 }),
        .ay(i_mul65_cnn759_im15_cma_a0),
        .coefsela(i_mul65_cnn759_im15_cma_c0),
        .resulta(i_mul65_cnn759_im15_cma_s0),
        .accumulate(),
        .loadconst(),
        .negate(),
        .sub(),
        .ax(),
        .az(),
        .bx(),
        .by(),
        .bz(),
        .coefselb(),
        .scanin(),
        .scanout(),
        .chainin(),
        .chainout(),
        .resultb(),
        .dfxlfsrena(),
        .dfxmisrena(),
        .dftout()
    );
    dspba_delay_ver #( .width(30), .depth(1), .reset_kind("NONE"), .phase(0), .modulus(1), .reset_high(1'b0) )
    i_mul65_cnn759_im15_cma_delay ( .xin(i_mul65_cnn759_im15_cma_s0), .xout(i_mul65_cnn759_im15_cma_qq), .clk(clock), .aclr(resetn), .ena(1'b1) );
    assign i_mul65_cnn759_im15_cma_q = i_mul65_cnn759_im15_cma_qq[29:0];

    // redist0_i_mul65_cnn759_im15_cma_q_1(DELAY,17917)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist0_i_mul65_cnn759_im15_cma_q_1_q <= i_mul65_cnn759_im15_cma_q;
        end
    end

    // i_mul65_cnn759_sums_result_add_0_0(ADD,3253)@761 + 1
    assign i_mul65_cnn759_sums_result_add_0_0_a = {{18{redist0_i_mul65_cnn759_im15_cma_q_1_q[29]}}, redist0_i_mul65_cnn759_im15_cma_q_1_q};
    assign i_mul65_cnn759_sums_result_add_0_0_b = {{1{i_mul65_cnn759_sums_align_1_q[46]}}, i_mul65_cnn759_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_sums_result_add_0_0_o <= $signed(i_mul65_cnn759_sums_result_add_0_0_a) + $signed(i_mul65_cnn759_sums_result_add_0_0_b);
        end
    end
    assign i_mul65_cnn759_sums_result_add_0_0_q = i_mul65_cnn759_sums_result_add_0_0_o[47:0];

    // i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12059)@762
    assign i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_mul65_cnn759_sums_result_add_0_0_q};

    // i_mul65_cnn759_sums_result_add_1_0_p1_of_2(ADD,9579)@762 + 1
    assign i_mul65_cnn759_sums_result_add_1_0_p1_of_2_a = {1'b0, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_mul65_cnn759_sums_result_add_1_0_p1_of_2_b = {1'b0, i_mul65_cnn759_sums_result_add_0_1_p1_of_2_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_mul65_cnn759_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_mul65_cnn759_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_mul65_cnn759_sums_result_add_1_0_p1_of_2_c[0] = i_mul65_cnn759_sums_result_add_1_0_p1_of_2_o[70];
    assign i_mul65_cnn759_sums_result_add_1_0_p1_of_2_q = i_mul65_cnn759_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_tessel1_1(BITSELECT,12071)@763
    assign i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b = i_mul65_cnn759_sums_result_add_0_1_p2_of_2_q[5:5];

    // i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1(BITSELECT,12034)@761
    assign i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b = i_mul65_cnn759_sums_align_5_q[74:74];

    // redist361_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1(DELAY,18278)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist361_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q <= i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b;
        end
    end

    // i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0(BITSELECT,12033)@761
    assign i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b = i_mul65_cnn759_sums_align_5_q[74:70];

    // redist362_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1(DELAY,18279)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist362_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q <= i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b;
        end
    end

    // i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c(BITJOIN,12035)@762
    assign i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q = {redist361_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_1_b_1_q, redist362_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_tessel1_0_b_1_q};

    // redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1(DELAY,18280)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q <= i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c(BITJOIN,12030)@762
    assign i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q = {redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q, redist363_i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_tessel1_5_b_1_q};

    // i_mul65_cnn759_sums_result_add_0_1_p2_of_2(ADD,9569)@762 + 1
    assign i_mul65_cnn759_sums_result_add_0_1_p2_of_2_cin = i_mul65_cnn759_sums_result_add_0_1_p1_of_2_c;
    assign i_mul65_cnn759_sums_result_add_0_1_p2_of_2_a = { {{1{i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q[5]}}, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_cnn759_sums_result_add_0_1_p2_of_2_b = { {{1{i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q[5]}}, i_mul65_cnn759_sums_result_add_0_1_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_cnn759_sums_result_add_0_1_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_sums_result_add_0_1_p2_of_2_o <= $signed(i_mul65_cnn759_sums_result_add_0_1_p2_of_2_a) + $signed(i_mul65_cnn759_sums_result_add_0_1_p2_of_2_b);
        end
    end
    assign i_mul65_cnn759_sums_result_add_0_1_p2_of_2_q = i_mul65_cnn759_sums_result_add_0_1_p2_of_2_o[6:1];

    // i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c(BITJOIN,12072)@763
    assign i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q = {i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_tessel1_1_b, i_mul65_cnn759_sums_result_add_0_1_p2_of_2_q};

    // redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1(DELAY,18271)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q <= i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c(BITJOIN,12067)@763
    assign i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q = {redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q, redist354_i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_tessel1_6_b_1_q};

    // i_mul65_cnn759_sums_result_add_1_0_p2_of_2(ADD,9580)@763 + 1
    assign i_mul65_cnn759_sums_result_add_1_0_p2_of_2_cin = i_mul65_cnn759_sums_result_add_1_0_p1_of_2_c;
    assign i_mul65_cnn759_sums_result_add_1_0_p2_of_2_a = { {{1{i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q[6]}}, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_c_q}, 1'b1 };
    assign i_mul65_cnn759_sums_result_add_1_0_p2_of_2_b = { {{1{i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q[6]}}, i_mul65_cnn759_sums_result_add_1_0_BitSelect_for_b_BitJoin_for_c_q}, i_mul65_cnn759_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_mul65_cnn759_sums_result_add_1_0_p2_of_2_o <= $signed(i_mul65_cnn759_sums_result_add_1_0_p2_of_2_a) + $signed(i_mul65_cnn759_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_mul65_cnn759_sums_result_add_1_0_p2_of_2_q = i_mul65_cnn759_sums_result_add_1_0_p2_of_2_o[7:1];

    // redist739_i_mul65_cnn759_sums_result_add_1_0_p1_of_2_q_1(DELAY,18656)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist739_i_mul65_cnn759_sums_result_add_1_0_p1_of_2_q_1_q <= i_mul65_cnn759_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_mul65_cnn759_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9581)@764
    assign i_mul65_cnn759_sums_result_add_1_0_BitJoin_for_q_q = {i_mul65_cnn759_sums_result_add_1_0_p2_of_2_q, redist739_i_mul65_cnn759_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_mul65_cnn759_extender_x(BITJOIN,2745)@764
    assign i_mul65_cnn759_extender_x_q = {i_mul65_10_cnn1156_multconst_x_q, i_mul65_cnn759_sums_result_add_1_0_BitJoin_for_q_q[72:0]};

    // bgTrunc_i_mul65_cnn759_sel_x(BITSELECT,1062)@764
    assign bgTrunc_i_mul65_cnn759_sel_x_b = i_mul65_cnn759_extender_x_q[63:0];

    // i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select(BITSELECT,17916)@764
    assign i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_b = bgTrunc_i_mul65_cnn759_sel_x_b[63:54];
    assign i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_c = bgTrunc_i_mul65_cnn759_sel_x_b[53:36];
    assign i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_d = bgTrunc_i_mul65_cnn759_sel_x_b[35:18];
    assign i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_e = bgTrunc_i_mul65_cnn759_sel_x_b[17:0];

    // i_add_ptr66_cnn764_mult_x_bjA2(BITJOIN,3738)@764
    assign i_add_ptr66_cnn764_mult_x_bjA2_q = {GND_q, i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr66_cnn764_mult_x_im0_shift0(BITSHIFT,8200)@764
    assign i_add_ptr66_cnn764_mult_x_im0_shift0_qint = { i_add_ptr66_cnn764_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr66_cnn764_mult_x_im0_shift0_q = i_add_ptr66_cnn764_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr66_cnn764_mult_x_sums_align_5(BITSHIFT,3761)@764
    assign i_add_ptr66_cnn764_mult_x_sums_align_5_qint = { {{2{i_add_ptr66_cnn764_mult_x_im0_shift0_q[12]}}, i_add_ptr66_cnn764_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr66_cnn764_mult_x_sums_align_5_q = i_add_ptr66_cnn764_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr66_cnn764_mult_x_bjA7(BITJOIN,3743)@764
    assign i_add_ptr66_cnn764_mult_x_bjA7_q = {GND_q, i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr66_cnn764_mult_x_im5_shift0(BITSHIFT,8201)@764
    assign i_add_ptr66_cnn764_mult_x_im5_shift0_qint = { i_add_ptr66_cnn764_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr66_cnn764_mult_x_im5_shift0_q = i_add_ptr66_cnn764_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr66_cnn764_mult_x_sums_align_3(BITSHIFT,3759)@764
    assign i_add_ptr66_cnn764_mult_x_sums_align_3_qint = { {{2{i_add_ptr66_cnn764_mult_x_im5_shift0_q[20]}}, i_add_ptr66_cnn764_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr66_cnn764_mult_x_sums_align_3_q = i_add_ptr66_cnn764_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr66_cnn764_mult_x_sums_result_add_0_1(ADD,3764)@764 + 1
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr66_cnn764_mult_x_sums_align_3_q[58]}}, i_add_ptr66_cnn764_mult_x_sums_align_3_q};
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr66_cnn764_mult_x_sums_align_5_q[68]}}, i_add_ptr66_cnn764_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_q = i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12650)@765
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr66_cnn764_mult_x_bjA12(BITJOIN,3748)@764
    assign i_add_ptr66_cnn764_mult_x_bjA12_q = {GND_q, i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr66_cnn764_mult_x_im10_shift0(BITSHIFT,8202)@764
    assign i_add_ptr66_cnn764_mult_x_im10_shift0_qint = { i_add_ptr66_cnn764_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr66_cnn764_mult_x_im10_shift0_q = i_add_ptr66_cnn764_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr66_cnn764_mult_x_sums_align_1(BITSHIFT,3757)@764
    assign i_add_ptr66_cnn764_mult_x_sums_align_1_qint = { {{2{i_add_ptr66_cnn764_mult_x_im10_shift0_q[20]}}, i_add_ptr66_cnn764_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr66_cnn764_mult_x_sums_align_1_q = i_add_ptr66_cnn764_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr66_cnn764_mult_x_bjA17(BITJOIN,3753)@764
    assign i_add_ptr66_cnn764_mult_x_bjA17_q = {GND_q, i_add_ptr66_cnn764_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr66_cnn764_mult_x_im15_shift0(BITSHIFT,8203)@764
    assign i_add_ptr66_cnn764_mult_x_im15_shift0_qint = { i_add_ptr66_cnn764_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr66_cnn764_mult_x_im15_shift0_q = i_add_ptr66_cnn764_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr66_cnn764_mult_x_sums_result_add_0_0(ADD,3763)@764 + 1
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr66_cnn764_mult_x_im15_shift0_q[20]}}, i_add_ptr66_cnn764_mult_x_im15_shift0_q};
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr66_cnn764_mult_x_sums_align_1_q[40]}}, i_add_ptr66_cnn764_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_q = i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12678)@765
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr66_cnn764_mult_x_sums_result_add_0_0_q};

    // i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2(ADD,9766)@765 + 1
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12683)@765
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr66_cnn764_mult_x_sums_result_add_0_1_q[69:69];

    // redist320_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18237)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist320_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist321_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18238)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist321_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2(ADD,9767)@766 + 1
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist321_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist321_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist320_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist320_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist722_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18639)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist722_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9768)@767
    assign i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p2_of_2_q, redist722_i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr66_cnn764_mult_extender_x(BITJOIN,1427)@767
    assign i_add_ptr66_cnn764_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr66_cnn764_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr66_cnn764_trunc_sel_x(BITSELECT,1429)@767
    assign i_add_ptr66_cnn764_trunc_sel_x_b = i_add_ptr66_cnn764_mult_extender_x_q[63:0];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760(BLACKBOX,726)@0
    // in in_i_dependence@767
    // in in_valid_in@767
    // out out_buffer_out@767
    // out out_valid_out@767
    cnn_i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_761 thei_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760 (
        .in_buffer_in(in_input),
        .in_i_dependence(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist772_sync_in_aunroll_x_in_i_valid_766_q),
        .out_buffer_out(i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_out_buffer_out),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_select_63(BITSELECT,729)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_select_63_b = i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_out_buffer_out[63:10];

    // i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_join(BITJOIN,728)@767
    assign i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_join_q = {i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_select_63_b, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer10_cnn1001_vt_const_9_q};

    // i_add_ptr66_cnn764_add_x(ADD,1421)@767
    assign i_add_ptr66_cnn764_add_x_a = {1'b0, i_llvm_fpga_sync_buffer_p1f32_input_sync_buffer_cnn760_vt_join_q};
    assign i_add_ptr66_cnn764_add_x_b = {1'b0, i_add_ptr66_cnn764_trunc_sel_x_b};
    assign i_add_ptr66_cnn764_add_x_o = $unsigned(i_add_ptr66_cnn764_add_x_a) + $unsigned(i_add_ptr66_cnn764_add_x_b);
    assign i_add_ptr66_cnn764_add_x_q = i_add_ptr66_cnn764_add_x_o[64:0];

    // i_add_ptr66_cnn764_dupName_0_trunc_sel_x(BITSELECT,1430)@767
    assign i_add_ptr66_cnn764_dupName_0_trunc_sel_x_b = i_add_ptr66_cnn764_add_x_q[63:0];

    // i_add_ptr66_cnn763_vt_select_63(BITSELECT,99)@767
    assign i_add_ptr66_cnn763_vt_select_63_b = i_add_ptr66_cnn764_dupName_0_trunc_sel_x_b[63:2];

    // redist863_i_add_ptr66_cnn763_vt_select_63_b_1(DELAY,18780)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist863_i_add_ptr66_cnn763_vt_select_63_b_1_q <= i_add_ptr66_cnn763_vt_select_63_b;
        end
    end

    // i_add_ptr66_cnn763_vt_join(BITJOIN,98)@768
    assign i_add_ptr66_cnn763_vt_join_q = {redist863_i_add_ptr66_cnn763_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr70_3_cnn797_add_x(ADD,1991)@768
    assign i_add_ptr70_3_cnn797_add_x_a = {1'b0, i_add_ptr66_cnn763_vt_join_q};
    assign i_add_ptr70_3_cnn797_add_x_b = {1'b0, i_add_ptr70_3_cnn797_trunc_sel_x_b};
    assign i_add_ptr70_3_cnn797_add_x_o = $unsigned(i_add_ptr70_3_cnn797_add_x_a) + $unsigned(i_add_ptr70_3_cnn797_add_x_b);
    assign i_add_ptr70_3_cnn797_add_x_q = i_add_ptr70_3_cnn797_add_x_o[64:0];

    // i_add_ptr70_3_cnn797_dupName_0_trunc_sel_x(BITSELECT,2000)@768
    assign i_add_ptr70_3_cnn797_dupName_0_trunc_sel_x_b = i_add_ptr70_3_cnn797_add_x_q[63:0];

    // i_add_ptr70_3_cnn796_vt_select_63(BITSELECT,270)@768
    assign i_add_ptr70_3_cnn796_vt_select_63_b = i_add_ptr70_3_cnn797_dupName_0_trunc_sel_x_b[63:2];

    // redist806_i_add_ptr70_3_cnn796_vt_select_63_b_1(DELAY,18723)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist806_i_add_ptr70_3_cnn796_vt_select_63_b_1_q <= i_add_ptr70_3_cnn796_vt_select_63_b;
        end
    end

    // i_add_ptr70_3_cnn796_vt_join(BITJOIN,269)@769
    assign i_add_ptr70_3_cnn796_vt_join_q = {redist806_i_add_ptr70_3_cnn796_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_371_cnn799_add_x(ADD,2631)@769
    assign i_add_ptr73_371_cnn799_add_x_a = {1'b0, i_add_ptr70_3_cnn796_vt_join_q};
    assign i_add_ptr73_371_cnn799_add_x_b = {1'b0, i_add_ptr73_371_cnn799_trunc_sel_x_b};
    assign i_add_ptr73_371_cnn799_add_x_o = $unsigned(i_add_ptr73_371_cnn799_add_x_a) + $unsigned(i_add_ptr73_371_cnn799_add_x_b);
    assign i_add_ptr73_371_cnn799_add_x_q = i_add_ptr73_371_cnn799_add_x_o[64:0];

    // i_add_ptr73_371_cnn799_dupName_0_trunc_sel_x(BITSELECT,2640)@769
    assign i_add_ptr73_371_cnn799_dupName_0_trunc_sel_x_b = i_add_ptr73_371_cnn799_add_x_q[63:0];

    // i_add_ptr73_371_cnn798_vt_select_63(BITSELECT,462)@769
    assign i_add_ptr73_371_cnn798_vt_select_63_b = i_add_ptr73_371_cnn799_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_371_cnn798_vt_join(BITJOIN,461)@769
    assign i_add_ptr73_371_cnn798_vt_join_q = {i_add_ptr73_371_cnn798_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_select_63(BITSELECT,906)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_select_63_b = i_add_ptr73_371_cnn798_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_join(BITJOIN,905)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn111_cnn793(BLACKBOX,575)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_111_cnn794 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn111_cnn793 (
        .in_intel_reserved_ffwd_30_0(in_intel_reserved_ffwd_30_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_30_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn111_cnn793_out_dest_data_out_30_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_270_cnn791_mult_x_im0_shift0(BITSHIFT,8612)@766
    assign i_add_ptr73_270_cnn791_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_270_cnn791_mult_x_im0_shift0_q = i_add_ptr73_270_cnn791_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_align_5(BITSHIFT,6851)@766
    assign i_add_ptr73_270_cnn791_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_270_cnn791_mult_x_im0_shift0_q[12]}}, i_add_ptr73_270_cnn791_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_270_cnn791_mult_x_sums_align_5_q = i_add_ptr73_270_cnn791_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_270_cnn791_mult_x_im5_shift0(BITSHIFT,8613)@766
    assign i_add_ptr73_270_cnn791_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_270_cnn791_mult_x_im5_shift0_q = i_add_ptr73_270_cnn791_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_align_3(BITSHIFT,6849)@766
    assign i_add_ptr73_270_cnn791_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_270_cnn791_mult_x_im5_shift0_q[20]}}, i_add_ptr73_270_cnn791_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_270_cnn791_mult_x_sums_align_3_q = i_add_ptr73_270_cnn791_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1(ADD,6854)@766 + 1
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_270_cnn791_mult_x_sums_align_3_q[58]}}, i_add_ptr73_270_cnn791_mult_x_sums_align_3_q};
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_270_cnn791_mult_x_sums_align_5_q[68]}}, i_add_ptr73_270_cnn791_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_q = i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,16358)@767
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_270_cnn791_mult_x_im10_shift0(BITSHIFT,8614)@766
    assign i_add_ptr73_270_cnn791_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_270_cnn791_mult_x_im10_shift0_q = i_add_ptr73_270_cnn791_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_align_1(BITSHIFT,6847)@766
    assign i_add_ptr73_270_cnn791_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_270_cnn791_mult_x_im10_shift0_q[20]}}, i_add_ptr73_270_cnn791_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_270_cnn791_mult_x_sums_align_1_q = i_add_ptr73_270_cnn791_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_270_cnn791_mult_x_im15_shift0(BITSHIFT,8615)@766
    assign i_add_ptr73_270_cnn791_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_270_cnn791_mult_x_im15_shift0_q = i_add_ptr73_270_cnn791_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0(ADD,6853)@766 + 1
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_270_cnn791_mult_x_im15_shift0_q[20]}}, i_add_ptr73_270_cnn791_mult_x_im15_shift0_q};
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_270_cnn791_mult_x_sums_align_1_q[40]}}, i_add_ptr73_270_cnn791_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_q = i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,16386)@767
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2(ADD,10899)@767 + 1
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,16391)@767
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_270_cnn791_mult_x_sums_result_add_0_1_q[69:69];

    // redist114_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18031)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist114_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist115_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18032)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist115_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2(ADD,10900)@768 + 1
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist115_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist115_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist114_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist114_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist619_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18536)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist619_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10901)@769
    assign i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p2_of_2_q, redist619_i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_270_cnn791_mult_extender_x(BITJOIN,2457)@769
    assign i_add_ptr73_270_cnn791_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_270_cnn791_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_270_cnn791_trunc_sel_x(BITSELECT,2459)@769
    assign i_add_ptr73_270_cnn791_trunc_sel_x_b = i_add_ptr73_270_cnn791_mult_extender_x_q[63:0];

    // i_add_ptr70_2_cnn789_mult_x_im0_shift0(BITSHIFT,8360)@765
    assign i_add_ptr70_2_cnn789_mult_x_im0_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_2_cnn789_mult_x_im0_shift0_q = i_add_ptr70_2_cnn789_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_align_5(BITSHIFT,4961)@765
    assign i_add_ptr70_2_cnn789_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_2_cnn789_mult_x_im0_shift0_q[12]}}, i_add_ptr70_2_cnn789_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_2_cnn789_mult_x_sums_align_5_q = i_add_ptr70_2_cnn789_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_2_cnn789_mult_x_im5_shift0(BITSHIFT,8361)@765
    assign i_add_ptr70_2_cnn789_mult_x_im5_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_2_cnn789_mult_x_im5_shift0_q = i_add_ptr70_2_cnn789_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_align_3(BITSHIFT,4959)@765
    assign i_add_ptr70_2_cnn789_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_2_cnn789_mult_x_im5_shift0_q[20]}}, i_add_ptr70_2_cnn789_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_2_cnn789_mult_x_sums_align_3_q = i_add_ptr70_2_cnn789_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1(ADD,4964)@765 + 1
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_2_cnn789_mult_x_sums_align_3_q[58]}}, i_add_ptr70_2_cnn789_mult_x_sums_align_3_q};
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_2_cnn789_mult_x_sums_align_5_q[68]}}, i_add_ptr70_2_cnn789_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_q = i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14090)@766
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_2_cnn789_mult_x_im10_shift0(BITSHIFT,8362)@765
    assign i_add_ptr70_2_cnn789_mult_x_im10_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_2_cnn789_mult_x_im10_shift0_q = i_add_ptr70_2_cnn789_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_align_1(BITSHIFT,4957)@765
    assign i_add_ptr70_2_cnn789_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_2_cnn789_mult_x_im10_shift0_q[20]}}, i_add_ptr70_2_cnn789_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_2_cnn789_mult_x_sums_align_1_q = i_add_ptr70_2_cnn789_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_2_cnn789_mult_x_im15_shift0(BITSHIFT,8363)@765
    assign i_add_ptr70_2_cnn789_mult_x_im15_shift0_qint = { i_add_ptr70_2_10_cnn1179_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_2_cnn789_mult_x_im15_shift0_q = i_add_ptr70_2_cnn789_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0(ADD,4963)@765 + 1
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_2_cnn789_mult_x_im15_shift0_q[20]}}, i_add_ptr70_2_cnn789_mult_x_im15_shift0_q};
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_2_cnn789_mult_x_sums_align_1_q[40]}}, i_add_ptr70_2_cnn789_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_q = i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14118)@766
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2(ADD,10206)@766 + 1
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14123)@766
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_2_cnn789_mult_x_sums_result_add_0_1_q[69:69];

    // redist240_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18157)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist240_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist241_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18158)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist241_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2(ADD,10207)@767 + 1
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist241_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist241_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist240_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist240_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist682_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18599)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist682_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10208)@768
    assign i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p2_of_2_q, redist682_i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_2_cnn789_mult_extender_x(BITJOIN,1827)@768
    assign i_add_ptr70_2_cnn789_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_2_cnn789_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_2_cnn789_trunc_sel_x(BITSELECT,1829)@768
    assign i_add_ptr70_2_cnn789_trunc_sel_x_b = i_add_ptr70_2_cnn789_mult_extender_x_q[63:0];

    // i_add_ptr70_2_cnn789_add_x(ADD,1821)@768
    assign i_add_ptr70_2_cnn789_add_x_a = {1'b0, i_add_ptr66_cnn763_vt_join_q};
    assign i_add_ptr70_2_cnn789_add_x_b = {1'b0, i_add_ptr70_2_cnn789_trunc_sel_x_b};
    assign i_add_ptr70_2_cnn789_add_x_o = $unsigned(i_add_ptr70_2_cnn789_add_x_a) + $unsigned(i_add_ptr70_2_cnn789_add_x_b);
    assign i_add_ptr70_2_cnn789_add_x_q = i_add_ptr70_2_cnn789_add_x_o[64:0];

    // i_add_ptr70_2_cnn789_dupName_0_trunc_sel_x(BITSELECT,1830)@768
    assign i_add_ptr70_2_cnn789_dupName_0_trunc_sel_x_b = i_add_ptr70_2_cnn789_add_x_q[63:0];

    // i_add_ptr70_2_cnn788_vt_select_63(BITSELECT,219)@768
    assign i_add_ptr70_2_cnn788_vt_select_63_b = i_add_ptr70_2_cnn789_dupName_0_trunc_sel_x_b[63:2];

    // redist823_i_add_ptr70_2_cnn788_vt_select_63_b_1(DELAY,18740)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist823_i_add_ptr70_2_cnn788_vt_select_63_b_1_q <= i_add_ptr70_2_cnn788_vt_select_63_b;
        end
    end

    // i_add_ptr70_2_cnn788_vt_join(BITJOIN,218)@769
    assign i_add_ptr70_2_cnn788_vt_join_q = {redist823_i_add_ptr70_2_cnn788_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_270_cnn791_add_x(ADD,2451)@769
    assign i_add_ptr73_270_cnn791_add_x_a = {1'b0, i_add_ptr70_2_cnn788_vt_join_q};
    assign i_add_ptr73_270_cnn791_add_x_b = {1'b0, i_add_ptr73_270_cnn791_trunc_sel_x_b};
    assign i_add_ptr73_270_cnn791_add_x_o = $unsigned(i_add_ptr73_270_cnn791_add_x_a) + $unsigned(i_add_ptr73_270_cnn791_add_x_b);
    assign i_add_ptr73_270_cnn791_add_x_q = i_add_ptr73_270_cnn791_add_x_o[64:0];

    // i_add_ptr73_270_cnn791_dupName_0_trunc_sel_x(BITSELECT,2460)@769
    assign i_add_ptr73_270_cnn791_dupName_0_trunc_sel_x_b = i_add_ptr73_270_cnn791_add_x_q[63:0];

    // i_add_ptr73_270_cnn790_vt_select_63(BITSELECT,408)@769
    assign i_add_ptr73_270_cnn790_vt_select_63_b = i_add_ptr73_270_cnn791_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_270_cnn790_vt_join(BITJOIN,407)@769
    assign i_add_ptr73_270_cnn790_vt_join_q = {i_add_ptr73_270_cnn790_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_select_63(BITSELECT,862)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_select_63_b = i_add_ptr73_270_cnn790_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_join(BITJOIN,861)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn110_cnn785(BLACKBOX,574)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_110_cnn786 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn110_cnn785 (
        .in_intel_reserved_ffwd_29_0(in_intel_reserved_ffwd_29_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_29_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn110_cnn785_out_dest_data_out_29_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_169_cnn783_mult_x_im0_shift0(BITSHIFT,8544)@766
    assign i_add_ptr73_169_cnn783_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_169_cnn783_mult_x_im0_shift0_q = i_add_ptr73_169_cnn783_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_align_5(BITSHIFT,6341)@766
    assign i_add_ptr73_169_cnn783_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_169_cnn783_mult_x_im0_shift0_q[12]}}, i_add_ptr73_169_cnn783_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_169_cnn783_mult_x_sums_align_5_q = i_add_ptr73_169_cnn783_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_169_cnn783_mult_x_im5_shift0(BITSHIFT,8545)@766
    assign i_add_ptr73_169_cnn783_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_169_cnn783_mult_x_im5_shift0_q = i_add_ptr73_169_cnn783_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_align_3(BITSHIFT,6339)@766
    assign i_add_ptr73_169_cnn783_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_169_cnn783_mult_x_im5_shift0_q[20]}}, i_add_ptr73_169_cnn783_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_169_cnn783_mult_x_sums_align_3_q = i_add_ptr73_169_cnn783_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1(ADD,6344)@766 + 1
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_169_cnn783_mult_x_sums_align_3_q[58]}}, i_add_ptr73_169_cnn783_mult_x_sums_align_3_q};
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_169_cnn783_mult_x_sums_align_5_q[68]}}, i_add_ptr73_169_cnn783_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_q = i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,15746)@767
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_169_cnn783_mult_x_im10_shift0(BITSHIFT,8546)@766
    assign i_add_ptr73_169_cnn783_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_169_cnn783_mult_x_im10_shift0_q = i_add_ptr73_169_cnn783_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_align_1(BITSHIFT,6337)@766
    assign i_add_ptr73_169_cnn783_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_169_cnn783_mult_x_im10_shift0_q[20]}}, i_add_ptr73_169_cnn783_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_169_cnn783_mult_x_sums_align_1_q = i_add_ptr73_169_cnn783_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_169_cnn783_mult_x_im15_shift0(BITSHIFT,8547)@766
    assign i_add_ptr73_169_cnn783_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_169_cnn783_mult_x_im15_shift0_q = i_add_ptr73_169_cnn783_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0(ADD,6343)@766 + 1
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_169_cnn783_mult_x_im15_shift0_q[20]}}, i_add_ptr73_169_cnn783_mult_x_im15_shift0_q};
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_169_cnn783_mult_x_sums_align_1_q[40]}}, i_add_ptr73_169_cnn783_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_q = i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,15774)@767
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2(ADD,10712)@767 + 1
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,15779)@767
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_169_cnn783_mult_x_sums_result_add_0_1_q[69:69];

    // redist148_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18065)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist148_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist149_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18066)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist149_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2(ADD,10713)@768 + 1
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist149_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist149_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist148_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist148_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist636_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18553)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist636_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10714)@769
    assign i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p2_of_2_q, redist636_i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_169_cnn783_mult_extender_x(BITJOIN,2287)@769
    assign i_add_ptr73_169_cnn783_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_169_cnn783_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_169_cnn783_trunc_sel_x(BITSELECT,2289)@769
    assign i_add_ptr73_169_cnn783_trunc_sel_x_b = i_add_ptr73_169_cnn783_mult_extender_x_q[63:0];

    // i_add_ptr70_1_cnn781_mult_x_im0_shift0(BITSHIFT,8292)@765
    assign i_add_ptr70_1_cnn781_mult_x_im0_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_1_cnn781_mult_x_im0_shift0_q = i_add_ptr70_1_cnn781_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_align_5(BITSHIFT,4451)@765
    assign i_add_ptr70_1_cnn781_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_1_cnn781_mult_x_im0_shift0_q[12]}}, i_add_ptr70_1_cnn781_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_1_cnn781_mult_x_sums_align_5_q = i_add_ptr70_1_cnn781_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_1_cnn781_mult_x_im5_shift0(BITSHIFT,8293)@765
    assign i_add_ptr70_1_cnn781_mult_x_im5_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_1_cnn781_mult_x_im5_shift0_q = i_add_ptr70_1_cnn781_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_align_3(BITSHIFT,4449)@765
    assign i_add_ptr70_1_cnn781_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_1_cnn781_mult_x_im5_shift0_q[20]}}, i_add_ptr70_1_cnn781_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_1_cnn781_mult_x_sums_align_3_q = i_add_ptr70_1_cnn781_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1(ADD,4454)@765 + 1
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_1_cnn781_mult_x_sums_align_3_q[58]}}, i_add_ptr70_1_cnn781_mult_x_sums_align_3_q};
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_1_cnn781_mult_x_sums_align_5_q[68]}}, i_add_ptr70_1_cnn781_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_q = i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,13478)@766
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_1_cnn781_mult_x_im10_shift0(BITSHIFT,8294)@765
    assign i_add_ptr70_1_cnn781_mult_x_im10_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_1_cnn781_mult_x_im10_shift0_q = i_add_ptr70_1_cnn781_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_align_1(BITSHIFT,4447)@765
    assign i_add_ptr70_1_cnn781_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_1_cnn781_mult_x_im10_shift0_q[20]}}, i_add_ptr70_1_cnn781_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_1_cnn781_mult_x_sums_align_1_q = i_add_ptr70_1_cnn781_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_1_cnn781_mult_x_im15_shift0(BITSHIFT,8295)@765
    assign i_add_ptr70_1_cnn781_mult_x_im15_shift0_qint = { i_add_ptr70_1_10_cnn1171_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_1_cnn781_mult_x_im15_shift0_q = i_add_ptr70_1_cnn781_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0(ADD,4453)@765 + 1
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_1_cnn781_mult_x_im15_shift0_q[20]}}, i_add_ptr70_1_cnn781_mult_x_im15_shift0_q};
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_1_cnn781_mult_x_sums_align_1_q[40]}}, i_add_ptr70_1_cnn781_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_q = i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,13506)@766
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2(ADD,10019)@766 + 1
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,13511)@766
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_1_cnn781_mult_x_sums_result_add_0_1_q[69:69];

    // redist274_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18191)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist274_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist275_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18192)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist275_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2(ADD,10020)@767 + 1
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist275_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist275_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist274_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist274_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist699_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18616)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist699_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10021)@768
    assign i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p2_of_2_q, redist699_i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_1_cnn781_mult_extender_x(BITJOIN,1657)@768
    assign i_add_ptr70_1_cnn781_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_1_cnn781_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_1_cnn781_trunc_sel_x(BITSELECT,1659)@768
    assign i_add_ptr70_1_cnn781_trunc_sel_x_b = i_add_ptr70_1_cnn781_mult_extender_x_q[63:0];

    // i_add_ptr70_1_cnn781_add_x(ADD,1651)@768
    assign i_add_ptr70_1_cnn781_add_x_a = {1'b0, i_add_ptr66_cnn763_vt_join_q};
    assign i_add_ptr70_1_cnn781_add_x_b = {1'b0, i_add_ptr70_1_cnn781_trunc_sel_x_b};
    assign i_add_ptr70_1_cnn781_add_x_o = $unsigned(i_add_ptr70_1_cnn781_add_x_a) + $unsigned(i_add_ptr70_1_cnn781_add_x_b);
    assign i_add_ptr70_1_cnn781_add_x_q = i_add_ptr70_1_cnn781_add_x_o[64:0];

    // i_add_ptr70_1_cnn781_dupName_0_trunc_sel_x(BITSELECT,1660)@768
    assign i_add_ptr70_1_cnn781_dupName_0_trunc_sel_x_b = i_add_ptr70_1_cnn781_add_x_q[63:0];

    // i_add_ptr70_1_cnn780_vt_select_63(BITSELECT,168)@768
    assign i_add_ptr70_1_cnn780_vt_select_63_b = i_add_ptr70_1_cnn781_dupName_0_trunc_sel_x_b[63:2];

    // redist840_i_add_ptr70_1_cnn780_vt_select_63_b_1(DELAY,18757)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist840_i_add_ptr70_1_cnn780_vt_select_63_b_1_q <= i_add_ptr70_1_cnn780_vt_select_63_b;
        end
    end

    // i_add_ptr70_1_cnn780_vt_join(BITJOIN,167)@769
    assign i_add_ptr70_1_cnn780_vt_join_q = {redist840_i_add_ptr70_1_cnn780_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_169_cnn783_add_x(ADD,2281)@769
    assign i_add_ptr73_169_cnn783_add_x_a = {1'b0, i_add_ptr70_1_cnn780_vt_join_q};
    assign i_add_ptr73_169_cnn783_add_x_b = {1'b0, i_add_ptr73_169_cnn783_trunc_sel_x_b};
    assign i_add_ptr73_169_cnn783_add_x_o = $unsigned(i_add_ptr73_169_cnn783_add_x_a) + $unsigned(i_add_ptr73_169_cnn783_add_x_b);
    assign i_add_ptr73_169_cnn783_add_x_q = i_add_ptr73_169_cnn783_add_x_o[64:0];

    // i_add_ptr73_169_cnn783_dupName_0_trunc_sel_x(BITSELECT,2290)@769
    assign i_add_ptr73_169_cnn783_dupName_0_trunc_sel_x_b = i_add_ptr73_169_cnn783_add_x_q[63:0];

    // i_add_ptr73_169_cnn782_vt_select_63(BITSELECT,357)@769
    assign i_add_ptr73_169_cnn782_vt_select_63_b = i_add_ptr73_169_cnn783_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_169_cnn782_vt_join(BITJOIN,356)@769
    assign i_add_ptr73_169_cnn782_vt_join_q = {i_add_ptr73_169_cnn782_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_select_63(BITSELECT,818)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_select_63_b = i_add_ptr73_169_cnn782_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_join(BITJOIN,817)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn109_cnn777(BLACKBOX,573)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_109_cnn778 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn109_cnn777 (
        .in_intel_reserved_ffwd_28_0(in_intel_reserved_ffwd_28_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_28_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn109_cnn777_out_dest_data_out_28_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // i_add_ptr73_cnn775_mult_x_im0_shift0(BITSHIFT,8712)@766
    assign i_add_ptr73_cnn775_mult_x_im0_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr73_cnn775_mult_x_im0_shift0_q = i_add_ptr73_cnn775_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr73_cnn775_mult_x_sums_align_5(BITSHIFT,7601)@766
    assign i_add_ptr73_cnn775_mult_x_sums_align_5_qint = { {{2{i_add_ptr73_cnn775_mult_x_im0_shift0_q[12]}}, i_add_ptr73_cnn775_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr73_cnn775_mult_x_sums_align_5_q = i_add_ptr73_cnn775_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr73_cnn775_mult_x_im5_shift0(BITSHIFT,8713)@766
    assign i_add_ptr73_cnn775_mult_x_im5_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr73_cnn775_mult_x_im5_shift0_q = i_add_ptr73_cnn775_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr73_cnn775_mult_x_sums_align_3(BITSHIFT,7599)@766
    assign i_add_ptr73_cnn775_mult_x_sums_align_3_qint = { {{2{i_add_ptr73_cnn775_mult_x_im5_shift0_q[20]}}, i_add_ptr73_cnn775_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr73_cnn775_mult_x_sums_align_3_q = i_add_ptr73_cnn775_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr73_cnn775_mult_x_sums_result_add_0_1(ADD,7604)@766 + 1
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr73_cnn775_mult_x_sums_align_3_q[58]}}, i_add_ptr73_cnn775_mult_x_sums_align_3_q};
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr73_cnn775_mult_x_sums_align_5_q[68]}}, i_add_ptr73_cnn775_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_q = i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,17258)@767
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr73_cnn775_mult_x_im10_shift0(BITSHIFT,8714)@766
    assign i_add_ptr73_cnn775_mult_x_im10_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr73_cnn775_mult_x_im10_shift0_q = i_add_ptr73_cnn775_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr73_cnn775_mult_x_sums_align_1(BITSHIFT,7597)@766
    assign i_add_ptr73_cnn775_mult_x_sums_align_1_qint = { {{2{i_add_ptr73_cnn775_mult_x_im10_shift0_q[20]}}, i_add_ptr73_cnn775_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr73_cnn775_mult_x_sums_align_1_q = i_add_ptr73_cnn775_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr73_cnn775_mult_x_im15_shift0(BITSHIFT,8715)@766
    assign i_add_ptr73_cnn775_mult_x_im15_shift0_qint = { i_add_ptr73_10_cnn1165_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr73_cnn775_mult_x_im15_shift0_q = i_add_ptr73_cnn775_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr73_cnn775_mult_x_sums_result_add_0_0(ADD,7603)@766 + 1
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr73_cnn775_mult_x_im15_shift0_q[20]}}, i_add_ptr73_cnn775_mult_x_im15_shift0_q};
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr73_cnn775_mult_x_sums_align_1_q[40]}}, i_add_ptr73_cnn775_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_q = i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,17286)@767
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr73_cnn775_mult_x_sums_result_add_0_0_q};

    // i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2(ADD,11174)@767 + 1
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,17291)@767
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr73_cnn775_mult_x_sums_result_add_0_1_q[69:69];

    // redist64_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,17981)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist64_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist65_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,17982)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist65_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2(ADD,11175)@768 + 1
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist65_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist65_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist64_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist64_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist594_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18511)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist594_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,11176)@769
    assign i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p2_of_2_q, redist594_i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr73_cnn775_mult_extender_x(BITJOIN,2707)@769
    assign i_add_ptr73_cnn775_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr73_cnn775_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr73_cnn775_trunc_sel_x(BITSELECT,2709)@769
    assign i_add_ptr73_cnn775_trunc_sel_x_b = i_add_ptr73_cnn775_mult_extender_x_q[63:0];

    // i_add_ptr70_cnn766_mult_x_im0_shift0(BITSHIFT,8456)@765
    assign i_add_ptr70_cnn766_mult_x_im0_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr70_cnn766_mult_x_im0_shift0_q = i_add_ptr70_cnn766_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr70_cnn766_mult_x_sums_align_5(BITSHIFT,5681)@765
    assign i_add_ptr70_cnn766_mult_x_sums_align_5_qint = { {{2{i_add_ptr70_cnn766_mult_x_im0_shift0_q[12]}}, i_add_ptr70_cnn766_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr70_cnn766_mult_x_sums_align_5_q = i_add_ptr70_cnn766_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr70_cnn766_mult_x_im5_shift0(BITSHIFT,8457)@765
    assign i_add_ptr70_cnn766_mult_x_im5_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr70_cnn766_mult_x_im5_shift0_q = i_add_ptr70_cnn766_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr70_cnn766_mult_x_sums_align_3(BITSHIFT,5679)@765
    assign i_add_ptr70_cnn766_mult_x_sums_align_3_qint = { {{2{i_add_ptr70_cnn766_mult_x_im5_shift0_q[20]}}, i_add_ptr70_cnn766_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr70_cnn766_mult_x_sums_align_3_q = i_add_ptr70_cnn766_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr70_cnn766_mult_x_sums_result_add_0_1(ADD,5684)@765 + 1
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr70_cnn766_mult_x_sums_align_3_q[58]}}, i_add_ptr70_cnn766_mult_x_sums_align_3_q};
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr70_cnn766_mult_x_sums_align_5_q[68]}}, i_add_ptr70_cnn766_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_q = i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,14954)@766
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr70_cnn766_mult_x_im10_shift0(BITSHIFT,8458)@765
    assign i_add_ptr70_cnn766_mult_x_im10_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr70_cnn766_mult_x_im10_shift0_q = i_add_ptr70_cnn766_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr70_cnn766_mult_x_sums_align_1(BITSHIFT,5677)@765
    assign i_add_ptr70_cnn766_mult_x_sums_align_1_qint = { {{2{i_add_ptr70_cnn766_mult_x_im10_shift0_q[20]}}, i_add_ptr70_cnn766_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr70_cnn766_mult_x_sums_align_1_q = i_add_ptr70_cnn766_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr70_cnn766_mult_x_im15_shift0(BITSHIFT,8459)@765
    assign i_add_ptr70_cnn766_mult_x_im15_shift0_qint = { i_add_ptr70_10_cnn1163_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr70_cnn766_mult_x_im15_shift0_q = i_add_ptr70_cnn766_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr70_cnn766_mult_x_sums_result_add_0_0(ADD,5683)@765 + 1
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr70_cnn766_mult_x_im15_shift0_q[20]}}, i_add_ptr70_cnn766_mult_x_im15_shift0_q};
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr70_cnn766_mult_x_sums_align_1_q[40]}}, i_add_ptr70_cnn766_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_q = i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,14982)@766
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr70_cnn766_mult_x_sums_result_add_0_0_q};

    // i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2(ADD,10470)@766 + 1
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,14987)@766
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr70_cnn766_mult_x_sums_result_add_0_1_q[69:69];

    // redist192_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18109)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist192_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist193_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18110)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist193_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2(ADD,10471)@767 + 1
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist193_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist193_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist192_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist192_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist658_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18575)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist658_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,10472)@768
    assign i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p2_of_2_q, redist658_i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr70_cnn766_mult_extender_x(BITJOIN,2067)@768
    assign i_add_ptr70_cnn766_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr70_cnn766_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr70_cnn766_trunc_sel_x(BITSELECT,2069)@768
    assign i_add_ptr70_cnn766_trunc_sel_x_b = i_add_ptr70_cnn766_mult_extender_x_q[63:0];

    // i_add_ptr70_cnn766_add_x(ADD,2061)@768
    assign i_add_ptr70_cnn766_add_x_a = {1'b0, i_add_ptr66_cnn763_vt_join_q};
    assign i_add_ptr70_cnn766_add_x_b = {1'b0, i_add_ptr70_cnn766_trunc_sel_x_b};
    assign i_add_ptr70_cnn766_add_x_o = $unsigned(i_add_ptr70_cnn766_add_x_a) + $unsigned(i_add_ptr70_cnn766_add_x_b);
    assign i_add_ptr70_cnn766_add_x_q = i_add_ptr70_cnn766_add_x_o[64:0];

    // i_add_ptr70_cnn766_dupName_0_trunc_sel_x(BITSELECT,2070)@768
    assign i_add_ptr70_cnn766_dupName_0_trunc_sel_x_b = i_add_ptr70_cnn766_add_x_q[63:0];

    // i_add_ptr70_cnn765_vt_select_63(BITSELECT,291)@768
    assign i_add_ptr70_cnn765_vt_select_63_b = i_add_ptr70_cnn766_dupName_0_trunc_sel_x_b[63:2];

    // redist799_i_add_ptr70_cnn765_vt_select_63_b_1(DELAY,18716)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist799_i_add_ptr70_cnn765_vt_select_63_b_1_q <= i_add_ptr70_cnn765_vt_select_63_b;
        end
    end

    // i_add_ptr70_cnn765_vt_join(BITJOIN,290)@769
    assign i_add_ptr70_cnn765_vt_join_q = {redist799_i_add_ptr70_cnn765_vt_select_63_b_1_q, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_add_ptr73_cnn775_add_x(ADD,2701)@769
    assign i_add_ptr73_cnn775_add_x_a = {1'b0, i_add_ptr70_cnn765_vt_join_q};
    assign i_add_ptr73_cnn775_add_x_b = {1'b0, i_add_ptr73_cnn775_trunc_sel_x_b};
    assign i_add_ptr73_cnn775_add_x_o = $unsigned(i_add_ptr73_cnn775_add_x_a) + $unsigned(i_add_ptr73_cnn775_add_x_b);
    assign i_add_ptr73_cnn775_add_x_q = i_add_ptr73_cnn775_add_x_o[64:0];

    // i_add_ptr73_cnn775_dupName_0_trunc_sel_x(BITSELECT,2710)@769
    assign i_add_ptr73_cnn775_dupName_0_trunc_sel_x_b = i_add_ptr73_cnn775_add_x_q[63:0];

    // i_add_ptr73_cnn774_vt_select_63(BITSELECT,483)@769
    assign i_add_ptr73_cnn774_vt_select_63_b = i_add_ptr73_cnn775_dupName_0_trunc_sel_x_b[63:2];

    // i_add_ptr73_cnn774_vt_join(BITJOIN,482)@769
    assign i_add_ptr73_cnn774_vt_join_q = {i_add_ptr73_cnn774_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_select_63(BITSELECT,774)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_select_63_b = i_add_ptr73_cnn774_vt_join_q[63:2];

    // i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_join(BITJOIN,773)@769
    assign i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_join_q = {i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_select_63_b, i_add_ptr66_10_cnn1160_vt_const_1_q};

    // redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15(DELAY,18706)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_delay_0 <= redist788_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_12_mem_q;
            redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_delay_1 <= redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_delay_0;
            redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_q <= redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_delay_1;
        end
    end

    // i_llvm_fpga_ffwd_dest_i1_unnamed_cnn108_cnn768(BLACKBOX,572)@769
    cnn_i_llvm_fpga_ffwd_dest_i1_unnamed_108_cnn769 thei_llvm_fpga_ffwd_dest_i1_unnamed_cnn108_cnn768 (
        .in_intel_reserved_ffwd_27_0(in_intel_reserved_ffwd_27_0),
        .in_stall_in(GND_q),
        .in_valid_in(redist773_sync_in_aunroll_x_in_i_valid_768_q),
        .out_dest_data_out_27_0(i_llvm_fpga_ffwd_dest_i1_unnamed_cnn108_cnn768_out_dest_data_out_27_0),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_offset(CONSTANT,18848)
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_offset_q = 3'b010;

    // redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt(ADD,18849)
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_a = {1'b0, redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_q};
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_b = {1'b0, redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_o <= $unsigned(redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_a) + $unsigned(redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_b);
        end
    end
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_q = redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_o[3:0];

    // leftShiftStage0Idx1Rng4_uid7611_i_mul58_cnn753_shift_x(BITSELECT,7610)@755
    assign leftShiftStage0Idx1Rng4_uid7611_i_mul58_cnn753_shift_x_in = redist784_i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out_1_q[59:0];
    assign leftShiftStage0Idx1Rng4_uid7611_i_mul58_cnn753_shift_x_b = leftShiftStage0Idx1Rng4_uid7611_i_mul58_cnn753_shift_x_in[59:0];

    // leftShiftStage0Idx1_uid7612_i_mul58_cnn753_shift_x(BITJOIN,7611)@755
    assign leftShiftStage0Idx1_uid7612_i_mul58_cnn753_shift_x_q = {leftShiftStage0Idx1Rng4_uid7611_i_mul58_cnn753_shift_x_b, i_mul58_cnn752_vt_const_3_q};

    // leftShiftStage0_uid7614_i_mul58_cnn753_shift_x(MUX,7613)@755
    assign leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_s = VCC_q;
    always @(leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_s or redist784_i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out_1_q or leftShiftStage0Idx1_uid7612_i_mul58_cnn753_shift_x_q)
    begin
        unique case (leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_s)
            1'b0 : leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_q = redist784_i_llvm_fpga_pop_i64_ti_055_pop34_cnn749_out_data_out_1_q;
            1'b1 : leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_q = leftShiftStage0Idx1_uid7612_i_mul58_cnn753_shift_x_q;
            default : leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_q = 64'b0;
        endcase
    end

    // i_mul58_cnn752_vt_select_63(BITSELECT,989)@755
    assign i_mul58_cnn752_vt_select_63_b = leftShiftStage0_uid7614_i_mul58_cnn753_shift_x_q[63:4];

    // i_mul58_cnn752_vt_const_3(CONSTANT,987)
    assign i_mul58_cnn752_vt_const_3_q = 4'b0000;

    // i_mul58_cnn752_vt_join(BITJOIN,988)@755
    assign i_mul58_cnn752_vt_join_q = {i_mul58_cnn752_vt_select_63_b, i_mul58_cnn752_vt_const_3_q};

    // i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select(BITSELECT,17900)@755
    assign i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_b = i_mul58_cnn752_vt_join_q[63:54];
    assign i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_c = i_mul58_cnn752_vt_join_q[53:36];
    assign i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_d = i_mul58_cnn752_vt_join_q[35:18];
    assign i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_e = i_mul58_cnn752_vt_join_q[17:0];

    // i_add_ptr59_cnn758_mult_x_bjA2(BITJOIN,3258)@755
    assign i_add_ptr59_cnn758_mult_x_bjA2_q = {GND_q, i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_b};

    // i_add_ptr59_cnn758_mult_x_im0_shift0(BITSHIFT,8136)@755
    assign i_add_ptr59_cnn758_mult_x_im0_shift0_qint = { i_add_ptr59_cnn758_mult_x_bjA2_q, 2'b00 };
    assign i_add_ptr59_cnn758_mult_x_im0_shift0_q = i_add_ptr59_cnn758_mult_x_im0_shift0_qint[12:0];

    // i_add_ptr59_cnn758_mult_x_sums_align_5(BITSHIFT,3281)@755
    assign i_add_ptr59_cnn758_mult_x_sums_align_5_qint = { {{2{i_add_ptr59_cnn758_mult_x_im0_shift0_q[12]}}, i_add_ptr59_cnn758_mult_x_im0_shift0_q}, 54'b000000000000000000000000000000000000000000000000000000 };
    assign i_add_ptr59_cnn758_mult_x_sums_align_5_q = i_add_ptr59_cnn758_mult_x_sums_align_5_qint[68:0];

    // i_add_ptr59_cnn758_mult_x_bjA7(BITJOIN,3263)@755
    assign i_add_ptr59_cnn758_mult_x_bjA7_q = {GND_q, i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_c};

    // i_add_ptr59_cnn758_mult_x_im5_shift0(BITSHIFT,8137)@755
    assign i_add_ptr59_cnn758_mult_x_im5_shift0_qint = { i_add_ptr59_cnn758_mult_x_bjA7_q, 2'b00 };
    assign i_add_ptr59_cnn758_mult_x_im5_shift0_q = i_add_ptr59_cnn758_mult_x_im5_shift0_qint[20:0];

    // i_add_ptr59_cnn758_mult_x_sums_align_3(BITSHIFT,3279)@755
    assign i_add_ptr59_cnn758_mult_x_sums_align_3_qint = { {{2{i_add_ptr59_cnn758_mult_x_im5_shift0_q[20]}}, i_add_ptr59_cnn758_mult_x_im5_shift0_q}, 36'b000000000000000000000000000000000000 };
    assign i_add_ptr59_cnn758_mult_x_sums_align_3_q = i_add_ptr59_cnn758_mult_x_sums_align_3_qint[58:0];

    // i_add_ptr59_cnn758_mult_x_sums_result_add_0_1(ADD,3284)@755 + 1
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_a = {{11{i_add_ptr59_cnn758_mult_x_sums_align_3_q[58]}}, i_add_ptr59_cnn758_mult_x_sums_align_3_q};
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_b = {{1{i_add_ptr59_cnn758_mult_x_sums_align_5_q[68]}}, i_add_ptr59_cnn758_mult_x_sums_align_5_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_o <= $signed(i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_a) + $signed(i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_b);
        end
    end
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_q = i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_o[69:0];

    // i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1(BITSELECT,12074)@756
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b = i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_q[41:41];

    // i_add_ptr59_cnn758_mult_x_bjA12(BITJOIN,3268)@755
    assign i_add_ptr59_cnn758_mult_x_bjA12_q = {GND_q, i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_d};

    // i_add_ptr59_cnn758_mult_x_im10_shift0(BITSHIFT,8138)@755
    assign i_add_ptr59_cnn758_mult_x_im10_shift0_qint = { i_add_ptr59_cnn758_mult_x_bjA12_q, 2'b00 };
    assign i_add_ptr59_cnn758_mult_x_im10_shift0_q = i_add_ptr59_cnn758_mult_x_im10_shift0_qint[20:0];

    // i_add_ptr59_cnn758_mult_x_sums_align_1(BITSHIFT,3277)@755
    assign i_add_ptr59_cnn758_mult_x_sums_align_1_qint = { {{2{i_add_ptr59_cnn758_mult_x_im10_shift0_q[20]}}, i_add_ptr59_cnn758_mult_x_im10_shift0_q}, 18'b000000000000000000 };
    assign i_add_ptr59_cnn758_mult_x_sums_align_1_q = i_add_ptr59_cnn758_mult_x_sums_align_1_qint[40:0];

    // i_add_ptr59_cnn758_mult_x_bjA17(BITJOIN,3273)@755
    assign i_add_ptr59_cnn758_mult_x_bjA17_q = {GND_q, i_add_ptr59_cnn758_mult_x_bs1_merged_bit_select_e};

    // i_add_ptr59_cnn758_mult_x_im15_shift0(BITSHIFT,8139)@755
    assign i_add_ptr59_cnn758_mult_x_im15_shift0_qint = { i_add_ptr59_cnn758_mult_x_bjA17_q, 2'b00 };
    assign i_add_ptr59_cnn758_mult_x_im15_shift0_q = i_add_ptr59_cnn758_mult_x_im15_shift0_qint[20:0];

    // i_add_ptr59_cnn758_mult_x_sums_result_add_0_0(ADD,3283)@755 + 1
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_a = {{21{i_add_ptr59_cnn758_mult_x_im15_shift0_q[20]}}, i_add_ptr59_cnn758_mult_x_im15_shift0_q};
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_b = {{1{i_add_ptr59_cnn758_mult_x_sums_align_1_q[40]}}, i_add_ptr59_cnn758_mult_x_sums_align_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_o <= $signed(i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_a) + $signed(i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_b);
        end
    end
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_q = i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_o[41:0];

    // i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b(BITJOIN,12102)@756
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q = {i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b, i_add_ptr59_cnn758_mult_x_sums_result_add_0_0_q};

    // i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2(ADD,9590)@756 + 1
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_a = {1'b0, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_BitJoin_for_b_q};
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_b = {1'b0, i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_o <= $unsigned(i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_a) + $unsigned(i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_b);
        end
    end
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_c[0] = i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_o[70];
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_q = i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_o[69:0];

    // i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0(BITSELECT,12107)@756
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b = i_add_ptr59_cnn758_mult_x_sums_result_add_0_1_q[69:69];

    // redist352_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1(DELAY,18269)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist352_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q <= i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b;
        end
    end

    // redist353_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1(DELAY,18270)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist353_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q <= i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel0_1_b;
        end
    end

    // i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2(ADD,9591)@757 + 1
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_cin = i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_c;
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_a = { {{1{redist353_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q[0]}}, redist353_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_a_tessel1_0_b_1_q}, 1'b1 };
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_b = { {{1{redist352_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q[0]}}, redist352_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitSelect_for_b_tessel1_0_b_1_q}, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_cin[0] };
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_o <= $signed(i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_a) + $signed(i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_b);
        end
    end
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_q = i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_o[1:1];

    // redist738_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_q_1(DELAY,18655)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist738_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_q_1_q <= i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_q;
        end
    end

    // i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitJoin_for_q(BITJOIN,9592)@758
    assign i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitJoin_for_q_q = {i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p2_of_2_q, redist738_i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_p1_of_2_q_1_q};

    // i_add_ptr59_cnn758_mult_extender_x(BITJOIN,1267)@758
    assign i_add_ptr59_cnn758_mult_extender_x_q = {i_add_ptr59_cnn758_mult_multconst_x_q, i_add_ptr59_cnn758_mult_x_sums_result_add_1_0_BitJoin_for_q_q[66:0]};

    // i_add_ptr59_cnn758_trunc_sel_x(BITSELECT,1269)@758
    assign i_add_ptr59_cnn758_trunc_sel_x_b = i_add_ptr59_cnn758_mult_extender_x_q[63:0];

    // i_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402(BLACKBOX,665)@755
    // out out_feedback_out_44@20000000
    // out out_feedback_valid_out_44@20000000
    cnn_i_llvm_fpga_push_p1f32_add_ptr109_push44_1403 thei_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402 (
        .in_data_in(i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out),
        .in_fanout_adaptor943(i_llvm_fpga_fanout_i1_fanout_adaptor943_cnn1400_q),
        .in_feedback_stall_in_44(i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_feedback_stall_out_44),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(),
        .out_feedback_out_44(i_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402_out_feedback_out_44),
        .out_feedback_valid_out_44(i_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402_out_feedback_valid_out_44),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt(ADD,18813)
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_a = {1'b0, redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_q};
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_b = {1'b0, redist760_sync_in_aunroll_x_in_c0_eni12_4_754_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_o <= $unsigned(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_a) + $unsigned(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_b);
        end
    end
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_q = redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_o[10:0];

    // redist760_sync_in_aunroll_x_in_c0_eni12_4_754_inputreg0(DELAY,18808)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist760_sync_in_aunroll_x_in_c0_eni12_4_754_inputreg0_q <= in_c0_eni12_4;
        end
    end

    // redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr(COUNTER,18811)
    // low=0, high=1023, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_i <= $unsigned(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_i) + $unsigned(10'd1);
        end
    end
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_q = redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_i[9:0];

    // redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem(DUALMEM,18810)
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_ia = redist760_sync_in_aunroll_x_in_c0_eni12_4_754_inputreg0_q;
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_aa = redist760_sync_in_aunroll_x_in_c0_eni12_4_754_wraddr_q;
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_ab = redist760_sync_in_aunroll_x_in_c0_eni12_4_754_rdcnt_q[9:0];
    altera_syncram #(
        .ram_block_type("M20K"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(10),
        .numwords_a(1024),
        .width_b(64),
        .widthad_b(10),
        .numwords_b(1024),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_aa),
        .data_a(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_ab),
        .q_b(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_q = redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_iq[63:0];

    // redist760_sync_in_aunroll_x_in_c0_eni12_4_754_outputreg0(DELAY,18809)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist760_sync_in_aunroll_x_in_c0_eni12_4_754_outputreg0_q <= redist760_sync_in_aunroll_x_in_c0_eni12_4_754_mem_q;
        end
    end

    // i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754(BLACKBOX,651)@755
    // out out_feedback_stall_out_44@20000000
    cnn_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_755 thei_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754 (
        .in_data_in(redist760_sync_in_aunroll_x_in_c0_eni12_4_754_outputreg0_q),
        .in_dir(i_llvm_fpga_fanout_i1_c0_ene2877_fanout_adaptor941_cnn727_q),
        .in_feedback_in_44(i_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402_out_feedback_out_44),
        .in_feedback_valid_in_44(i_llvm_fpga_push_p1f32_add_ptr109_push44_cnn1402_out_feedback_valid_out_44),
        .in_predicate(GND_q),
        .in_stall_in(GND_q),
        .in_valid_in(redist770_sync_in_aunroll_x_in_i_valid_754_q),
        .out_data_out(i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out),
        .out_feedback_stall_out_44(i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_feedback_stall_out_44),
        .out_stall_out(),
        .out_valid_out(),
        .clock(clock),
        .resetn(resetn)
    );

    // redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3(DELAY,18699)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_delay_0 <= i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out;
            redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_delay_1 <= redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_delay_0;
            redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_q <= redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_delay_1;
        end
    end

    // i_add_ptr59_cnn758_add_x(ADD,1261)@758
    assign i_add_ptr59_cnn758_add_x_a = {1'b0, redist782_i_llvm_fpga_pop_p1f32_add_ptr109_pop44_cnn754_out_data_out_3_q};
    assign i_add_ptr59_cnn758_add_x_b = {1'b0, i_add_ptr59_cnn758_trunc_sel_x_b};
    assign i_add_ptr59_cnn758_add_x_o = $unsigned(i_add_ptr59_cnn758_add_x_a) + $unsigned(i_add_ptr59_cnn758_add_x_b);
    assign i_add_ptr59_cnn758_add_x_q = i_add_ptr59_cnn758_add_x_o[64:0];

    // i_add_ptr59_cnn758_dupName_0_trunc_sel_x(BITSELECT,1270)@758
    assign i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b = i_add_ptr59_cnn758_add_x_q[63:0];

    // redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_inputreg0(DELAY,18844)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_inputreg0_q <= i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b;
        end
    end

    // redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr(COUNTER,18847)
    // low=0, high=7, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_i <= $unsigned(redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_i) + $unsigned(3'd1);
        end
    end
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_q = redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_i[2:0];

    // redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem(DUALMEM,18846)
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_ia = redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_inputreg0_q;
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_aa = redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_wraddr_q;
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_ab = redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_rdcnt_q[2:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(3),
        .numwords_a(8),
        .width_b(64),
        .widthad_b(3),
        .numwords_b(8),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_aa),
        .data_a(redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_ab),
        .q_b(redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_q = redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_iq[63:0];

    // redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_outputreg0(DELAY,18845)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_outputreg0_q <= redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_mem_q;
        end
    end

    // redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_offset(CONSTANT,18878)
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_offset_q = 3'b101;

    // redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt(ADD,18879)
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_a = {1'b0, redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_q};
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_b = {1'b0, redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_offset_q};
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_o <= $unsigned(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_a) + $unsigned(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_b);
        end
    end
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_q = redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_o[3:0];

    // redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_inputreg0(DELAY,18874)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_inputreg0_q <= redist786_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_7_outputreg0_q;
        end
    end

    // redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr(COUNTER,18877)
    // low=0, high=7, step=1, init=0
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_i <= $unsigned(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_i) + $unsigned(3'd1);
        end
    end
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_q = redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_i[2:0];

    // redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem(DUALMEM,18876)
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_ia = redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_inputreg0_q;
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_aa = redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_wraddr_q;
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_ab = redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_rdcnt_q[2:0];
    altera_syncram #(
        .ram_block_type("MLAB"),
        .operation_mode("DUAL_PORT"),
        .width_a(64),
        .widthad_a(3),
        .numwords_a(8),
        .width_b(64),
        .widthad_b(3),
        .numwords_b(8),
        .lpm_type("altera_syncram"),
        .width_byteena_a(1),
        .address_reg_b("CLOCK0"),
        .indata_reg_b("CLOCK0"),
        .rdcontrol_reg_b("CLOCK0"),
        .byteena_reg_b("CLOCK0"),
        .outdata_reg_b("CLOCK1"),
        .outdata_sclr_b("NONE"),
        .clock_enable_input_a("NORMAL"),
        .clock_enable_input_b("NORMAL"),
        .clock_enable_output_b("NORMAL"),
        .read_during_write_mode_mixed_ports("DONT_CARE"),
        .power_up_uninitialized("TRUE"),
        .intended_device_family("Stratix 10")
    ) redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_dmem (
        .clocken1(VCC_q[0]),
        .clocken0(VCC_q[0]),
        .clock0(clock),
        .clock1(clock),
        .address_a(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_aa),
        .data_a(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_ia),
        .wren_a(VCC_q[0]),
        .address_b(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_ab),
        .q_b(redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_iq),
        .wren_b(),
        .rden_a(),
        .rden_b(),
        .data_b(),
        .clocken2(),
        .clocken3(),
        .aclr0(),
        .aclr1(),
        .addressstall_a(),
        .addressstall_b(),
        .byteena_a(),
        .byteena_b(),
        .eccencbypass(),
        .eccencparity(),
        .sclr(),
        .address2_a(),
        .address2_b(),
        .q_a(),
        .eccstatus()
    );
    assign redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_q = redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_iq[63:0];

    // redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_outputreg0(DELAY,18875)
    always @ (posedge clock)
    begin
        if (0)
        begin
        end
        else
        begin
            redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_outputreg0_q <= redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_mem_q;
        end
    end

    // sync_out_aunroll_x(GPOUT,2752)@769
    assign out_c0_exi142_0 = GND_q;
    assign out_c0_exi142_1 = redist787_i_llvm_fpga_pop_i64_mul8599_pop39_cnn738_out_data_out_15_outputreg0_q;
    assign out_c0_exi142_2 = redist774_i_add_ptr59_cnn758_dupName_0_trunc_sel_x_b_11_outputreg0_q;
    assign out_c0_exi142_3 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn108_cnn768_out_dest_data_out_27_0;
    assign out_c0_exi142_4 = redist789_i_llvm_fpga_pop_i64_col_060_replace_phi104_pop41_cnn771_out_data_out_15_q;
    assign out_c0_exi142_5 = i_memcoalesce_bitcast_cnn_fpgaunique_1_cnn776_vt_join_q;
    assign out_c0_exi142_6 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn109_cnn777_out_dest_data_out_28_0;
    assign out_c0_exi142_7 = i_memcoalesce_bitcast_cnn_fpgaunique_2_cnn784_vt_join_q;
    assign out_c0_exi142_8 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn110_cnn785_out_dest_data_out_29_0;
    assign out_c0_exi142_9 = i_memcoalesce_bitcast_cnn_fpgaunique_3_cnn792_vt_join_q;
    assign out_c0_exi142_10 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn111_cnn793_out_dest_data_out_30_0;
    assign out_c0_exi142_11 = i_memcoalesce_bitcast_cnn_fpgaunique_4_cnn800_vt_join_q;
    assign out_c0_exi142_12 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn112_cnn801_out_dest_data_out_31_0;
    assign out_c0_exi142_13 = i_memcoalesce_bitcast_cnn_fpgaunique_5_cnn815_vt_join_q;
    assign out_c0_exi142_14 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn113_cnn816_out_dest_data_out_32_0;
    assign out_c0_exi142_15 = i_memcoalesce_bitcast_cnn_fpgaunique_6_cnn823_vt_join_q;
    assign out_c0_exi142_16 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn114_cnn824_out_dest_data_out_33_0;
    assign out_c0_exi142_17 = i_memcoalesce_bitcast_cnn_fpgaunique_7_cnn831_vt_join_q;
    assign out_c0_exi142_18 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn115_cnn832_out_dest_data_out_34_0;
    assign out_c0_exi142_19 = i_memcoalesce_bitcast_cnn_fpgaunique_8_cnn839_vt_join_q;
    assign out_c0_exi142_20 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn116_cnn840_out_dest_data_out_35_0;
    assign out_c0_exi142_21 = i_memcoalesce_bitcast_cnn_fpgaunique_9_cnn854_vt_join_q;
    assign out_c0_exi142_22 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn117_cnn855_out_dest_data_out_36_0;
    assign out_c0_exi142_23 = i_memcoalesce_bitcast_cnn_fpgaunique_10_cnn862_vt_join_q;
    assign out_c0_exi142_24 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn118_cnn863_out_dest_data_out_37_0;
    assign out_c0_exi142_25 = i_memcoalesce_bitcast_cnn_fpgaunique_11_cnn870_vt_join_q;
    assign out_c0_exi142_26 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn119_cnn871_out_dest_data_out_38_0;
    assign out_c0_exi142_27 = i_memcoalesce_bitcast_cnn_fpgaunique_12_cnn878_vt_join_q;
    assign out_c0_exi142_28 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn120_cnn879_out_dest_data_out_39_0;
    assign out_c0_exi142_29 = i_memcoalesce_bitcast_cnn_fpgaunique_13_cnn893_vt_join_q;
    assign out_c0_exi142_30 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn121_cnn894_out_dest_data_out_40_0;
    assign out_c0_exi142_31 = i_memcoalesce_bitcast_cnn_fpgaunique_14_cnn901_vt_join_q;
    assign out_c0_exi142_32 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn122_cnn902_out_dest_data_out_41_0;
    assign out_c0_exi142_33 = i_memcoalesce_bitcast_cnn_fpgaunique_15_cnn909_vt_join_q;
    assign out_c0_exi142_34 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn123_cnn910_out_dest_data_out_42_0;
    assign out_c0_exi142_35 = i_memcoalesce_bitcast_cnn_fpgaunique_16_cnn917_vt_join_q;
    assign out_c0_exi142_36 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn124_cnn918_out_dest_data_out_43_0;
    assign out_c0_exi142_37 = i_memcoalesce_bitcast_cnn_fpgaunique_17_cnn932_vt_join_q;
    assign out_c0_exi142_38 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn125_cnn933_out_dest_data_out_44_0;
    assign out_c0_exi142_39 = i_memcoalesce_bitcast_cnn_fpgaunique_18_cnn940_vt_join_q;
    assign out_c0_exi142_40 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn126_cnn941_out_dest_data_out_45_0;
    assign out_c0_exi142_41 = i_memcoalesce_bitcast_cnn_fpgaunique_19_cnn948_vt_join_q;
    assign out_c0_exi142_42 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn127_cnn949_out_dest_data_out_46_0;
    assign out_c0_exi142_43 = i_memcoalesce_bitcast_cnn_fpgaunique_20_cnn956_vt_join_q;
    assign out_c0_exi142_44 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn128_cnn957_out_dest_data_out_47_0;
    assign out_c0_exi142_45 = i_memcoalesce_bitcast_cnn_fpgaunique_21_cnn971_vt_join_q;
    assign out_c0_exi142_46 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn129_cnn972_out_dest_data_out_48_0;
    assign out_c0_exi142_47 = i_memcoalesce_bitcast_cnn_fpgaunique_22_cnn979_vt_join_q;
    assign out_c0_exi142_48 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn130_cnn980_out_dest_data_out_49_0;
    assign out_c0_exi142_49 = i_memcoalesce_bitcast_cnn_fpgaunique_23_cnn987_vt_join_q;
    assign out_c0_exi142_50 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn131_cnn988_out_dest_data_out_50_0;
    assign out_c0_exi142_51 = i_memcoalesce_bitcast_cnn_fpgaunique_24_cnn995_vt_join_q;
    assign out_c0_exi142_52 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn132_cnn996_out_dest_data_out_51_0;
    assign out_c0_exi142_53 = i_memcoalesce_bitcast_cnn_fpgaunique_25_cnn1010_vt_join_q;
    assign out_c0_exi142_54 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn133_cnn1011_out_dest_data_out_52_0;
    assign out_c0_exi142_55 = i_memcoalesce_bitcast_cnn_fpgaunique_26_cnn1018_vt_join_q;
    assign out_c0_exi142_56 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn134_cnn1019_out_dest_data_out_53_0;
    assign out_c0_exi142_57 = i_memcoalesce_bitcast_cnn_fpgaunique_27_cnn1026_vt_join_q;
    assign out_c0_exi142_58 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn135_cnn1027_out_dest_data_out_54_0;
    assign out_c0_exi142_59 = i_memcoalesce_bitcast_cnn_fpgaunique_28_cnn1034_vt_join_q;
    assign out_c0_exi142_60 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn136_cnn1035_out_dest_data_out_55_0;
    assign out_c0_exi142_61 = i_memcoalesce_bitcast_cnn_fpgaunique_29_cnn1049_vt_join_q;
    assign out_c0_exi142_62 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn137_cnn1050_out_dest_data_out_56_0;
    assign out_c0_exi142_63 = i_memcoalesce_bitcast_cnn_fpgaunique_30_cnn1057_vt_join_q;
    assign out_c0_exi142_64 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn138_cnn1058_out_dest_data_out_57_0;
    assign out_c0_exi142_65 = i_memcoalesce_bitcast_cnn_fpgaunique_31_cnn1065_vt_join_q;
    assign out_c0_exi142_66 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn139_cnn1066_out_dest_data_out_58_0;
    assign out_c0_exi142_67 = i_memcoalesce_bitcast_cnn_fpgaunique_32_cnn1073_vt_join_q;
    assign out_c0_exi142_68 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn140_cnn1074_out_dest_data_out_59_0;
    assign out_c0_exi142_69 = i_memcoalesce_bitcast_cnn_fpgaunique_33_cnn1088_vt_join_q;
    assign out_c0_exi142_70 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn141_cnn1089_out_dest_data_out_60_0;
    assign out_c0_exi142_71 = i_memcoalesce_bitcast_cnn_fpgaunique_34_cnn1096_vt_join_q;
    assign out_c0_exi142_72 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn142_cnn1097_out_dest_data_out_61_0;
    assign out_c0_exi142_73 = i_memcoalesce_bitcast_cnn_fpgaunique_35_cnn1104_vt_join_q;
    assign out_c0_exi142_74 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn143_cnn1105_out_dest_data_out_62_0;
    assign out_c0_exi142_75 = i_memcoalesce_bitcast_cnn_fpgaunique_36_cnn1112_vt_join_q;
    assign out_c0_exi142_76 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn144_cnn1113_out_dest_data_out_63_0;
    assign out_c0_exi142_77 = i_memcoalesce_bitcast_cnn_fpgaunique_37_cnn1127_vt_join_q;
    assign out_c0_exi142_78 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn145_cnn1128_out_dest_data_out_64_0;
    assign out_c0_exi142_79 = i_memcoalesce_bitcast_cnn_fpgaunique_38_cnn1135_vt_join_q;
    assign out_c0_exi142_80 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn146_cnn1136_out_dest_data_out_65_0;
    assign out_c0_exi142_81 = i_memcoalesce_bitcast_cnn_fpgaunique_39_cnn1143_vt_join_q;
    assign out_c0_exi142_82 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn147_cnn1144_out_dest_data_out_66_0;
    assign out_c0_exi142_83 = i_memcoalesce_bitcast_cnn_fpgaunique_40_cnn1151_vt_join_q;
    assign out_c0_exi142_84 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn148_cnn1152_out_dest_data_out_67_0;
    assign out_c0_exi142_85 = i_memcoalesce_bitcast_cnn_fpgaunique_41_cnn1166_vt_join_q;
    assign out_c0_exi142_86 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn149_cnn1167_out_dest_data_out_68_0;
    assign out_c0_exi142_87 = i_memcoalesce_bitcast_cnn_fpgaunique_42_cnn1174_vt_join_q;
    assign out_c0_exi142_88 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn150_cnn1175_out_dest_data_out_69_0;
    assign out_c0_exi142_89 = i_memcoalesce_bitcast_cnn_fpgaunique_43_cnn1182_vt_join_q;
    assign out_c0_exi142_90 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn151_cnn1183_out_dest_data_out_70_0;
    assign out_c0_exi142_91 = i_memcoalesce_bitcast_cnn_fpgaunique_44_cnn1190_vt_join_q;
    assign out_c0_exi142_92 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn152_cnn1191_out_dest_data_out_71_0;
    assign out_c0_exi142_93 = i_memcoalesce_bitcast_cnn_fpgaunique_45_cnn1205_vt_join_q;
    assign out_c0_exi142_94 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn153_cnn1206_out_dest_data_out_72_0;
    assign out_c0_exi142_95 = i_memcoalesce_bitcast_cnn_fpgaunique_46_cnn1213_vt_join_q;
    assign out_c0_exi142_96 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn154_cnn1214_out_dest_data_out_73_0;
    assign out_c0_exi142_97 = i_memcoalesce_bitcast_cnn_fpgaunique_47_cnn1221_vt_join_q;
    assign out_c0_exi142_98 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn155_cnn1222_out_dest_data_out_74_0;
    assign out_c0_exi142_99 = i_memcoalesce_bitcast_cnn_fpgaunique_48_cnn1229_vt_join_q;
    assign out_c0_exi142_100 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn156_cnn1230_out_dest_data_out_75_0;
    assign out_c0_exi142_101 = i_memcoalesce_bitcast_cnn_fpgaunique_49_cnn1244_vt_join_q;
    assign out_c0_exi142_102 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn157_cnn1245_out_dest_data_out_76_0;
    assign out_c0_exi142_103 = i_memcoalesce_bitcast_cnn_fpgaunique_50_cnn1252_vt_join_q;
    assign out_c0_exi142_104 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn158_cnn1253_out_dest_data_out_77_0;
    assign out_c0_exi142_105 = i_memcoalesce_bitcast_cnn_fpgaunique_51_cnn1260_vt_join_q;
    assign out_c0_exi142_106 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn159_cnn1261_out_dest_data_out_78_0;
    assign out_c0_exi142_107 = i_memcoalesce_bitcast_cnn_fpgaunique_52_cnn1268_vt_join_q;
    assign out_c0_exi142_108 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn160_cnn1269_out_dest_data_out_79_0;
    assign out_c0_exi142_109 = i_memcoalesce_bitcast_cnn_fpgaunique_53_cnn1283_vt_join_q;
    assign out_c0_exi142_110 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn161_cnn1284_out_dest_data_out_80_0;
    assign out_c0_exi142_111 = i_memcoalesce_bitcast_cnn_fpgaunique_54_cnn1291_vt_join_q;
    assign out_c0_exi142_112 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn162_cnn1292_out_dest_data_out_81_0;
    assign out_c0_exi142_113 = i_memcoalesce_bitcast_cnn_fpgaunique_55_cnn1299_vt_join_q;
    assign out_c0_exi142_114 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn163_cnn1300_out_dest_data_out_82_0;
    assign out_c0_exi142_115 = i_memcoalesce_bitcast_cnn_fpgaunique_56_cnn1307_vt_join_q;
    assign out_c0_exi142_116 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn164_cnn1308_out_dest_data_out_83_0;
    assign out_c0_exi142_117 = i_memcoalesce_bitcast_cnn_fpgaunique_57_cnn1322_vt_join_q;
    assign out_c0_exi142_118 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn165_cnn1323_out_dest_data_out_84_0;
    assign out_c0_exi142_119 = i_memcoalesce_bitcast_cnn_fpgaunique_58_cnn1330_vt_join_q;
    assign out_c0_exi142_120 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn166_cnn1331_out_dest_data_out_85_0;
    assign out_c0_exi142_121 = i_memcoalesce_bitcast_cnn_fpgaunique_59_cnn1338_vt_join_q;
    assign out_c0_exi142_122 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn167_cnn1339_out_dest_data_out_86_0;
    assign out_c0_exi142_123 = i_memcoalesce_bitcast_cnn_fpgaunique_60_cnn1346_vt_join_q;
    assign out_c0_exi142_124 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn168_cnn1347_out_dest_data_out_87_0;
    assign out_c0_exi142_125 = i_memcoalesce_bitcast_cnn_fpgaunique_61_cnn1361_vt_join_q;
    assign out_c0_exi142_126 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn169_cnn1362_out_dest_data_out_88_0;
    assign out_c0_exi142_127 = i_memcoalesce_bitcast_cnn_fpgaunique_62_cnn1369_vt_join_q;
    assign out_c0_exi142_128 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn170_cnn1370_out_dest_data_out_89_0;
    assign out_c0_exi142_129 = i_memcoalesce_bitcast_cnn_fpgaunique_63_cnn1377_vt_join_q;
    assign out_c0_exi142_130 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn171_cnn1378_out_dest_data_out_90_0;
    assign out_c0_exi142_131 = i_memcoalesce_bitcast_cnn_fpgaunique_64_cnn1385_vt_join_q;
    assign out_c0_exi142_132 = i_llvm_fpga_ffwd_dest_i1_unnamed_cnn172_cnn1386_out_dest_data_out_91_0;
    assign out_c0_exi142_133 = redist780_i_unnamed_cnn1399_q_15_q;
    assign out_c0_exi142_134 = i_notcmp_cnn1420_q;
    assign out_c0_exi142_135 = redist781_i_llvm_fpga_push_i64_add82_push35_cnn1427_out_data_out_14_outputreg0_q;
    assign out_c0_exi142_136 = i_llvm_fpga_push_i64_add1788_push36_cnn1433_out_data_out;
    assign out_c0_exi142_137 = i_llvm_fpga_push_i64_add3193_push37_cnn1439_out_data_out;
    assign out_c0_exi142_138 = redist793_i_llvm_fpga_pop_i1_notcmp75102_pop40_cnn1442_out_data_out_15_q;
    assign out_c0_exi142_139 = redist794_i_llvm_fpga_pop_i1_notcmp71106_pop42_cnn1448_out_data_out_14_q;
    assign out_c0_exi142_140 = redist783_i_llvm_fpga_pop_i64_to_058_replace_phi108_pop43_cnn1454_out_data_out_14_outputreg0_q;
    assign out_c0_exi142_141 = redist795_i_llvm_fpga_pop_i1_notcmp67110_pop45_cnn1460_out_data_out_14_q;
    assign out_c0_exi142_142 = redist758_sync_in_aunroll_x_in_c0_eni12_2_768_q;
    assign out_o_valid = redist773_sync_in_aunroll_x_in_i_valid_768_q;
    assign out_unnamed_cnn8 = GND_q;

endmodule
